// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesh/v1alpha1/config.proto

// Configuration affecting the service mesh as a whole.

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	v1alpha3 "istio.io/api/networking/v1alpha3"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Resource describes the source of configuration
type Resource int32

const (
	// Set to only receive service entries that are generated by the platform.
	// These auto generated service entries are combination of services and endpoints
	// that are generated by a specific platform e.g. k8
	Resource_SERVICE_REGISTRY Resource = 0
)

var Resource_name = map[int32]string{
	0: "SERVICE_REGISTRY",
}

var Resource_value = map[string]int32{
	"SERVICE_REGISTRY": 0,
}

func (x Resource) String() string {
	return proto.EnumName(Resource_name, int32(x))
}

func (Resource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0}
}

type MeshConfig_IngressControllerMode int32

const (
	// Unspecified Istio ingress controller.
	MeshConfig_UNSPECIFIED MeshConfig_IngressControllerMode = 0
	// Disables Istio ingress controller.
	MeshConfig_OFF MeshConfig_IngressControllerMode = 1
	// Istio ingress controller will act on ingress resources that do not
	// contain any annotation or whose annotations match the value
	// specified in the ingress_class parameter described earlier. Use this
	// mode if Istio ingress controller will be the default ingress
	// controller for the entireKubernetes cluster.
	MeshConfig_DEFAULT MeshConfig_IngressControllerMode = 2
	// Istio ingress controller will only act on ingress resources whose
	// annotations match the value specified in the ingress_class parameter
	// described earlier. Use this mode if Istio ingress controller will be
	// a secondary ingress controller (e.g., in addition to a
	// cloud-provided ingress controller).
	MeshConfig_STRICT MeshConfig_IngressControllerMode = 3
)

var MeshConfig_IngressControllerMode_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "OFF",
	2: "DEFAULT",
	3: "STRICT",
}

var MeshConfig_IngressControllerMode_value = map[string]int32{
	"UNSPECIFIED": 0,
	"OFF":         1,
	"DEFAULT":     2,
	"STRICT":      3,
}

func (x MeshConfig_IngressControllerMode) String() string {
	return proto.EnumName(MeshConfig_IngressControllerMode_name, int32(x))
}

func (MeshConfig_IngressControllerMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 0}
}

// $hide_from_docs
type MeshConfig_AuthPolicy int32

const (
	MeshConfig_NONE       MeshConfig_AuthPolicy = 0
	MeshConfig_MUTUAL_TLS MeshConfig_AuthPolicy = 1
)

var MeshConfig_AuthPolicy_name = map[int32]string{
	0: "NONE",
	1: "MUTUAL_TLS",
}

var MeshConfig_AuthPolicy_value = map[string]int32{
	"NONE":       0,
	"MUTUAL_TLS": 1,
}

func (x MeshConfig_AuthPolicy) String() string {
	return proto.EnumName(MeshConfig_AuthPolicy_name, int32(x))
}

func (MeshConfig_AuthPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 1}
}

type MeshConfig_AccessLogEncoding int32

const (
	MeshConfig_TEXT MeshConfig_AccessLogEncoding = 0
	MeshConfig_JSON MeshConfig_AccessLogEncoding = 1
)

var MeshConfig_AccessLogEncoding_name = map[int32]string{
	0: "TEXT",
	1: "JSON",
}

var MeshConfig_AccessLogEncoding_value = map[string]int32{
	"TEXT": 0,
	"JSON": 1,
}

func (x MeshConfig_AccessLogEncoding) String() string {
	return proto.EnumName(MeshConfig_AccessLogEncoding_name, int32(x))
}

func (MeshConfig_AccessLogEncoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 2}
}

// Default Policy for upgrading http1.1 connections to http2.
type MeshConfig_H2UpgradePolicy int32

const (
	// Do not upgrade connections to http2.
	MeshConfig_DO_NOT_UPGRADE MeshConfig_H2UpgradePolicy = 0
	// Upgrade the connections to http2.
	MeshConfig_UPGRADE MeshConfig_H2UpgradePolicy = 1
)

var MeshConfig_H2UpgradePolicy_name = map[int32]string{
	0: "DO_NOT_UPGRADE",
	1: "UPGRADE",
}

var MeshConfig_H2UpgradePolicy_value = map[string]int32{
	"DO_NOT_UPGRADE": 0,
	"UPGRADE":        1,
}

func (x MeshConfig_H2UpgradePolicy) String() string {
	return proto.EnumName(MeshConfig_H2UpgradePolicy_name, int32(x))
}

func (MeshConfig_H2UpgradePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 3}
}

type MeshConfig_OutboundTrafficPolicy_Mode int32

const (
	// outbound traffic will be restricted to services defined in the
	// service registry as well as those defined through ServiceEntries
	MeshConfig_OutboundTrafficPolicy_REGISTRY_ONLY MeshConfig_OutboundTrafficPolicy_Mode = 0
	// outbound traffic to unknown destinations will be allowed, in case
	// there are no services or ServiceEntries for the destination port
	MeshConfig_OutboundTrafficPolicy_ALLOW_ANY MeshConfig_OutboundTrafficPolicy_Mode = 1
)

var MeshConfig_OutboundTrafficPolicy_Mode_name = map[int32]string{
	0: "REGISTRY_ONLY",
	1: "ALLOW_ANY",
}

var MeshConfig_OutboundTrafficPolicy_Mode_value = map[string]int32{
	"REGISTRY_ONLY": 0,
	"ALLOW_ANY":     1,
}

func (x MeshConfig_OutboundTrafficPolicy_Mode) String() string {
	return proto.EnumName(MeshConfig_OutboundTrafficPolicy_Mode_name, int32(x))
}

func (MeshConfig_OutboundTrafficPolicy_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 0, 0}
}

// MeshConfig defines mesh-wide variables shared by all Envoy instances in the
// Istio service mesh.
//
// NOTE: This configuration type should be used for the low-level global
// configuration, such as component addresses and port numbers. It should not
// be used for the features of the mesh that can be scoped by service or by
// namespace. Some of the fields in the mesh config are going to be deprecated
// and replaced with several individual configuration types (for example,
// tracing configuration).
type MeshConfig struct {
	// Port on which Envoy should listen for incoming connections from
	// other services. Default port is 15001.
	ProxyListenPort int32 `protobuf:"varint,4,opt,name=proxy_listen_port,json=proxyListenPort,proto3" json:"proxy_listen_port,omitempty"`
	// Port on which Envoy should listen for HTTP PROXY requests if set.
	ProxyHttpPort int32 `protobuf:"varint,5,opt,name=proxy_http_port,json=proxyHttpPort,proto3" json:"proxy_http_port,omitempty"`
	// Connection timeout used by Envoy. (MUST BE >=1ms)
	// Default timeout is 10s.
	ConnectTimeout *duration.Duration `protobuf:"bytes,6,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// Automatic protocol detection uses a set of heuristics to
	// determine whether the connection is using TLS or not (on the
	// server side), as well as the application protocol being used
	// (e.g., http vs tcp). These heuristics rely on the client sending
	// the first bits of data. For server first protocols like MySQL,
	// MongoDB, etc. Envoy will timeout on the protocol detection after
	// the specified period, defaulting to non mTLS plain TCP
	// traffic. Set this field to tweak the period that Envoy will wait
	// for the client to send the first bits of data. (MUST BE >=1ms or
	// 0s to disable). Default detection timeout is 5s.
	ProtocolDetectionTimeout *duration.Duration `protobuf:"bytes,42,opt,name=protocol_detection_timeout,json=protocolDetectionTimeout,proto3" json:"protocol_detection_timeout,omitempty"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *v1alpha3.ConnectionPoolSettings_TCPSettings_TcpKeepalive `protobuf:"bytes,28,opt,name=tcp_keepalive,json=tcpKeepalive,proto3" json:"tcp_keepalive,omitempty"`
	// Class of ingress resources to be processed by Istio ingress
	// controller. This corresponds to the value of
	// "kubernetes.io/ingress.class" annotation.
	IngressClass string `protobuf:"bytes,7,opt,name=ingress_class,json=ingressClass,proto3" json:"ingress_class,omitempty"`
	// Name of the Kubernetes service used for the istio ingress controller.
	// If no ingress controller is specified, the default value `istio-ingressgateway` is used.
	IngressService string `protobuf:"bytes,8,opt,name=ingress_service,json=ingressService,proto3" json:"ingress_service,omitempty"`
	// Defines whether to use Istio ingress controller for annotated or all ingress resources.
	// Default mode is STRICT.
	IngressControllerMode MeshConfig_IngressControllerMode `protobuf:"varint,9,opt,name=ingress_controller_mode,json=ingressControllerMode,proto3,enum=istio.mesh.v1alpha1.MeshConfig_IngressControllerMode" json:"ingress_controller_mode,omitempty"`
	// Defines which gateway deployment to use as the Ingress controller. This field corresponds to
	// the Gateway.selector field, and will be set as `istio: INGRESS_SELECTOR`.
	// By default, `ingressgateway` is used, which will select the default IngressGateway as it has the
	// `istio: ingressgateway` labels.
	// It is recommended that this is the same value as ingress_service.
	IngressSelector string `protobuf:"bytes,52,opt,name=ingress_selector,json=ingressSelector,proto3" json:"ingress_selector,omitempty"`
	// $hide_from_docs
	AuthPolicy MeshConfig_AuthPolicy `protobuf:"varint,10,opt,name=auth_policy,json=authPolicy,proto3,enum=istio.mesh.v1alpha1.MeshConfig_AuthPolicy" json:"auth_policy,omitempty"` // Deprecated: Do not use.
	// $hide_from_docs
	RdsRefreshDelay *duration.Duration `protobuf:"bytes,11,opt,name=rds_refresh_delay,json=rdsRefreshDelay,proto3" json:"rds_refresh_delay,omitempty"` // Deprecated: Do not use.
	// Flag to control generation of trace spans and request IDs.
	// Requires a trace span collector defined in the proxy configuration.
	EnableTracing bool `protobuf:"varint,12,opt,name=enable_tracing,json=enableTracing,proto3" json:"enable_tracing,omitempty"`
	// File address for the proxy access log (e.g. /dev/stdout).
	// Empty value disables access logging.
	AccessLogFile string `protobuf:"bytes,13,opt,name=access_log_file,json=accessLogFile,proto3" json:"access_log_file,omitempty"`
	// Format for the proxy access log
	// Empty value results in proxy's default access log format
	AccessLogFormat string `protobuf:"bytes,24,opt,name=access_log_format,json=accessLogFormat,proto3" json:"access_log_format,omitempty"`
	// Encoding for the proxy access log (text or json).
	// Default value is text.
	AccessLogEncoding MeshConfig_AccessLogEncoding `protobuf:"varint,27,opt,name=access_log_encoding,json=accessLogEncoding,proto3,enum=istio.mesh.v1alpha1.MeshConfig_AccessLogEncoding" json:"access_log_encoding,omitempty"`
	// This flag enables Envoy's gRPC Access Log Service.
	// See [Access Log Service](https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/accesslog/v2/als.proto)
	// for details about Envoy's gRPC Access Log Service API.
	// Default value is false.
	EnableEnvoyAccessLogService bool `protobuf:"varint,40,opt,name=enable_envoy_access_log_service,json=enableEnvoyAccessLogService,proto3" json:"enable_envoy_access_log_service,omitempty"`
	// Default proxy config used by the proxy injection mechanism operating in the mesh
	// (e.g. Kubernetes admission controller)
	// In case of Kubernetes, the proxy config is applied once during the injection process,
	// and remain constant for the duration of the pod. The rest of the mesh config can be changed
	// at runtime and config gets distributed dynamically.
	DefaultConfig *ProxyConfig `protobuf:"bytes,14,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	// Set the default behavior of the sidecar for handling outbound
	// traffic from the application.  If your application uses one or
	// more external services that are not known apriori, setting the
	// policy to ALLOW_ANY will cause the sidecars to route any unknown
	// traffic originating from the application to its requested
	// destination. Users are strongly encouraged to use ServiceEntries
	// to explicitly declare any external dependencies, instead of using
	// allow_any, so that traffic to these services can be
	// monitored. Can be overridden at a Sidecar level by setting the
	// OutboundTrafficPolicy in the [Sidecar
	// API](https://istio.io/docs/reference/config/networking/sidecar/#OutboundTrafficPolicy).
	// Default mode is ALLOW_ANY which means outbound traffic to unknown destinations will be allowed.
	OutboundTrafficPolicy *MeshConfig_OutboundTrafficPolicy `protobuf:"bytes,17,opt,name=outbound_traffic_policy,json=outboundTrafficPolicy,proto3" json:"outbound_traffic_policy,omitempty"`
	// ConfigSource describes a source of configuration data for networking
	// rules, and other Istio configuration artifacts. Multiple data sources
	// can be configured for a single control plane.
	ConfigSources []*ConfigSource `protobuf:"bytes,22,rep,name=config_sources,json=configSources,proto3" json:"config_sources,omitempty"`
	// This flag is used to enable mutual TLS automatically for service to service communication
	// within the mesh, default true.
	// If set to true, and a given service does not have a corresponding DestinationRule configured,
	// or its DestinationRule does not have ClientTLSSettings specified, Istio configures client side
	// TLS configuration appropriately. More specifically,
	// If the upstream authentication policy is in STRICT mode, use Istio provisioned certificate
	// for mutual TLS to connect to upstream.
	// If upstream service is in plain text mode, use plain text.
	// If the upstream authentication policy is in PERMISSIVE mode, Istio configures clients to use
	// mutual TLS when server sides are capable of accepting mutual TLS traffic.
	// If service DestinationRule exists and has ClientTLSSettings specified, that is always used instead.
	EnableAutoMtls *wrappers.BoolValue `protobuf:"bytes,43,opt,name=enable_auto_mtls,json=enableAutoMtls,proto3" json:"enable_auto_mtls,omitempty"`
	// The trust domain corresponds to the trust root of a system.
	// Refer to [SPIFFE-ID](https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain)
	TrustDomain string `protobuf:"bytes,26,opt,name=trust_domain,json=trustDomain,proto3" json:"trust_domain,omitempty"`
	// The trust domain aliases represent the aliases of `trust_domain`.
	// For example, if we have
	// ```yaml
	// trustDomain: td1
	// trustDomainAliases: ["td2", "td3"]
	// ```
	// Any service with the identity `td1/ns/foo/sa/a-service-account`, `td2/ns/foo/sa/a-service-account`,
	// or `td3/ns/foo/sa/a-service-account` will be treated the same in the Istio mesh.
	TrustDomainAliases []string `protobuf:"bytes,46,rep,name=trust_domain_aliases,json=trustDomainAliases,proto3" json:"trust_domain_aliases,omitempty"`
	// The default value for the ServiceEntry.export_to field and services
	// imported through container registry integrations, e.g. this applies to
	// Kubernetes Service resources. The value is a list of namespace names and
	// reserved namespace aliases. The allowed namespace aliases are:
	//
	// * - All Namespaces
	// . - Current Namespace
	// ~ - No Namespace
	//
	// If not set the system will use "*" as the default value which implies that
	// services are exported to all namespaces.
	//
	// 'All namespaces' is a reasonable default for implementations that don't
	// need to restrict access or visibility of services across namespace
	// boundaries. If that requirement is present it is generally good practice to
	// make the default 'Current namespace' so that services are only visible
	// within their own namespaces by default. Operators can then expand the
	// visibility of services to other namespaces as needed. Use of 'No Namespace'
	// is expected to be rare but can have utility for deployments where
	// dependency management needs to be precise even within the scope of a single
	// namespace.
	//
	// For further discussion see the reference documentation for ServiceEntry,
	// Sidecar, and Gateway.
	DefaultServiceExportTo []string `protobuf:"bytes,31,rep,name=default_service_export_to,json=defaultServiceExportTo,proto3" json:"default_service_export_to,omitempty"`
	// The default value for the VirtualService.export_to field. Has the same
	// syntax as 'default_service_export_to'.
	//
	// If not set the system will use "*" as the default value which implies that
	// virtual services are exported to all namespaces
	DefaultVirtualServiceExportTo []string `protobuf:"bytes,32,rep,name=default_virtual_service_export_to,json=defaultVirtualServiceExportTo,proto3" json:"default_virtual_service_export_to,omitempty"`
	// The default value for the DestinationRule.export_to field. Has the same
	// syntax as 'default_service_export_to'.
	//
	// If not set the system will use "*" as the default value which implies that
	// destination rules are exported to all namespaces
	DefaultDestinationRuleExportTo []string `protobuf:"bytes,33,rep,name=default_destination_rule_export_to,json=defaultDestinationRuleExportTo,proto3" json:"default_destination_rule_export_to,omitempty"`
	// The namespace to treat as the administrative root namespace for
	// Istio configuration. When processing a leaf namespace Istio will search for
	// declarations in that namespace first and if none are found it will
	// search in the root namespace. Any matching declaration found in the root
	// namespace is processed as if it were declared in the leaf namespace.
	//
	// The precise semantics of this processing are documented on each resource
	// type.
	RootNamespace string `protobuf:"bytes,34,opt,name=root_namespace,json=rootNamespace,proto3" json:"root_namespace,omitempty"`
	// Locality based load balancing distribution or failover settings.
	LocalityLbSetting *v1alpha3.LocalityLoadBalancerSetting `protobuf:"bytes,35,opt,name=locality_lb_setting,json=localityLbSetting,proto3" json:"locality_lb_setting,omitempty"`
	// Configures DNS refresh rate for Envoy clusters of type STRICT_DNS
	// Default refresh rate is 5s.
	DnsRefreshRate *duration.Duration `protobuf:"bytes,36,opt,name=dns_refresh_rate,json=dnsRefreshRate,proto3" json:"dns_refresh_rate,omitempty"`
	// Specify if http1.1 connections should be upgraded to http2 by default.
	// if sidecar is installed on all pods in the mesh, then this should be set to UPGRADE.
	// If one or more services or namespaces do not have sidecar(s), then this should be set to DO_NOT_UPGRADE.
	// It can be enabled by destination using the destinationRule.trafficPolicy.connectionPool.http.h2UpgradePolicy override.
	H2UpgradePolicy MeshConfig_H2UpgradePolicy `protobuf:"varint,41,opt,name=h2_upgrade_policy,json=h2UpgradePolicy,proto3,enum=istio.mesh.v1alpha1.MeshConfig_H2UpgradePolicy" json:"h2_upgrade_policy,omitempty"`
	// Name to be used while emitting statistics for inbound clusters. The same pattern is used while computing stat prefix for
	// network filters like TCP and Redis.
	// By default, Istio emits statistics with the pattern `inbound|<port>|<port-name>|<service-FQDN>`.
	// For example `inbound|7443|grpc-reviews|reviews.prod.svc.cluster.local`. This can be used to override that pattern.
	//
	// A Pattern can be composed of various pre-defined variables. The following variables are supported.
	//
	// - `%SERVICE%` - Will be substituted with name of the service.
	// - `%SERVICE_FQDN%` - Will be substituted with FQDN of the service.
	// - `%SERVICE_PORT%` - Will be substituted with port of the service.
	// - `%SERVICE_PORT_NAME%` - Will be substituted with port name of the service.
	//
	// Following are some examples of supported patterns for reviews:
	//
	// - `%SERVICE_FQDN%_%SERVICE_PORT%` will use reviews.prod.svc.cluster.local_7443 as the stats name.
	// - `%SERVICE%` will use reviews.prod as the stats name.
	InboundClusterStatName string `protobuf:"bytes,44,opt,name=inbound_cluster_stat_name,json=inboundClusterStatName,proto3" json:"inbound_cluster_stat_name,omitempty"`
	// Name to be used while emitting statistics for outbound clusters. The same pattern is used while computing stat prefix for
	// network filters like TCP and Redis.
	// By default, Istio emits statistics with the pattern `outbound|<port>|<subsetname>|<service-FQDN>`.
	// For example `outbound|8080|v2|reviews.prod.svc.cluster.local`. This can be used to override that pattern.
	//
	// A Pattern can be composed of various pre-defined variables. The following variables are supported.
	//
	// - `%SERVICE%` - Will be substituted with name of the service.
	// - `%SERVICE_FQDN%` - Will be substituted with FQDN of the service.
	// - `%SERVICE_PORT%` - Will be substituted with port of the service.
	// - `%SERVICE_PORT_NAME%` - Will be substituted with port name of the service.
	// - `%SUBSET_NAME%` - Will be substituted with subset.
	//
	// Following are some examples of supported patterns for reviews:
	//
	// - `%SERVICE_FQDN%_%SERVICE_PORT%` will use reviews.prod.svc.cluster.local_7443 as the stats name.
	// - `%SERVICE%` will use reviews.prod as the stats name.
	OutboundClusterStatName string `protobuf:"bytes,45,opt,name=outbound_cluster_stat_name,json=outboundClusterStatName,proto3" json:"outbound_cluster_stat_name,omitempty"`
	// Configure the provision of certificates.
	Certificates []*Certificate `protobuf:"bytes,47,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// Set configuration for Thrift protocol
	ThriftConfig *MeshConfig_ThriftConfig `protobuf:"bytes,49,opt,name=thrift_config,json=thriftConfig,proto3" json:"thrift_config,omitempty"`
	// $hide_from_docs
	// Settings to be applied to select services.
	ServiceSettings []*MeshConfig_ServiceSettings `protobuf:"bytes,50,rep,name=service_settings,json=serviceSettings,proto3" json:"service_settings,omitempty"`
	// If enabled, Istio agent will merge metrics exposed by the application with metrics from Envoy
	// and Istio agent. The sidecar injection will replace `prometheus.io` annotations present on the pod
	// and redirect them towards Istio agent, which will then merge metrics of from the application with Istio metrics.
	// This relies on the annotations `prometheus.io/scrape`, `prometheus.io/port`, and
	// `prometheus.io/path` annotations.
	// If you are running a separately managed Envoy with an Istio sidecar, this may cause issues, as the metrics will collide.
	// In this case, it is recommended to disable aggregation on that deployment with the
	// `prometheus.istio.io/merge-metrics: "false"` annotation.
	// If not specified, this will be enabled by default.
	EnablePrometheusMerge *wrappers.BoolValue `protobuf:"bytes,51,opt,name=enable_prometheus_merge,json=enablePrometheusMerge,proto3" json:"enable_prometheus_merge,omitempty"`
	// VerifyCertificateAtClient sets the mesh global default for peer certificate validation
	// at the client-side proxy when `SIMPLE` TLS or `MUTUAL` TLS (non ISTIO_MUTUAL) origination
	// modes are used. This setting can be overridden at the host level via DestinationRule API.
	// By default, VerifyCertificateAtClient is true.
	//
	// CaCertificates: If set, proxy verifies CA signature based on given CaCertificates. If unset,
	// and VerifyCertificateAtClient is true, proxy uses default System CA bundle. If unset and
	// VerifyCertificateAtClient is false, proxy will not verify the CA.
	//
	// SubjectAltNames: If set, proxy verifies subject alt names are present in the SAN. If unset,
	// and VerifyCertificateAtClient is true, proxy uses host in destination rule to verify the SANs.
	// If unset, and VerifyCertificateAtClient is false, proxy does not verify SANs.
	//
	// For SAN, client-side proxy will exact match host in DestinationRule as well as one level
	// wildcard if the specified host in DestinationRule doesn't contain a wildcard.
	// For example, if the host in DestinationRule is x.y.com, client-side proxy will
	// match either x.y.com or *.y.com for the SAN in the presented server certificate.
	// For wildcard host name in DestinationRule, client-side proxy will do a suffix match. For example,
	// if host is *.x.y.com, client-side proxy will verify the presented server certificate SAN matches
	// .x.y.com suffix.
	VerifyCertificateAtClient *wrappers.BoolValue `protobuf:"bytes,54,opt,name=verify_certificate_at_client,json=verifyCertificateAtClient,proto3" json:"verify_certificate_at_client,omitempty"`
	// $hide_from_docs
	// If specified, Istiod will authorize and forward the CSRs from the workloads to the specified external CA
	// using the Istio CA gRPC API.
	Ca                   *MeshConfig_CA `protobuf:"bytes,55,opt,name=ca,proto3" json:"ca,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MeshConfig) Reset()         { *m = MeshConfig{} }
func (m *MeshConfig) String() string { return proto.CompactTextString(m) }
func (*MeshConfig) ProtoMessage()    {}
func (*MeshConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0}
}

func (m *MeshConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshConfig.Unmarshal(m, b)
}
func (m *MeshConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshConfig.Marshal(b, m, deterministic)
}
func (m *MeshConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig.Merge(m, src)
}
func (m *MeshConfig) XXX_Size() int {
	return xxx_messageInfo_MeshConfig.Size(m)
}
func (m *MeshConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig proto.InternalMessageInfo

func (m *MeshConfig) GetProxyListenPort() int32 {
	if m != nil {
		return m.ProxyListenPort
	}
	return 0
}

func (m *MeshConfig) GetProxyHttpPort() int32 {
	if m != nil {
		return m.ProxyHttpPort
	}
	return 0
}

func (m *MeshConfig) GetConnectTimeout() *duration.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

func (m *MeshConfig) GetProtocolDetectionTimeout() *duration.Duration {
	if m != nil {
		return m.ProtocolDetectionTimeout
	}
	return nil
}

func (m *MeshConfig) GetTcpKeepalive() *v1alpha3.ConnectionPoolSettings_TCPSettings_TcpKeepalive {
	if m != nil {
		return m.TcpKeepalive
	}
	return nil
}

func (m *MeshConfig) GetIngressClass() string {
	if m != nil {
		return m.IngressClass
	}
	return ""
}

func (m *MeshConfig) GetIngressService() string {
	if m != nil {
		return m.IngressService
	}
	return ""
}

func (m *MeshConfig) GetIngressControllerMode() MeshConfig_IngressControllerMode {
	if m != nil {
		return m.IngressControllerMode
	}
	return MeshConfig_UNSPECIFIED
}

func (m *MeshConfig) GetIngressSelector() string {
	if m != nil {
		return m.IngressSelector
	}
	return ""
}

// Deprecated: Do not use.
func (m *MeshConfig) GetAuthPolicy() MeshConfig_AuthPolicy {
	if m != nil {
		return m.AuthPolicy
	}
	return MeshConfig_NONE
}

// Deprecated: Do not use.
func (m *MeshConfig) GetRdsRefreshDelay() *duration.Duration {
	if m != nil {
		return m.RdsRefreshDelay
	}
	return nil
}

func (m *MeshConfig) GetEnableTracing() bool {
	if m != nil {
		return m.EnableTracing
	}
	return false
}

func (m *MeshConfig) GetAccessLogFile() string {
	if m != nil {
		return m.AccessLogFile
	}
	return ""
}

func (m *MeshConfig) GetAccessLogFormat() string {
	if m != nil {
		return m.AccessLogFormat
	}
	return ""
}

func (m *MeshConfig) GetAccessLogEncoding() MeshConfig_AccessLogEncoding {
	if m != nil {
		return m.AccessLogEncoding
	}
	return MeshConfig_TEXT
}

func (m *MeshConfig) GetEnableEnvoyAccessLogService() bool {
	if m != nil {
		return m.EnableEnvoyAccessLogService
	}
	return false
}

func (m *MeshConfig) GetDefaultConfig() *ProxyConfig {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func (m *MeshConfig) GetOutboundTrafficPolicy() *MeshConfig_OutboundTrafficPolicy {
	if m != nil {
		return m.OutboundTrafficPolicy
	}
	return nil
}

func (m *MeshConfig) GetConfigSources() []*ConfigSource {
	if m != nil {
		return m.ConfigSources
	}
	return nil
}

func (m *MeshConfig) GetEnableAutoMtls() *wrappers.BoolValue {
	if m != nil {
		return m.EnableAutoMtls
	}
	return nil
}

func (m *MeshConfig) GetTrustDomain() string {
	if m != nil {
		return m.TrustDomain
	}
	return ""
}

func (m *MeshConfig) GetTrustDomainAliases() []string {
	if m != nil {
		return m.TrustDomainAliases
	}
	return nil
}

func (m *MeshConfig) GetDefaultServiceExportTo() []string {
	if m != nil {
		return m.DefaultServiceExportTo
	}
	return nil
}

func (m *MeshConfig) GetDefaultVirtualServiceExportTo() []string {
	if m != nil {
		return m.DefaultVirtualServiceExportTo
	}
	return nil
}

func (m *MeshConfig) GetDefaultDestinationRuleExportTo() []string {
	if m != nil {
		return m.DefaultDestinationRuleExportTo
	}
	return nil
}

func (m *MeshConfig) GetRootNamespace() string {
	if m != nil {
		return m.RootNamespace
	}
	return ""
}

func (m *MeshConfig) GetLocalityLbSetting() *v1alpha3.LocalityLoadBalancerSetting {
	if m != nil {
		return m.LocalityLbSetting
	}
	return nil
}

func (m *MeshConfig) GetDnsRefreshRate() *duration.Duration {
	if m != nil {
		return m.DnsRefreshRate
	}
	return nil
}

func (m *MeshConfig) GetH2UpgradePolicy() MeshConfig_H2UpgradePolicy {
	if m != nil {
		return m.H2UpgradePolicy
	}
	return MeshConfig_DO_NOT_UPGRADE
}

func (m *MeshConfig) GetInboundClusterStatName() string {
	if m != nil {
		return m.InboundClusterStatName
	}
	return ""
}

func (m *MeshConfig) GetOutboundClusterStatName() string {
	if m != nil {
		return m.OutboundClusterStatName
	}
	return ""
}

func (m *MeshConfig) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *MeshConfig) GetThriftConfig() *MeshConfig_ThriftConfig {
	if m != nil {
		return m.ThriftConfig
	}
	return nil
}

func (m *MeshConfig) GetServiceSettings() []*MeshConfig_ServiceSettings {
	if m != nil {
		return m.ServiceSettings
	}
	return nil
}

func (m *MeshConfig) GetEnablePrometheusMerge() *wrappers.BoolValue {
	if m != nil {
		return m.EnablePrometheusMerge
	}
	return nil
}

func (m *MeshConfig) GetVerifyCertificateAtClient() *wrappers.BoolValue {
	if m != nil {
		return m.VerifyCertificateAtClient
	}
	return nil
}

func (m *MeshConfig) GetCa() *MeshConfig_CA {
	if m != nil {
		return m.Ca
	}
	return nil
}

type MeshConfig_OutboundTrafficPolicy struct {
	Mode                 MeshConfig_OutboundTrafficPolicy_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=istio.mesh.v1alpha1.MeshConfig_OutboundTrafficPolicy_Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *MeshConfig_OutboundTrafficPolicy) Reset()         { *m = MeshConfig_OutboundTrafficPolicy{} }
func (m *MeshConfig_OutboundTrafficPolicy) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_OutboundTrafficPolicy) ProtoMessage()    {}
func (*MeshConfig_OutboundTrafficPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 0}
}

func (m *MeshConfig_OutboundTrafficPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshConfig_OutboundTrafficPolicy.Unmarshal(m, b)
}
func (m *MeshConfig_OutboundTrafficPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshConfig_OutboundTrafficPolicy.Marshal(b, m, deterministic)
}
func (m *MeshConfig_OutboundTrafficPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_OutboundTrafficPolicy.Merge(m, src)
}
func (m *MeshConfig_OutboundTrafficPolicy) XXX_Size() int {
	return xxx_messageInfo_MeshConfig_OutboundTrafficPolicy.Size(m)
}
func (m *MeshConfig_OutboundTrafficPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_OutboundTrafficPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_OutboundTrafficPolicy proto.InternalMessageInfo

func (m *MeshConfig_OutboundTrafficPolicy) GetMode() MeshConfig_OutboundTrafficPolicy_Mode {
	if m != nil {
		return m.Mode
	}
	return MeshConfig_OutboundTrafficPolicy_REGISTRY_ONLY
}

type MeshConfig_ThriftConfig struct {
	// Specify thrift rate limit service URL. If pilot has thrift protocol support enabled,
	// this will enable the rate limit service for destinations that have matching rate
	// limit configurations.
	RateLimitUrl string `protobuf:"bytes,1,opt,name=rate_limit_url,json=rateLimitUrl,proto3" json:"rate_limit_url,omitempty"`
	// Specify thrift rate limit service timeout, in milliseconds. Default is 50ms
	RateLimitTimeout     *duration.Duration `protobuf:"bytes,2,opt,name=rate_limit_timeout,json=rateLimitTimeout,proto3" json:"rate_limit_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MeshConfig_ThriftConfig) Reset()         { *m = MeshConfig_ThriftConfig{} }
func (m *MeshConfig_ThriftConfig) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_ThriftConfig) ProtoMessage()    {}
func (*MeshConfig_ThriftConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 1}
}

func (m *MeshConfig_ThriftConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshConfig_ThriftConfig.Unmarshal(m, b)
}
func (m *MeshConfig_ThriftConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshConfig_ThriftConfig.Marshal(b, m, deterministic)
}
func (m *MeshConfig_ThriftConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ThriftConfig.Merge(m, src)
}
func (m *MeshConfig_ThriftConfig) XXX_Size() int {
	return xxx_messageInfo_MeshConfig_ThriftConfig.Size(m)
}
func (m *MeshConfig_ThriftConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ThriftConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ThriftConfig proto.InternalMessageInfo

func (m *MeshConfig_ThriftConfig) GetRateLimitUrl() string {
	if m != nil {
		return m.RateLimitUrl
	}
	return ""
}

func (m *MeshConfig_ThriftConfig) GetRateLimitTimeout() *duration.Duration {
	if m != nil {
		return m.RateLimitTimeout
	}
	return nil
}

// $hide_from_docs
// Settings to be applied to select services.
//
// For example, the following configures all services in namespace "foo" as well as the
// "bar" service in namespace "baz" to be considered cluster-local:
//
// ```yaml
// serviceSettings:
//   - settings:
//       cluster_local: true
//     hosts:
//       - "*.foo.svc.cluster.local"
//       - "bar.baz.svc.cluster.local"
// ```
type MeshConfig_ServiceSettings struct {
	// The settings to apply to the selected services.
	Settings *MeshConfig_ServiceSettings_Settings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	// The services to which the Settings should be applied. Services are selected using the hostname
	// matching rules used by DestinationRule.
	//
	// For example: foo.bar.svc.cluster.local, *.baz.svc.cluster.local
	Hosts                []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig_ServiceSettings) Reset()         { *m = MeshConfig_ServiceSettings{} }
func (m *MeshConfig_ServiceSettings) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_ServiceSettings) ProtoMessage()    {}
func (*MeshConfig_ServiceSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 2}
}

func (m *MeshConfig_ServiceSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshConfig_ServiceSettings.Unmarshal(m, b)
}
func (m *MeshConfig_ServiceSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshConfig_ServiceSettings.Marshal(b, m, deterministic)
}
func (m *MeshConfig_ServiceSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ServiceSettings.Merge(m, src)
}
func (m *MeshConfig_ServiceSettings) XXX_Size() int {
	return xxx_messageInfo_MeshConfig_ServiceSettings.Size(m)
}
func (m *MeshConfig_ServiceSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ServiceSettings.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ServiceSettings proto.InternalMessageInfo

func (m *MeshConfig_ServiceSettings) GetSettings() *MeshConfig_ServiceSettings_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *MeshConfig_ServiceSettings) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

// Settings for the selected services.
type MeshConfig_ServiceSettings_Settings struct {
	// If true, specifies that the client and service endpoints must reside in the same cluster.
	// By default, in multi-cluster deployments, the Istio control plane assumes all service
	// endpoints to be reachable from any client in any of the clusters which are part of the
	// mesh. This configuration option limits the set of service endpoints visible to a client
	// to be cluster scoped.
	//
	// There are some common scenarios when this can be useful:
	//
	//   - A service (or group of services) is inherently local to the cluster and has local storage
	//     for that cluster. For example, the kube-system namespace (e.g. the Kube API Server).
	//   - A mesh administrator wants to slowly migrate services to Istio. They might start by first
	//     having services cluster-local and then slowly transition them to mesh-wide. They could do
	//     this service-by-service (e.g. mysvc.myns.svc.cluster.local) or as a group
	//     (e.g. *.myns.svc.cluster.local).
	//
	// By default, Istio will consider all services in the kube-system namespace to be cluster-local,
	// unless explicitly overridden here.
	ClusterLocal         bool     `protobuf:"varint,1,opt,name=cluster_local,json=clusterLocal,proto3" json:"cluster_local,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig_ServiceSettings_Settings) Reset()         { *m = MeshConfig_ServiceSettings_Settings{} }
func (m *MeshConfig_ServiceSettings_Settings) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_ServiceSettings_Settings) ProtoMessage()    {}
func (*MeshConfig_ServiceSettings_Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 2, 0}
}

func (m *MeshConfig_ServiceSettings_Settings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshConfig_ServiceSettings_Settings.Unmarshal(m, b)
}
func (m *MeshConfig_ServiceSettings_Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshConfig_ServiceSettings_Settings.Marshal(b, m, deterministic)
}
func (m *MeshConfig_ServiceSettings_Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ServiceSettings_Settings.Merge(m, src)
}
func (m *MeshConfig_ServiceSettings_Settings) XXX_Size() int {
	return xxx_messageInfo_MeshConfig_ServiceSettings_Settings.Size(m)
}
func (m *MeshConfig_ServiceSettings_Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ServiceSettings_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ServiceSettings_Settings proto.InternalMessageInfo

func (m *MeshConfig_ServiceSettings_Settings) GetClusterLocal() bool {
	if m != nil {
		return m.ClusterLocal
	}
	return false
}

type MeshConfig_CA struct {
	// REQUIRED. Address of the CA server implementing the Istio CA gRPC API.
	// Can be IP address or a fully qualified DNS name with port
	// Eg: custom-ca.default.svc.cluster.local:8932, 192.168.23.2:9000
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Use the tls_settings to specify the tls mode to use.
	// Regarding tls_settings:
	// - DISABLE MODE is legitimate for the case Istiod is making the request via an Envoy sidecar.
	// DISABLE MODE can also be used for testing
	// - TLS MUTUAL MODE be on by default. If the CA certificates
	// (cert bundle to verify the CA server's certificate) is omitted, Istiod will
	// use the system root certs to verify the CA server's certificate.
	TlsSettings *v1alpha3.ClientTLSSettings `protobuf:"bytes,2,opt,name=tls_settings,json=tlsSettings,proto3" json:"tls_settings,omitempty"`
	// timeout for forward CSR requests from Istiod to External CA
	// Default: 10s
	RequestTimeout *duration.Duration `protobuf:"bytes,3,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// Use istiod_side to specify CA Server integrate to Istiod side or Agent side
	// Default: true
	IstiodSide           bool     `protobuf:"varint,4,opt,name=istiod_side,json=istiodSide,proto3" json:"istiod_side,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig_CA) Reset()         { *m = MeshConfig_CA{} }
func (m *MeshConfig_CA) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_CA) ProtoMessage()    {}
func (*MeshConfig_CA) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 3}
}

func (m *MeshConfig_CA) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshConfig_CA.Unmarshal(m, b)
}
func (m *MeshConfig_CA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshConfig_CA.Marshal(b, m, deterministic)
}
func (m *MeshConfig_CA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_CA.Merge(m, src)
}
func (m *MeshConfig_CA) XXX_Size() int {
	return xxx_messageInfo_MeshConfig_CA.Size(m)
}
func (m *MeshConfig_CA) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_CA.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_CA proto.InternalMessageInfo

func (m *MeshConfig_CA) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MeshConfig_CA) GetTlsSettings() *v1alpha3.ClientTLSSettings {
	if m != nil {
		return m.TlsSettings
	}
	return nil
}

func (m *MeshConfig_CA) GetRequestTimeout() *duration.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *MeshConfig_CA) GetIstiodSide() bool {
	if m != nil {
		return m.IstiodSide
	}
	return false
}

// ConfigSource describes information about a configuration store inside a
// mesh. A single control plane instance can interact with one or more data
// sources.
type ConfigSource struct {
	// Address of the server implementing the Istio Mesh Configuration
	// protocol (MCP). Can be IP address or a fully qualified DNS name.
	// Use fs:/// to specify a file-based backend with absolute path to the directory.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Use the tls_settings to specify the tls mode to use. If the MCP server
	// uses Istio mutual TLS and shares the root CA with Pilot, specify the TLS
	// mode as ISTIO_MUTUAL.
	TlsSettings *v1alpha3.ClientTLSSettings `protobuf:"bytes,2,opt,name=tls_settings,json=tlsSettings,proto3" json:"tls_settings,omitempty"`
	// Describes the source of configuration, if nothing is specified default is MCP
	SubscribedResources  []Resource `protobuf:"varint,3,rep,packed,name=subscribed_resources,json=subscribedResources,proto3,enum=istio.mesh.v1alpha1.Resource" json:"subscribed_resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConfigSource) Reset()         { *m = ConfigSource{} }
func (m *ConfigSource) String() string { return proto.CompactTextString(m) }
func (*ConfigSource) ProtoMessage()    {}
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{1}
}

func (m *ConfigSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSource.Unmarshal(m, b)
}
func (m *ConfigSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSource.Marshal(b, m, deterministic)
}
func (m *ConfigSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSource.Merge(m, src)
}
func (m *ConfigSource) XXX_Size() int {
	return xxx_messageInfo_ConfigSource.Size(m)
}
func (m *ConfigSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSource.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSource proto.InternalMessageInfo

func (m *ConfigSource) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ConfigSource) GetTlsSettings() *v1alpha3.ClientTLSSettings {
	if m != nil {
		return m.TlsSettings
	}
	return nil
}

func (m *ConfigSource) GetSubscribedResources() []Resource {
	if m != nil {
		return m.SubscribedResources
	}
	return nil
}

// Certificate configures the provision of a certificate and its key.
// Example 1: key and cert stored in a secret
// { secretName: galley-cert
//   secretNamespace: istio-system
//   dnsNames:
//     - galley.istio-system.svc
//     - galley.mydomain.com
// }
// Example 2: key and cert stored in a directory
// { dnsNames:
//     - pilot.istio-system
//     - pilot.istio-system.svc
//     - pilot.mydomain.com
// }
type Certificate struct {
	// Name of the secret the certificate and its key will be stored into.
	// If it is empty, it will not be stored into a secret.
	// Instead, the certificate and its key will be stored into a hard-coded directory.
	SecretName string `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	// The DNS names for the certificate. A certificate may contain
	// multiple DNS names.
	DnsNames             []string `protobuf:"bytes,2,rep,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{2}
}

func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate.Unmarshal(m, b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return xxx_messageInfo_Certificate.Size(m)
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *Certificate) GetDnsNames() []string {
	if m != nil {
		return m.DnsNames
	}
	return nil
}

func init() {
	proto.RegisterEnum("istio.mesh.v1alpha1.Resource", Resource_name, Resource_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_IngressControllerMode", MeshConfig_IngressControllerMode_name, MeshConfig_IngressControllerMode_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_AuthPolicy", MeshConfig_AuthPolicy_name, MeshConfig_AuthPolicy_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_AccessLogEncoding", MeshConfig_AccessLogEncoding_name, MeshConfig_AccessLogEncoding_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_H2UpgradePolicy", MeshConfig_H2UpgradePolicy_name, MeshConfig_H2UpgradePolicy_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_OutboundTrafficPolicy_Mode", MeshConfig_OutboundTrafficPolicy_Mode_name, MeshConfig_OutboundTrafficPolicy_Mode_value)
	proto.RegisterType((*MeshConfig)(nil), "istio.mesh.v1alpha1.MeshConfig")
	proto.RegisterType((*MeshConfig_OutboundTrafficPolicy)(nil), "istio.mesh.v1alpha1.MeshConfig.OutboundTrafficPolicy")
	proto.RegisterType((*MeshConfig_ThriftConfig)(nil), "istio.mesh.v1alpha1.MeshConfig.ThriftConfig")
	proto.RegisterType((*MeshConfig_ServiceSettings)(nil), "istio.mesh.v1alpha1.MeshConfig.ServiceSettings")
	proto.RegisterType((*MeshConfig_ServiceSettings_Settings)(nil), "istio.mesh.v1alpha1.MeshConfig.ServiceSettings.Settings")
	proto.RegisterType((*MeshConfig_CA)(nil), "istio.mesh.v1alpha1.MeshConfig.CA")
	proto.RegisterType((*ConfigSource)(nil), "istio.mesh.v1alpha1.ConfigSource")
	proto.RegisterType((*Certificate)(nil), "istio.mesh.v1alpha1.Certificate")
}

func init() { proto.RegisterFile("mesh/v1alpha1/config.proto", fileDescriptor_b5c7ece76d5d5022) }

var fileDescriptor_b5c7ece76d5d5022 = []byte{
	// 1950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4d, 0x7b, 0xdb, 0xb8,
	0x11, 0x8e, 0x64, 0x6e, 0x42, 0x43, 0x5f, 0x34, 0xfc, 0x11, 0x46, 0xf9, 0x52, 0x94, 0x4d, 0xe2,
	0x75, 0xb7, 0xd2, 0xc6, 0xe9, 0xa6, 0xdb, 0xf6, 0x24, 0x4b, 0x4a, 0x62, 0xae, 0x62, 0xb9, 0x90,
	0x9c, 0x6d, 0x76, 0x0f, 0x78, 0x60, 0x12, 0x92, 0xd0, 0x50, 0x84, 0x0a, 0x80, 0x4e, 0x7c, 0xe8,
	0x4f, 0x6a, 0xff, 0x48, 0xaf, 0xfd, 0x2d, 0x3d, 0xf7, 0x21, 0x40, 0x4a, 0xb2, 0xad, 0xa7, 0x7a,
	0xda, 0x43, 0x6f, 0xc6, 0x8b, 0xf7, 0x1d, 0x0c, 0x06, 0x33, 0xc3, 0x91, 0x41, 0x75, 0x4a, 0xe5,
	0xa4, 0x79, 0xf1, 0x92, 0x84, 0xb3, 0x09, 0x79, 0xd9, 0xf4, 0x79, 0x34, 0x62, 0xe3, 0xc6, 0x4c,
	0x70, 0xc5, 0xe1, 0x36, 0x93, 0x8a, 0xf1, 0x46, 0xc2, 0x68, 0x64, 0x8c, 0xea, 0xa3, 0x31, 0xe7,
	0xe3, 0x90, 0x36, 0x35, 0xe5, 0x3c, 0x1e, 0x35, 0x83, 0x58, 0x10, 0xc5, 0x78, 0x64, 0x44, 0x37,
	0xf7, 0x3f, 0x0b, 0x32, 0x9b, 0x51, 0x21, 0xd3, 0xfd, 0x7b, 0x57, 0x0f, 0x9c, 0x09, 0xfe, 0xe5,
	0x32, 0xdd, 0x3a, 0x88, 0xa8, 0xfa, 0xcc, 0xc5, 0x27, 0x16, 0x8d, 0x33, 0xc2, 0xab, 0x66, 0x40,
	0xa5, 0x62, 0x91, 0x3e, 0x01, 0x8b, 0x38, 0xa4, 0x86, 0x5b, 0xff, 0xd7, 0x23, 0x00, 0xde, 0x53,
	0x39, 0x69, 0x6b, 0x87, 0xe1, 0x01, 0xd8, 0xd2, 0x96, 0x70, 0xc8, 0xa4, 0xa2, 0x11, 0x9e, 0x71,
	0xa1, 0x5c, 0xab, 0x96, 0xdb, 0xff, 0x0a, 0x55, 0xf4, 0x46, 0x4f, 0xe3, 0xa7, 0x5c, 0x28, 0xf8,
	0x1c, 0x18, 0x08, 0x4f, 0x94, 0x9a, 0x19, 0xe6, 0x57, 0x9a, 0x59, 0xd2, 0xf0, 0x3b, 0xa5, 0x66,
	0x9a, 0x77, 0x04, 0x2a, 0x3e, 0x8f, 0x22, 0xea, 0x2b, 0xac, 0xd8, 0x94, 0xf2, 0x58, 0xb9, 0xb7,
	0x6b, 0xb9, 0xfd, 0xc2, 0xe1, 0xbd, 0x86, 0xb9, 0x63, 0x23, 0xbb, 0x63, 0xa3, 0x93, 0xc6, 0x00,
	0x95, 0x53, 0xc5, 0xd0, 0x08, 0xe0, 0x4f, 0xa0, 0xaa, 0x49, 0x3e, 0x0f, 0x71, 0x40, 0x15, 0xf5,
	0xf5, 0x3d, 0x32, 0x73, 0x07, 0xeb, 0xcc, 0xb9, 0x99, 0xb8, 0x93, 0x69, 0x33, 0xc3, 0x1c, 0x94,
	0x94, 0x3f, 0xc3, 0x9f, 0x28, 0x9d, 0x91, 0x90, 0x5d, 0x50, 0xf7, 0x81, 0xb6, 0xe5, 0x35, 0xcc,
	0x9b, 0x2d, 0x22, 0x99, 0xbd, 0xdc, 0xab, 0x46, 0xdb, 0xb8, 0xc6, 0x78, 0x74, 0xca, 0x79, 0x38,
	0xa0, 0x4a, 0xb1, 0x68, 0x2c, 0x1b, 0xc3, 0xf6, 0xe9, 0xe2, 0x6f, 0x7f, 0xf6, 0x63, 0x66, 0x11,
	0x15, 0xd5, 0xd2, 0x0a, 0x3e, 0x05, 0x25, 0x16, 0x8d, 0x05, 0x95, 0x12, 0xfb, 0x21, 0x91, 0xd2,
	0xbd, 0x53, 0xcb, 0xed, 0x6f, 0xa2, 0x62, 0x0a, 0xb6, 0x13, 0x0c, 0xbe, 0x00, 0x95, 0x8c, 0x24,
	0xa9, 0xb8, 0x60, 0x3e, 0x75, 0x6d, 0x4d, 0x2b, 0xa7, 0xf0, 0xc0, 0xa0, 0x70, 0x0a, 0xee, 0xce,
	0xad, 0xf1, 0x48, 0x09, 0x1e, 0x86, 0x54, 0xe0, 0x29, 0x0f, 0xa8, 0xbb, 0x59, 0xcb, 0xed, 0x97,
	0x0f, 0xbf, 0x6f, 0xac, 0x48, 0xbe, 0xc6, 0xe2, 0xc5, 0x1b, 0xc7, 0xe9, 0xb9, 0x73, 0xf5, 0x7b,
	0x1e, 0x50, 0xb4, 0xcb, 0x56, 0xc1, 0xf0, 0x1b, 0xe0, 0x2c, 0xfc, 0x0a, 0xa9, 0xaf, 0xb8, 0x70,
	0x7f, 0xa3, 0x1d, 0xab, 0xcc, 0x1d, 0x33, 0x30, 0xec, 0x83, 0x02, 0x89, 0xd5, 0x04, 0xcf, 0x78,
	0xc8, 0xfc, 0x4b, 0x17, 0x68, 0x6f, 0x0e, 0xd6, 0x79, 0xd3, 0x8a, 0xd5, 0xe4, 0x54, 0x2b, 0x8e,
	0xf2, 0x6e, 0x0e, 0x01, 0x32, 0x5f, 0xc3, 0x63, 0xb0, 0x25, 0x02, 0x89, 0x05, 0x1d, 0x09, 0x2a,
	0x27, 0x38, 0xa0, 0x21, 0xb9, 0x74, 0x0b, 0x6b, 0x5e, 0x5e, 0x5b, 0xa9, 0x88, 0x40, 0x22, 0x23,
	0xeb, 0x24, 0x2a, 0xf8, 0x0c, 0x94, 0x69, 0x44, 0xce, 0x43, 0x8a, 0x95, 0x20, 0x3e, 0x8b, 0xc6,
	0x6e, 0xb1, 0x96, 0xdb, 0xb7, 0x51, 0xc9, 0xa0, 0x43, 0x03, 0x26, 0x09, 0x4e, 0x7c, 0x3f, 0xb9,
	0x6c, 0xc8, 0xc7, 0x78, 0xc4, 0x42, 0xea, 0x96, 0xf4, 0x65, 0x4b, 0x06, 0xee, 0xf1, 0xf1, 0x1b,
	0x16, 0xd2, 0xa4, 0x68, 0x96, 0x79, 0x5c, 0x4c, 0x89, 0x72, 0x5d, 0x13, 0x96, 0x05, 0x53, 0xc3,
	0x90, 0x80, 0xed, 0x25, 0x2e, 0x8d, 0x7c, 0x1e, 0x24, 0xe7, 0xdf, 0xd7, 0xe1, 0x79, 0xb9, 0x36,
	0x3c, 0x99, 0xb5, 0x6e, 0x2a, 0x44, 0x5b, 0xe4, 0x3a, 0x04, 0x3b, 0xe0, 0x71, 0x7a, 0x3b, 0x1a,
	0x5d, 0xf0, 0x4b, 0xbc, 0x74, 0x5e, 0x96, 0x4c, 0xfb, 0xfa, 0xba, 0xf7, 0x0d, 0xad, 0x9b, 0xb0,
	0xe6, 0x96, 0xb3, 0xcc, 0x7a, 0x0b, 0xca, 0x01, 0x1d, 0x91, 0x38, 0x54, 0xd8, 0x34, 0x33, 0xb7,
	0xac, 0x63, 0x5d, 0x5b, 0xe9, 0xe3, 0x69, 0x52, 0xf1, 0xc6, 0x49, 0x54, 0x4a, 0x75, 0x69, 0x4b,
	0x99, 0x82, 0xbb, 0x3c, 0x56, 0xe7, 0x3c, 0x8e, 0x82, 0x24, 0xdc, 0xa3, 0x11, 0xf3, 0xb3, 0xa4,
	0xd8, 0xd2, 0x16, 0xd7, 0xa6, 0x68, 0x3f, 0x95, 0x0f, 0x8d, 0xda, 0xe4, 0x03, 0xda, 0xe5, 0xab,
	0x60, 0xf8, 0x0e, 0x94, 0x8d, 0xbf, 0x58, 0xf2, 0x58, 0xf8, 0x54, 0xba, 0x7b, 0xb5, 0x8d, 0xfd,
	0xc2, 0xe1, 0x93, 0x95, 0xa7, 0x98, 0x13, 0x06, 0x9a, 0x89, 0x4a, 0xfe, 0xd2, 0x4a, 0xc2, 0x0e,
	0x70, 0xd2, 0x38, 0x92, 0x58, 0x71, 0x3c, 0x55, 0xa1, 0x74, 0x7f, 0xa5, 0x3d, 0xae, 0xde, 0xc8,
	0xb7, 0x23, 0xce, 0xc3, 0x0f, 0x24, 0x8c, 0x29, 0x4a, 0x33, 0xab, 0x15, 0x2b, 0xfe, 0x5e, 0x85,
	0x12, 0x3e, 0x01, 0x45, 0x25, 0x62, 0xa9, 0x70, 0xc0, 0xa7, 0x84, 0x45, 0x6e, 0x55, 0xe7, 0x45,
	0x41, 0x63, 0x1d, 0x0d, 0xc1, 0xef, 0xc0, 0xce, 0x32, 0x05, 0x93, 0x90, 0x11, 0x49, 0xa5, 0xdb,
	0xa8, 0x6d, 0xec, 0x6f, 0x22, 0xb8, 0x44, 0x6d, 0x99, 0x1d, 0xf8, 0x3b, 0x70, 0x2f, 0x7b, 0x9c,
	0xf4, 0x49, 0x31, 0xfd, 0x92, 0x74, 0x60, 0xac, 0xb8, 0xfb, 0x58, 0xcb, 0xf6, 0x52, 0x42, 0xfa,
	0x9e, 0x5d, 0xbd, 0x3d, 0xe4, 0xf0, 0x1d, 0x78, 0x92, 0x49, 0x2f, 0x98, 0x50, 0x31, 0x09, 0x57,
	0x98, 0xa8, 0x69, 0x13, 0x0f, 0x53, 0xe2, 0x07, 0xc3, 0xbb, 0x6e, 0xc9, 0x03, 0xf5, 0xcc, 0xd2,
	0xf5, 0x8f, 0xcb, 0x92, 0xa9, 0x27, 0xda, 0xd4, 0xa3, 0x94, 0xd9, 0x59, 0x10, 0x51, 0x1c, 0x2e,
	0x6c, 0x3d, 0x03, 0x65, 0xc1, 0xb9, 0xc2, 0x11, 0x99, 0x52, 0x39, 0x23, 0x3e, 0x75, 0xeb, 0xa6,
	0xd2, 0x12, 0xf4, 0x24, 0x03, 0xe1, 0x08, 0x6c, 0x87, 0xdc, 0x27, 0x21, 0x53, 0x97, 0x38, 0x3c,
	0xc7, 0xd2, 0xf4, 0x5b, 0xf7, 0xa9, 0x7e, 0x95, 0xd7, 0xff, 0xa1, 0x67, 0xf7, 0x52, 0x55, 0x8f,
	0x93, 0xe0, 0x88, 0x84, 0x24, 0xf2, 0xa9, 0x48, 0xbb, 0x35, 0xda, 0xca, 0x4c, 0xf6, 0xce, 0x53,
	0x08, 0xb6, 0x81, 0x13, 0x44, 0x8b, 0x5e, 0x23, 0x88, 0xa2, 0xee, 0xd7, 0x6b, 0xbf, 0x59, 0x41,
	0x94, 0xb5, 0x19, 0x44, 0x14, 0x85, 0xbf, 0x80, 0xad, 0xc9, 0x21, 0x8e, 0x67, 0x63, 0x41, 0x02,
	0x9a, 0xa5, 0xfc, 0x37, 0xba, 0xd0, 0x9b, 0xeb, 0x52, 0xfe, 0xdd, 0xe1, 0x99, 0xd1, 0xa5, 0xc9,
	0x5e, 0x99, 0x5c, 0x05, 0x92, 0x0c, 0x60, 0x91, 0x29, 0x2a, 0x3f, 0x8c, 0xa5, 0xa2, 0x02, 0x4b,
	0x45, 0x4c, 0x00, 0xdd, 0x6f, 0x75, 0xec, 0xf6, 0x52, 0x42, 0xdb, 0xec, 0x0f, 0x14, 0xd1, 0x91,
	0x84, 0x7f, 0x00, 0xd5, 0x79, 0x41, 0xde, 0xd4, 0xfe, 0x5a, 0x6b, 0xe7, 0x25, 0x7b, 0x5d, 0xdc,
	0x01, 0x45, 0x9f, 0x0a, 0xc5, 0x46, 0xcc, 0x27, 0x8a, 0x4a, 0xb7, 0xa9, 0x8b, 0x6b, 0x75, 0x53,
	0x68, 0x2f, 0x88, 0xe8, 0x8a, 0x0a, 0xfe, 0x11, 0x94, 0xd4, 0x44, 0xb0, 0xd1, 0xbc, 0xb7, 0xbc,
	0xd4, 0xc1, 0xfd, 0x76, 0x5d, 0x58, 0x86, 0x5a, 0x94, 0xf6, 0x99, 0xa2, 0x5a, 0x5a, 0xc1, 0x9f,
	0x81, 0x93, 0xe5, 0x71, 0x9a, 0x16, 0xd2, 0x3d, 0xd4, 0xce, 0xad, 0x0d, 0x76, 0x9a, 0xd8, 0xd9,
	0xd7, 0x1b, 0x55, 0xe4, 0x55, 0x00, 0x22, 0x70, 0x37, 0xed, 0x04, 0x33, 0xc1, 0xa7, 0x54, 0x4d,
	0x68, 0x2c, 0xf1, 0x94, 0x8a, 0x31, 0x75, 0x5f, 0xad, 0x6d, 0x08, 0xbb, 0x46, 0x7a, 0x3a, 0x57,
	0xbe, 0x4f, 0x84, 0xf0, 0x17, 0xf0, 0xe0, 0x82, 0x0a, 0x36, 0xba, 0xc4, 0x4b, 0x91, 0xc1, 0x44,
	0x61, 0x3f, 0x64, 0x34, 0x52, 0xee, 0xeb, 0xb5, 0x86, 0xef, 0x19, 0xfd, 0x52, 0x94, 0x5b, 0xaa,
	0xad, 0xc5, 0xf0, 0x10, 0xe4, 0x7d, 0xe2, 0xfe, 0x56, 0x9b, 0xa8, 0xaf, 0xbb, 0x7e, 0xbb, 0x85,
	0xf2, 0x3e, 0xa9, 0xfe, 0x2d, 0x07, 0x76, 0x57, 0x76, 0x5a, 0x78, 0x02, 0x2c, 0x3d, 0x51, 0xe4,
	0x74, 0xee, 0xfe, 0xfe, 0x7f, 0x6a, 0xd7, 0x0d, 0x3d, 0x56, 0x68, 0x3b, 0xf5, 0x0e, 0xb0, 0xf4,
	0x34, 0xb1, 0x05, 0x4a, 0xa8, 0xfb, 0xf6, 0x78, 0x30, 0x44, 0x1f, 0x71, 0xff, 0xa4, 0xf7, 0xd1,
	0xb9, 0x05, 0x4b, 0x60, 0xb3, 0xd5, 0xeb, 0xf5, 0x7f, 0xc2, 0xad, 0x93, 0x8f, 0x4e, 0xae, 0x6e,
	0xd9, 0x79, 0x27, 0x7f, 0xb0, 0xf3, 0xe1, 0x18, 0x0d, 0xcf, 0x5a, 0x3d, 0x3c, 0xe8, 0xa2, 0x0f,
	0xc7, 0xed, 0xae, 0x26, 0x57, 0xff, 0x0a, 0x8a, 0xcb, 0xe9, 0x00, 0xbf, 0x06, 0xe5, 0xa4, 0x4e,
	0x71, 0xc8, 0xa6, 0x4c, 0xe1, 0x58, 0x84, 0xda, 0xdf, 0x4d, 0x54, 0x4c, 0xd0, 0x5e, 0x02, 0x9e,
	0x89, 0x10, 0xbe, 0x05, 0x70, 0x89, 0x95, 0x0d, 0x90, 0xf9, 0x75, 0xb5, 0xed, 0xcc, 0x8d, 0xa4,
	0x83, 0x63, 0xf5, 0xef, 0x39, 0x50, 0xb9, 0x96, 0x38, 0x70, 0x08, 0xec, 0x79, 0xee, 0xe5, 0xb4,
	0xc9, 0x1f, 0xfe, 0xcb, 0xdc, 0x6b, 0xcc, 0x93, 0x70, 0x6e, 0x09, 0xee, 0x80, 0xaf, 0x26, 0x5c,
	0x2a, 0xe9, 0xe6, 0x75, 0x2b, 0x35, 0x8b, 0x6a, 0x13, 0xd8, 0xf3, 0x73, 0x9f, 0x82, 0x52, 0x56,
	0xc8, 0xba, 0x97, 0xe9, 0xc3, 0x6d, 0x54, 0x4c, 0x41, 0xdd, 0xfc, 0xaa, 0xff, 0xcc, 0x81, 0x7c,
	0xbb, 0x05, 0x5d, 0x70, 0x87, 0x04, 0x41, 0x32, 0xaa, 0xa5, 0xf1, 0xc9, 0x96, 0xb0, 0x0f, 0x8a,
	0x2a, 0x94, 0x8b, 0xea, 0xc9, 0x5f, 0xa9, 0xc9, 0x95, 0x93, 0xb0, 0xce, 0xb6, 0x61, 0x6f, 0x30,
	0xf7, 0xba, 0xa0, 0x42, 0x39, 0x77, 0xeb, 0x08, 0x54, 0x04, 0xfd, 0x4b, 0x4c, 0xe5, 0x22, 0xd0,
	0x1b, 0x6b, 0x9b, 0x68, 0xaa, 0xc8, 0xe6, 0xf3, 0xc7, 0xa0, 0xa0, 0xcf, 0x0f, 0xb0, 0x64, 0x01,
	0xd5, 0x3f, 0x45, 0x6c, 0x04, 0x0c, 0x34, 0x60, 0x01, 0xad, 0x7b, 0x60, 0x77, 0xe5, 0x08, 0x0b,
	0x2b, 0xa0, 0x70, 0x76, 0x32, 0x38, 0xed, 0xb6, 0x8f, 0xdf, 0x1c, 0x77, 0x3b, 0xce, 0x2d, 0x78,
	0x07, 0x6c, 0xf4, 0xdf, 0xbc, 0x71, 0x72, 0xb0, 0x00, 0xee, 0x74, 0xba, 0x6f, 0x5a, 0x67, 0xbd,
	0xa1, 0x93, 0x87, 0x00, 0xdc, 0x1e, 0x0c, 0xd1, 0x71, 0x7b, 0xe8, 0x6c, 0xd4, 0x9f, 0x03, 0xb0,
	0x18, 0x40, 0xa1, 0x0d, 0xac, 0x93, 0xfe, 0x49, 0xd7, 0xb9, 0x05, 0xcb, 0x00, 0xbc, 0x3f, 0xd3,
	0x19, 0x38, 0xec, 0x0d, 0x9c, 0x5c, 0xfd, 0x05, 0xd8, 0xba, 0x31, 0x89, 0x25, 0xf4, 0x61, 0xf7,
	0x4f, 0x43, 0xe7, 0x56, 0xf2, 0x97, 0x37, 0xe8, 0x9f, 0x38, 0xb9, 0xfa, 0x21, 0xa8, 0x5c, 0xeb,
	0xe4, 0x10, 0x82, 0x72, 0xa7, 0x8f, 0x4f, 0xfa, 0x43, 0x7c, 0x76, 0xfa, 0x16, 0xb5, 0x3a, 0x89,
	0xfd, 0x02, 0xb8, 0x93, 0x2d, 0x72, 0x9e, 0x65, 0xe7, 0x9c, 0xbc, 0x97, 0x64, 0xfe, 0x86, 0x67,
	0xd9, 0x1b, 0x8e, 0xe5, 0x59, 0xf6, 0x77, 0xce, 0x4b, 0xcf, 0xb2, 0xef, 0x39, 0x55, 0xcf, 0xb2,
	0x1f, 0x39, 0x8f, 0x3d, 0xcb, 0xae, 0x38, 0x8e, 0x67, 0xd9, 0x8e, 0xb3, 0xe5, 0x59, 0x36, 0x74,
	0xb6, 0x3d, 0xcb, 0xde, 0x76, 0x76, 0x3c, 0xcb, 0xde, 0x71, 0x76, 0x3d, 0xcb, 0xde, 0x75, 0xf6,
	0x3c, 0xcb, 0xbe, 0xeb, 0xb8, 0x9e, 0x65, 0x3f, 0x74, 0x1e, 0x79, 0x96, 0xfd, 0xcc, 0x79, 0xee,
	0x59, 0xf6, 0x73, 0xe7, 0x85, 0x67, 0xd9, 0x2f, 0x9c, 0x7d, 0xcf, 0xb2, 0xbf, 0x77, 0x5e, 0x23,
	0x38, 0x65, 0x5f, 0xa8, 0xc0, 0xfe, 0x84, 0xfa, 0x9f, 0xf4, 0x18, 0x40, 0x05, 0xda, 0x36, 0x98,
	0xa0, 0xfa, 0x0b, 0x9e, 0x82, 0xbb, 0x01, 0x93, 0xa6, 0x01, 0xea, 0x5b, 0x18, 0x85, 0x44, 0xd5,
	0x0c, 0x36, 0x1a, 0xfd, 0x43, 0xd0, 0x08, 0x25, 0xda, 0x5b, 0xa6, 0xe2, 0x11, 0x61, 0x21, 0xe6,
	0x33, 0x1a, 0xa1, 0x67, 0xc9, 0x43, 0xfa, 0x44, 0x60, 0xc5, 0xb1, 0xa2, 0x21, 0x9d, 0x52, 0x25,
	0x2e, 0xb1, 0xa4, 0x52, 0x26, 0xd3, 0x43, 0xd2, 0x32, 0x22, 0xa6, 0x2e, 0x51, 0xc9, 0x98, 0x4c,
	0x93, 0x13, 0x65, 0x23, 0xad, 0xe9, 0x8e, 0x3a, 0x19, 0xae, 0xf8, 0x82, 0x8a, 0x32, 0x90, 0x38,
	0x0e, 0x24, 0x9e, 0x11, 0x35, 0x41, 0x5b, 0xf2, 0xfa, 0x4f, 0x05, 0xb4, 0x97, 0x5a, 0x48, 0x76,
	0x14, 0xff, 0x44, 0x23, 0x3c, 0xe5, 0x71, 0xa4, 0x10, 0xd4, 0x42, 0x49, 0xf1, 0xa7, 0x1f, 0x24,
	0x96, 0x04, 0xff, 0xf9, 0xb3, 0x42, 0x3b, 0xd9, 0xbd, 0xd2, 0x28, 0x9c, 0x13, 0xe5, 0x4f, 0x90,
	0xbb, 0xbc, 0xc2, 0x53, 0xf2, 0x05, 0xd3, 0x48, 0x09, 0x46, 0x25, 0xda, 0xbd, 0xb1, 0x93, 0x24,
	0x3c, 0xaa, 0x2a, 0x2a, 0xa6, 0xd9, 0x5c, 0x14, 0x88, 0x64, 0xb6, 0xcb, 0x7e, 0xe5, 0xd7, 0xff,
	0x91, 0x03, 0xc5, 0xe5, 0xe9, 0xf3, 0xff, 0x59, 0x98, 0xa7, 0x60, 0x47, 0xc6, 0xe7, 0xd2, 0x17,
	0xec, 0x9c, 0x06, 0x58, 0xd0, 0x6c, 0x52, 0xde, 0xa8, 0x6d, 0xec, 0x97, 0x0f, 0x1f, 0xae, 0xec,
	0x59, 0x28, 0x65, 0xa1, 0xed, 0x85, 0x34, 0xc3, 0x64, 0xfd, 0x47, 0x50, 0x58, 0xfa, 0x0e, 0x25,
	0x55, 0x2b, 0xa9, 0x2f, 0x68, 0x3a, 0x53, 0x98, 0xfb, 0x00, 0x03, 0xe9, 0x31, 0xe2, 0x3e, 0xd8,
	0x4c, 0x06, 0x2c, 0x3d, 0xee, 0xa5, 0x7d, 0xcd, 0x0e, 0x22, 0xa9, 0x27, 0xbd, 0x83, 0x1a, 0xb0,
	0x33, 0xcb, 0x70, 0x07, 0x38, 0x59, 0xd7, 0xcf, 0xbe, 0x15, 0xce, 0xad, 0xa3, 0x07, 0x3f, 0x57,
	0x8d, 0x8f, 0x8c, 0x37, 0xc9, 0x8c, 0x35, 0xaf, 0xfc, 0x2f, 0xe4, 0xfc, 0xb6, 0x6e, 0x2b, 0xaf,
	0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x3e, 0xcb, 0xf6, 0x94, 0x11, 0x00, 0x00,
}
