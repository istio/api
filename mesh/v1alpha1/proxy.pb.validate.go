// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mesh/v1alpha1/proxy.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Tracing with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Tracing) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Tracer.(type) {

	case *Tracing_Zipkin_:

		if v, ok := interface{}(m.GetZipkin()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return TracingValidationError{
					field:  "Zipkin",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Tracing_Lightstep_:

		if v, ok := interface{}(m.GetLightstep()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return TracingValidationError{
					field:  "Lightstep",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TracingValidationError is the validation error returned by Tracing.Validate
// if the designated constraints aren't met.
type TracingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TracingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TracingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TracingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TracingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TracingValidationError) ErrorName() string { return "TracingValidationError" }

// Error satisfies the builtin error interface
func (e TracingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTracing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TracingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TracingValidationError{}

// Validate checks the field values on ProxyConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProxyConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ConfigPath

	// no validation rules for BinaryPath

	// no validation rules for ServiceCluster

	if v, ok := interface{}(m.GetDrainDuration()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProxyConfigValidationError{
				field:  "DrainDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetParentShutdownDuration()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProxyConfigValidationError{
				field:  "ParentShutdownDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiscoveryAddress

	// no validation rules for ZipkinAddress

	if v, ok := interface{}(m.GetConnectTimeout()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProxyConfigValidationError{
				field:  "ConnectTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatsdUdpAddress

	// no validation rules for ProxyAdminPort

	// no validation rules for ControlPlaneAuthPolicy

	// no validation rules for CustomConfigFile

	// no validation rules for StatNameLength

	// no validation rules for Concurrency

	// no validation rules for ProxyBootstrapTemplatePath

	// no validation rules for InterceptionMode

	if v, ok := interface{}(m.GetTracing()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProxyConfigValidationError{
				field:  "Tracing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProxyConfigValidationError is the validation error returned by
// ProxyConfig.Validate if the designated constraints aren't met.
type ProxyConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyConfigValidationError) ErrorName() string { return "ProxyConfigValidationError" }

// Error satisfies the builtin error interface
func (e ProxyConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxyConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyConfigValidationError{}

// Validate checks the field values on Tracing_Zipkin with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Tracing_Zipkin) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	return nil
}

// Tracing_ZipkinValidationError is the validation error returned by
// Tracing_Zipkin.Validate if the designated constraints aren't met.
type Tracing_ZipkinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tracing_ZipkinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tracing_ZipkinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tracing_ZipkinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tracing_ZipkinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tracing_ZipkinValidationError) ErrorName() string { return "Tracing_ZipkinValidationError" }

// Error satisfies the builtin error interface
func (e Tracing_ZipkinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTracing_Zipkin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tracing_ZipkinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tracing_ZipkinValidationError{}

// Validate checks the field values on Tracing_Lightstep with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Tracing_Lightstep) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for AccessToken

	// no validation rules for Secure

	// no validation rules for CacertPath

	return nil
}

// Tracing_LightstepValidationError is the validation error returned by
// Tracing_Lightstep.Validate if the designated constraints aren't met.
type Tracing_LightstepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tracing_LightstepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tracing_LightstepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tracing_LightstepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tracing_LightstepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tracing_LightstepValidationError) ErrorName() string {
	return "Tracing_LightstepValidationError"
}

// Error satisfies the builtin error interface
func (e Tracing_LightstepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTracing_Lightstep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tracing_LightstepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tracing_LightstepValidationError{}
