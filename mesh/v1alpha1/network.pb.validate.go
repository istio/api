// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mesh/v1alpha1/network.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Network with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Network) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEndpoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return NetworkValidationError{
					field:  fmt.Sprintf("Endpoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetGateways() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return NetworkValidationError{
					field:  fmt.Sprintf("Gateways[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NetworkValidationError is the validation error returned by Network.Validate
// if the designated constraints aren't met.
type NetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkValidationError) ErrorName() string { return "NetworkValidationError" }

// Error satisfies the builtin error interface
func (e NetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkValidationError{}

// Validate checks the field values on MeshNetworks with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MeshNetworks) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Networks

	return nil
}

// MeshNetworksValidationError is the validation error returned by
// MeshNetworks.Validate if the designated constraints aren't met.
type MeshNetworksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshNetworksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshNetworksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshNetworksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshNetworksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshNetworksValidationError) ErrorName() string { return "MeshNetworksValidationError" }

// Error satisfies the builtin error interface
func (e MeshNetworksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshNetworks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshNetworksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshNetworksValidationError{}

// Validate checks the field values on Network_NetworkEndpoints with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Network_NetworkEndpoints) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Ne.(type) {

	case *Network_NetworkEndpoints_FromCidr:
		// no validation rules for FromCidr

	case *Network_NetworkEndpoints_FromRegistry:
		// no validation rules for FromRegistry

	}

	return nil
}

// Network_NetworkEndpointsValidationError is the validation error returned by
// Network_NetworkEndpoints.Validate if the designated constraints aren't met.
type Network_NetworkEndpointsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Network_NetworkEndpointsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Network_NetworkEndpointsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Network_NetworkEndpointsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Network_NetworkEndpointsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Network_NetworkEndpointsValidationError) ErrorName() string {
	return "Network_NetworkEndpointsValidationError"
}

// Error satisfies the builtin error interface
func (e Network_NetworkEndpointsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetwork_NetworkEndpoints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Network_NetworkEndpointsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Network_NetworkEndpointsValidationError{}

// Validate checks the field values on Network_IstioNetworkGateway with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Network_IstioNetworkGateway) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Port

	// no validation rules for Locality

	switch m.Gw.(type) {

	case *Network_IstioNetworkGateway_RegistryServiceName:
		// no validation rules for RegistryServiceName

	case *Network_IstioNetworkGateway_Address:
		// no validation rules for Address

	}

	return nil
}

// Network_IstioNetworkGatewayValidationError is the validation error returned
// by Network_IstioNetworkGateway.Validate if the designated constraints
// aren't met.
type Network_IstioNetworkGatewayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Network_IstioNetworkGatewayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Network_IstioNetworkGatewayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Network_IstioNetworkGatewayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Network_IstioNetworkGatewayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Network_IstioNetworkGatewayValidationError) ErrorName() string {
	return "Network_IstioNetworkGatewayValidationError"
}

// Error satisfies the builtin error interface
func (e Network_IstioNetworkGatewayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetwork_IstioNetworkGateway.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Network_IstioNetworkGatewayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Network_IstioNetworkGatewayValidationError{}
