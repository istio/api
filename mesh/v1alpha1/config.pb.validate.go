// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mesh/v1alpha1/config.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on MeshConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MeshConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MixerCheckServer

	// no validation rules for MixerReportServer

	// no validation rules for DisablePolicyChecks

	// no validation rules for PolicyCheckFailOpen

	// no validation rules for ProxyListenPort

	// no validation rules for ProxyHttpPort

	if v, ok := interface{}(m.GetConnectTimeout()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return MeshConfigValidationError{
				field:  "ConnectTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IngressClass

	// no validation rules for IngressService

	// no validation rules for IngressControllerMode

	// no validation rules for AuthPolicy

	// no validation rules for EnableTracing

	// no validation rules for AccessLogFile

	// no validation rules for AccessLogFormat

	if v, ok := interface{}(m.GetDefaultConfig()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return MeshConfigValidationError{
				field:  "DefaultConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableClientSidePolicyCheck

	// no validation rules for SdsUdsPath

	for idx, item := range m.GetConfigSources() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return MeshConfigValidationError{
					field:  fmt.Sprintf("ConfigSources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for EnableSdsTokenMount

	return nil
}

// MeshConfigValidationError is the validation error returned by
// MeshConfig.Validate if the designated constraints aren't met.
type MeshConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshConfigValidationError) ErrorName() string { return "MeshConfigValidationError" }

// Error satisfies the builtin error interface
func (e MeshConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshConfigValidationError{}

// Validate checks the field values on ConfigSource with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ConfigSource) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	if v, ok := interface{}(m.GetTlsSettings()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConfigSourceValidationError{
				field:  "TlsSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConfigSourceValidationError is the validation error returned by
// ConfigSource.Validate if the designated constraints aren't met.
type ConfigSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigSourceValidationError) ErrorName() string { return "ConfigSourceValidationError" }

// Error satisfies the builtin error interface
func (e ConfigSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigSourceValidationError{}
