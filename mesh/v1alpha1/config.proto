// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "google/protobuf/duration.proto";
import "mesh/v1alpha1/proxy.proto";
import "networking/v1alpha3/destination_rule.proto";

// $title: Service Mesh
// $description: Configuration affecting the service mesh as a whole.
// $location: https://istio.io/docs/reference/config/istio.mesh.v1alpha1.html
// $aliases:
// $  - /docs/reference/config/service-mesh.html

package istio.mesh.v1alpha1;

option go_package="istio.io/api/mesh/v1alpha1";

// MeshConfig defines mesh-wide variables shared by all Envoy instances in the
// Istio service mesh.
//
// NOTE: This configuration type should be used for the low-level global
// configuration, such as component addresses and port numbers. It should not
// be used for the features of the mesh that can be scoped by service or by
// namespace. Some of the fields in the mesh config are going to be deprecated
// and replaced with several individual configuration types (for example,
// tracing configuration).
message MeshConfig {
  // Address of the server that will be used by the proxies for policy
  // check calls. By using different names for mixerCheckServer and
  // mixerReportServer, it is possible to have one set of mixer servers handle
  // policy check calls while another set of mixer servers handle telemetry
  // calls.
  //
  // NOTE: Omitting mixerCheckServer while specifying mixerReportServer is
  // equivalent to setting disablePolicyChecks to true.
  string mixer_check_server = 1;

  // Address of the server that will be used by the proxies for policy report
  // calls.
  string mixer_report_server = 2;

  // Disable policy checks by the mixer service. Default
  // is false, i.e. mixer policy check is enabled by default.
  bool disable_policy_checks = 3;

  // Allow all traffic in cases when the mixer policy service cannot be reached.
  // Default is false which means the traffic is denied when the client is unable
  // to connect to Mixer.
  bool policy_check_fail_open = 25;

  // Port on which Envoy should listen for incoming connections from
  // other services.
  int32 proxy_listen_port = 4;

  // Port on which Envoy should listen for HTTP PROXY requests if set.
  int32 proxy_http_port = 5;

  // Connection timeout used by Envoy. (MUST BE >=1ms)
  google.protobuf.Duration connect_timeout = 6;

  // If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
  istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive tcp_keepalive = 28;

  // Class of ingress resources to be processed by Istio ingress
  // controller.  This corresponds to the value of
  // "kubernetes.io/ingress.class" annotation.
  string ingress_class = 7;

  // Name of the kubernetes service used for the istio ingress controller.
  string ingress_service = 8;

  enum IngressControllerMode {
    // Disables Istio ingress controller.
    OFF = 0;

    // Istio ingress controller will act on ingress resources that do not
    // contain any annotation or whose annotations match the value
    // specified in the ingress_class parameter described earlier. Use this
    // mode if Istio ingress controller will be the default ingress
    // controller for the entire kubernetes cluster.
    DEFAULT = 1;

    // Istio ingress controller will only act on ingress resources whose
    // annotations match the value specified in the ingress_class parameter
    // described earlier. Use this mode if Istio ingress controller will be
    // a secondary ingress controller (e.g., in addition to a
    // cloud-provided ingress controller).
    STRICT = 2;
  }

  // Defines whether to use Istio ingress controller for annotated or all ingress resources.
  IngressControllerMode ingress_controller_mode = 9;

  // $hide_from_docs
  enum AuthPolicy {
    NONE = 0;
    MUTUAL_TLS = 1;
  }

  // $hide_from_docs
  AuthPolicy auth_policy = 10 [deprecated=true];

  // $hide_from_docs
  google.protobuf.Duration rds_refresh_delay = 11 [deprecated=true];

  // Flag to control generation of trace spans and request IDs.
  // Requires a trace span collector defined in the proxy configuration.
  bool enable_tracing = 12;

  // File address for the proxy access log (e.g. /dev/stdout).
  // Empty value disables access logging.
  string access_log_file = 13;

  // Format for the proxy access log
  // Empty value results in proxy's default access log format
  string access_log_format = 24;

  enum AccessLogEncoding {
    TEXT = 0;
    JSON = 1;
  }

  // Encoding for the proxy access log (text or json).
  // Default value is text.
  AccessLogEncoding access_log_encoding = 27;

  // Default proxy config used by the proxy injection mechanism operating in the mesh
  // (e.g. Kubernetes admission controller)
  // In case of Kubernetes, the proxy config is applied once during the injection process,
  // and remain constant for the duration of the pod. The rest of the mesh config can be changed
  // at runtime and config gets distributed dynamically.
  ProxyConfig default_config = 14;

  reserved 15;

  // $hide_from_docs
  string mixer_address = 16 [deprecated=true];

  message OutboundTrafficPolicy {
    enum Mode {
      // outbound traffic will be restricted to services defined in the service registry as well as those defined
      // through ServiceEntries
      REGISTRY_ONLY = 0;
      // outbound traffic to unknown destinations will be allowed, in case there are no services or ServiceEntries for the destination port
      ALLOW_ANY = 1;
      // not implemented. outbound traffic will be restricted to destinations defined in VirtualServices only
      VIRTUAL_SERVICE_ONLY = 2 [deprecated=true];
    }
    Mode mode = 1;
  }

  // Set the default behavior of the sidecar for handling outbound traffic from the application.
  // While the default mode should work out of the box, if your application uses one or more external services that
  // are not known apriori, setting the policy to ALLOW_ANY will cause the sidecars to route traffic to the any
  // requested destination.
  // Users are strongly encouraged to use ServiceEntries to explicitly declare any external dependencies,
  // instead of using allow_any.
  OutboundTrafficPolicy outbound_traffic_policy = 17;

  reserved 18;

  // Enables clide side policy checks.
  bool enable_client_side_policy_check = 19;

  // Unix Domain Socket through which envoy communicates with NodeAgent SDS to get key/cert for mTLS.
  // Use secret-mount files instead of SDS if set to empty.
  string sds_uds_path = 20;

  // $hide_from_docs
  google.protobuf.Duration sds_refresh_delay = 21 [deprecated=true];

  // ConfigSource describes a source of configuration data for networking
  // rules, and other Istio configuration artifacts. Multiple data sources
  // can be configured for a single control plane.
  repeated ConfigSource config_sources = 22;

  // $hide_from_docs
  // This flag is used by secret discovery service(SDS).
  // If set to true(prerequisite: https://kubernetes.io/docs/concepts/storage/volumes/#projected), Istio will inject volumes mount
  // for k8s service account trustworthy JWT(which is avaialbe for k8s 1.12 or higher), so that K8s API server
  // mounts k8s service account trustworthy JWT to envoy container, which will be used to request key/cert eventually.
  // This isn't supported for non-k8s case.
  bool enable_sds_token_mount = 23;

  // $hide_from_docs
  // This flag is used by secret discovery service(SDS).
  // If set to true, envoy will fetch normal k8s service account JWT from '/var/run/secrets/kubernetes.io/serviceaccount/token'
  // (https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/#accessing-the-api-from-a-pod)
  // and pass to sds server, which will be used to request key/cert eventually.
  // If both enable_sds_token_mount and sds_use_k8s_sa_jwt are set to true, enable_sds_token_mount(trustworthy jwt) takes precedence.
  // This isn't supported for non-k8s case.
  bool sds_use_k8s_sa_jwt = 30;

  // The trust domain corresponds to the trust root of a system.
  // Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain
  // Fallback to old identity format(without trust domain) if not set.
  string trust_domain = 26;

  // Default service dependency settings for each workload in the
  // mesh. ServiceDependencycontrols the reachability of workloads to other
  // services in the mesh.
  message DefaultServiceDependency {
    enum Mode {
      // Configure routes to services in all namespaces, i.e. import
      // services from all namespaces.
      ALL_NAMESPACES = 0;

      // Only configure routes to services that are in the same namespace
      // as the workload as well as services in namespaces specified in
      // importNamespaces.
      SAME_NAMESPACE = 1;
    }

    // REQUIRED: The default import setting for every workload in the mesh.
    Mode import_mode = 1;

    // Specifies one or more namespaces that should be imported by default
    // in all user defined ServiceDependency resources in addition to the
    // namespaces explicitly specified by the end user. Use this setting to
    // automatically import services/resources from namespaces such as
    // istio-system that all workloads in the mesh depend upon.
    repeated string import_namespaces = 2;
  }

  // The default service dependency setting associated with every workload
  // in the mesh.  Pilot will program the routes in the sidecars and
  // gateways accordingly. If omitted, sidecars will be configured to reach
  // every service in the mesh. The default scope can be overriden by
  // supplying a ServiceDependency resource per namespace.
  DefaultServiceDependency default_service_dependency = 29;

  // $hide_from_docs
  // Next available field number: 31
}

// ConfigSource describes information about a configuration store inside a
// mesh. A single control plane instance can interact with one or more data
// sources.
message ConfigSource {
  // Address of the server implementing the Istio Mesh Configuration
  // protocol (MCP). Can be IP address or a fully qualified DNS name.
  // Use fs:/// to specify a file-based backend with absolute path to the directory.
  string address = 1;

  // Use the tls_settings to specify the tls mode to use. If the MCP server
  // uses Istio MTLS and shares the root CA with Pilot, specify the TLS
  // mode as ISTIO_MUTUAL.
  istio.networking.v1alpha3.TLSSettings tls_settings = 2;
}
