// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "mesh/v1alpha1/proxy.proto";
import "networking/v1alpha3/destination_rule.proto";

// $title: Global Mesh Options
// $description: Configuration affecting the service mesh as a whole.
// $location: https://istio.io/docs/reference/config/istio.mesh.v1alpha1.html
// $weight: 20

// Configuration affecting the service mesh as a whole.
package istio.mesh.v1alpha1;

option go_package="istio.io/api/mesh/v1alpha1";

// MeshConfig defines mesh-wide variables shared by all Envoy instances in the
// Istio service mesh.
//
// NOTE: This configuration type should be used for the low-level global
// configuration, such as component addresses and port numbers. It should not
// be used for the features of the mesh that can be scoped by service or by
// namespace. Some of the fields in the mesh config are going to be deprecated
// and replaced with several individual configuration types (for example,
// tracing configuration).
message MeshConfig {
  // Address of the server that will be used by the proxies for policy
  // check calls. By using different names for mixerCheckServer and
  // mixerReportServer, it is possible to have one set of Mixer servers handle
  // policy check calls while another set of Mixer servers handle telemetry
  // calls.
  //
  // NOTE: Omitting mixerCheckServer while specifying mixerReportServer is
  // equivalent to setting disablePolicyChecks to true.
  string mixer_check_server = 1 [deprecated=true];

  // Address of the server that will be used by the proxies for policy report
  // calls.
  string mixer_report_server = 2 [deprecated=true];

  // Disable policy checks by the Mixer service. Default
  // is true, i.e. Mixer policy check is disabled by default.
  bool disable_policy_checks = 3 [deprecated=true];

  // $hide_from_docs
  // Disable telemetry reporting by the Mixer service for HTTP traffic.
  // Default is true (telemetry reporting via Mixer is disabled).
  // This option provides a transition path for Istio extensibility v2.
  bool disable_mixer_http_reports = 48 [deprecated=true];

  // Allow all traffic in cases when the Mixer policy service cannot be reached.
  // Default is false which means the traffic is denied when the client is unable
  // to connect to Mixer.
  bool policy_check_fail_open = 25 [deprecated=true];

  // Enable session affinity for Envoy Mixer reports so that calls from a proxy will
  // always target the same Mixer instance. Default value is false.
  bool sidecar_to_telemetry_session_affinity = 30 [deprecated=true];

  // Port on which Envoy should listen for incoming connections from
  // other services. Default port is 15001.
  int32 proxy_listen_port = 4;

  // Port on which Envoy should listen for HTTP PROXY requests if set.
  int32 proxy_http_port = 5;

  // Connection timeout used by Envoy. (MUST BE >=1ms)
  // Default timeout is 10s.
  google.protobuf.Duration connect_timeout = 6;

  // Automatic protocol detection uses a set of heuristics to
  // determine whether the connection is using TLS or not (on the
  // server side), as well as the application protocol being used
  // (e.g., http vs tcp). These heuristics rely on the client sending
  // the first bits of data. For server first protocols like MySQL,
  // MongoDB, etc. Envoy will timeout on the protocol detection after
  // the specified period, defaulting to non mTLS plain TCP
  // traffic. Set this field to tweak the period that Envoy will wait
  // for the client to send the first bits of data. (MUST BE >=1ms or 
  // 0s to disable). Default detection timeout is 5s.
  google.protobuf.Duration protocol_detection_timeout = 42;

  // If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
  istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive tcp_keepalive = 28;

  // Class of ingress resources to be processed by Istio ingress
  // controller. This corresponds to the value of
  // "kubernetes.io/ingress.class" annotation.
  string ingress_class = 7;

  // Name of the Kubernetes service used for the istio ingress controller.
  // If no ingress controller is specified, the default value `istio-ingressgateway` is used.
  string ingress_service = 8;

  enum IngressControllerMode {
    // Unspecified Istio ingress controller.
    UNSPECIFIED = 0;

    // Disables Istio ingress controller.
    OFF = 1;

    // Istio ingress controller will act on ingress resources that do not
    // contain any annotation or whose annotations match the value
    // specified in the ingress_class parameter described earlier. Use this
    // mode if Istio ingress controller will be the default ingress
    // controller for the entireKubernetes cluster.
    DEFAULT = 2;

    // Istio ingress controller will only act on ingress resources whose
    // annotations match the value specified in the ingress_class parameter
    // described earlier. Use this mode if Istio ingress controller will be
    // a secondary ingress controller (e.g., in addition to a
    // cloud-provided ingress controller).
    STRICT = 3;
  }

  // Defines whether to use Istio ingress controller for annotated or all ingress resources.
  // Default mode is STRICT.
  IngressControllerMode ingress_controller_mode = 9;

  // Defines which gateway deployment to use as the Ingress controller. This field corresponds to
  // the Gateway.selector field, and will be set as `istio: INGRESS_SELECTOR`.
  // By default, `ingressgateway` is used, which will select the default IngressGateway as it has the
  // `istio: ingressgateway` labels.
  // It is recommended that this is the same value as ingress_service.
  string ingress_selector = 52;

  // $hide_from_docs
  enum AuthPolicy {
    NONE = 0;
    MUTUAL_TLS = 1;
  }

  // $hide_from_docs
  AuthPolicy auth_policy = 10 [deprecated=true];

  // $hide_from_docs
  google.protobuf.Duration rds_refresh_delay = 11 [deprecated=true];

  // Flag to control generation of trace spans and request IDs.
  // Requires a trace span collector defined in the proxy configuration.
  bool enable_tracing = 12;

  // File address for the proxy access log (e.g. /dev/stdout).
  // Empty value disables access logging.
  string access_log_file = 13;

  // Format for the proxy access log
  // Empty value results in proxy's default access log format
  string access_log_format = 24;

  enum AccessLogEncoding {
    TEXT = 0;
    JSON = 1;
  }

  // Encoding for the proxy access log (text or json).
  // Default value is text.
  AccessLogEncoding access_log_encoding = 27;

  // This flag enables Envoy's gRPC Access Log Service.
  // See [Access Log Service](https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/accesslog/v2/als.proto)
  // for details about Envoy's gRPC Access Log Service API.
  // Default value is false.
  bool enable_envoy_access_log_service = 40;

  // Default proxy config used by the proxy injection mechanism operating in the mesh
  // (e.g. Kubernetes admission controller)
  // In case of Kubernetes, the proxy config is applied once during the injection process,
  // and remain constant for the duration of the pod. The rest of the mesh config can be changed
  // at runtime and config gets distributed dynamically.
  ProxyConfig default_config = 14;

  reserved 15;

  // $hide_from_docs
  string mixer_address = 16 [deprecated=true];

  message OutboundTrafficPolicy {
    enum Mode {
      // outbound traffic will be restricted to services defined in the
      // service registry as well as those defined through ServiceEntries
      REGISTRY_ONLY = 0;
      // outbound traffic to unknown destinations will be allowed, in case
      // there are no services or ServiceEntries for the destination port
      ALLOW_ANY = 1;

      reserved 2;
      reserved "VIRTUAL_SERVICE_ONLY";
    }
    Mode mode = 1;
  }

  // Set the default behavior of the sidecar for handling outbound
  // traffic from the application.  If your application uses one or
  // more external services that are not known apriori, setting the
  // policy to ALLOW_ANY will cause the sidecars to route any unknown
  // traffic originating from the application to its requested
  // destination. Users are strongly encouraged to use ServiceEntries
  // to explicitly declare any external dependencies, instead of using
  // allow_any, so that traffic to these services can be
  // monitored. Can be overridden at a Sidecar level by setting the
  // OutboundTrafficPolicy in the [Sidecar
  // API](https://istio.io/docs/reference/config/networking/sidecar/#OutboundTrafficPolicy).
  // Default mode is ALLOW_ANY which means outbound traffic to unknown destinations will be allowed.
  OutboundTrafficPolicy outbound_traffic_policy = 17;

  reserved 18;

  // Enables client side policy checks.
  bool enable_client_side_policy_check = 19;

  // $hide_from_docs
  // Unix Domain Socket through which Envoy communicates with NodeAgent SDS to get key/cert for mTLS.
  // Use secret-mount files instead of SDS if set to empty.
  // @deprecated - istio agent will detect and send the path to envoy.
  string sds_uds_path = 20 [deprecated=true];

  // $hide_from_docs
  google.protobuf.Duration sds_refresh_delay = 21 [deprecated=true];

  // ConfigSource describes a source of configuration data for networking
  // rules, and other Istio configuration artifacts. Multiple data sources
  // can be configured for a single control plane.
  repeated ConfigSource config_sources = 22;

  // This flag is used to enable mutual TLS automatically for service to service communication
  // within the mesh, default true.
  // If set to true, and a given service does not have a corresponding DestinationRule configured,
  // or its DestinationRule does not have ClientTLSSettings specified, Istio configures client side
  // TLS configuration appropriately. More specifically,
  // If the upstream authentication policy is in STRICT mode, use Istio provisioned certificate
  // for mutual TLS to connect to upstream.
  // If upstream service is in plain text mode, use plain text.
  // If the upstream authentication policy is in PERMISSIVE mode, Istio configures clients to use
  // mutual TLS when server sides are capable of accepting mutual TLS traffic.
  // If service DestinationRule exists and has ClientTLSSettings specified, that is always used instead.
  google.protobuf.BoolValue enable_auto_mtls = 43;

  // $hide_from_docs
  // This flag is used by secret discovery service(SDS).
  // If set to true ([prerequisite](https://kubernetes.io/docs/concepts/storage/volumes/#projected)), Istio will inject volumes mount
  // for Kubernetes service account trustworthy JWT(which is available with Kubernetes 1.12 or higher), so that the Kubernetes API server
  // mounts Kubernetes service account trustworthy JWT to the Envoy container, which will be used to request key/cert eventually.
  // This isn't supported for non-Kubernetes cases.
  // Default value is set to false.
  bool enable_sds_token_mount = 23;

  // $hide_from_docs
  // This flag is used by secret discovery service(SDS).
  // If set to true, Envoy will fetch a normal Kubernetes service account JWT from '/var/run/secrets/kubernetes.io/serviceaccount/token'
  // (https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/#accessing-the-api-from-a-pod)
  // and pass to sds server, which will be used to request key/cert eventually.
  // If both enable_sds_token_mount and sds_use_k8s_sa_jwt are set to true, enable_sds_token_mount(trustworthy jwt) takes precedence.
  // This isn't supported for non-k8s case.
  bool sds_use_k8s_sa_jwt = 29;

  // The trust domain corresponds to the trust root of a system.
  // Refer to [SPIFFE-ID](https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain)
  string trust_domain = 26;

  // The trust domain aliases represent the aliases of `trust_domain`.
  // For example, if we have
  // ```yaml
  // trustDomain: td1
  // trustDomainAliases: ["td2", "td3"]
  // ```
  // Any service with the identity `td1/ns/foo/sa/a-service-account`, `td2/ns/foo/sa/a-service-account`,
  // or `td3/ns/foo/sa/a-service-account` will be treated the same in the Istio mesh.
  repeated string trust_domain_aliases = 46;

  // The default value for the ServiceEntry.export_to field and services
  // imported through container registry integrations, e.g. this applies to
  // Kubernetes Service resources. The value is a list of namespace names and
  // reserved namespace aliases. The allowed namespace aliases are:
  //
  // * - All Namespaces
  // . - Current Namespace
  // ~ - No Namespace
  //
  // If not set the system will use "*" as the default value which implies that
  // services are exported to all namespaces.
  //
  // 'All namespaces' is a reasonable default for implementations that don't
  // need to restrict access or visibility of services across namespace
  // boundaries. If that requirement is present it is generally good practice to
  // make the default 'Current namespace' so that services are only visible
  // within their own namespaces by default. Operators can then expand the
  // visibility of services to other namespaces as needed. Use of 'No Namespace'
  // is expected to be rare but can have utility for deployments where
  // dependency management needs to be precise even within the scope of a single
  // namespace.
  //
  // For further discussion see the reference documentation for ServiceEntry,
  // Sidecar, and Gateway.
  repeated string default_service_export_to = 31;

  // The default value for the VirtualService.export_to field. Has the same
  // syntax as 'default_service_export_to'.
  //
  // If not set the system will use "*" as the default value which implies that
  // virtual services are exported to all namespaces
  repeated string default_virtual_service_export_to = 32;

  // The default value for the DestinationRule.export_to field. Has the same
  // syntax as 'default_service_export_to'.
  //
  // If not set the system will use "*" as the default value which implies that
  // destination rules are exported to all namespaces
  repeated string default_destination_rule_export_to = 33;

  // The namespace to treat as the administrative root namespace for
  // Istio configuration. When processing a leaf namespace Istio will search for
  // declarations in that namespace first and if none are found it will
  // search in the root namespace. Any matching declaration found in the root
  // namespace is processed as if it were declared in the leaf namespace.
  //
  // The precise semantics of this processing are documented on each resource
  // type.
  string root_namespace = 34;

  // Locality based load balancing distribution or failover settings.
  istio.networking.v1alpha3.LocalityLoadBalancerSetting locality_lb_setting = 35;

  // Configures DNS refresh rate for Envoy clusters of type STRICT_DNS
  // Default refresh rate is 5s.
  google.protobuf.Duration dns_refresh_rate = 36;

  // The flag to disable report batch.
  bool disable_report_batch = 37 [deprecated=true];

  // When disable_report_batch is false, this value specifies the maximum number
  // of requests that are batched in report. If left unspecified, the default value
  // of report_batch_max_entries == 0 will use the hardcoded defaults of
  // istio::mixerclient::ReportOptions. Default value is 100.
  uint32 report_batch_max_entries = 38 [deprecated=true];

  // When disable_report_batch is false, this value specifies the maximum elapsed
  // time a batched report will be sent after a user request is processed. If left
  // unspecified, the default report_batch_max_time == 0 will use the hardcoded
  // defaults of istio::mixerclient::ReportOptions. Default max time is 1s.
  google.protobuf.Duration report_batch_max_time = 39 [deprecated=true];

  // Default Policy for upgrading http1.1 connections to http2.
  enum H2UpgradePolicy {
    // Do not upgrade connections to http2.
    DO_NOT_UPGRADE = 0;
    // Upgrade the connections to http2.
    UPGRADE = 1;
  }

  // Specify if http1.1 connections should be upgraded to http2 by default.
  // if sidecar is installed on all pods in the mesh, then this should be set to UPGRADE.
  // If one or more services or namespaces do not have sidecar(s), then this should be set to DO_NOT_UPGRADE.
  // It can be enabled by destination using the destinationRule.trafficPolicy.connectionPool.http.h2UpgradePolicy override.
  H2UpgradePolicy h2_upgrade_policy = 41;

  // Name to be used while emitting statistics for inbound clusters. The same pattern is used while computing stat prefix for
  // network filters like TCP and Redis.
  // By default, Istio emits statistics with the pattern `inbound|<port>|<port-name>|<service-FQDN>`.
  // For example `inbound|7443|grpc-reviews|reviews.prod.svc.cluster.local`. This can be used to override that pattern.
  //
  // A Pattern can be composed of various pre-defined variables. The following variables are supported.
  //
  // - `%SERVICE%` - Will be substituted with name of the service.
  // - `%SERVICE_FQDN%` - Will be substituted with FQDN of the service.
  // - `%SERVICE_PORT%` - Will be substituted with port of the service.
  // - `%SERVICE_PORT_NAME%` - Will be substituted with port name of the service.
  //
  // Following are some examples of supported patterns for reviews:
  //
  // - `%SERVICE_FQDN%_%SERVICE_PORT%` will use reviews.prod.svc.cluster.local_7443 as the stats name.
  // - `%SERVICE%` will use reviews.prod as the stats name.
  string inbound_cluster_stat_name = 44;

  // Name to be used while emitting statistics for outbound clusters. The same pattern is used while computing stat prefix for
  // network filters like TCP and Redis.
  // By default, Istio emits statistics with the pattern `outbound|<port>|<subsetname>|<service-FQDN>`.
  // For example `outbound|8080|v2|reviews.prod.svc.cluster.local`. This can be used to override that pattern.
  //
  // A Pattern can be composed of various pre-defined variables. The following variables are supported.
  //
  // - `%SERVICE%` - Will be substituted with name of the service.
  // - `%SERVICE_FQDN%` - Will be substituted with FQDN of the service.
  // - `%SERVICE_PORT%` - Will be substituted with port of the service.
  // - `%SERVICE_PORT_NAME%` - Will be substituted with port name of the service.
  // - `%SUBSET_NAME%` - Will be substituted with subset.
  //
  // Following are some examples of supported patterns for reviews:
  //
  // - `%SERVICE_FQDN%_%SERVICE_PORT%` will use reviews.prod.svc.cluster.local_7443 as the stats name.
  // - `%SERVICE%` will use reviews.prod as the stats name.
  string outbound_cluster_stat_name = 45;

  // Configure the provision of certificates.
  repeated Certificate certificates = 47;

  message ThriftConfig {
    // Specify thrift rate limit service URL. If pilot has thrift protocol support enabled,
    // this will enable the rate limit service for destinations that have matching rate
    // limit configurations.
    string rate_limit_url = 1;

    // Specify thrift rate limit service timeout, in milliseconds. Default is 50ms
    google.protobuf.Duration rate_limit_timeout = 2;
  }

  // Set configuration for Thrift protocol
  ThriftConfig thrift_config = 49;

  // $hide_from_docs
  // Settings to be applied to select services.
  //
  // For example, the following configures all services in namespace "foo" as well as the
  // "bar" service in namespace "baz" to be considered cluster-local:
  //
  // ```yaml
  // serviceSettings:
  //   - settings:
  //       cluster_local: true
  //     hosts:
  //       - "*.foo.svc.cluster.local"
  //       - "bar.baz.svc.cluster.local"
  // ```
  message ServiceSettings {
    // Settings for the selected services.
    message Settings {
      // If true, specifies that the client and service endpoints must reside in the same cluster.
      // By default, in multi-cluster deployments, the Istio control plane assumes all service
      // endpoints to be reachable from any client in any of the clusters which are part of the
      // mesh. This configuration option limits the set of service endpoints visible to a client
      // to be cluster scoped.
      //
      // There are some common scenarios when this can be useful:
      //
      //   - A service (or group of services) is inherently local to the cluster and has local storage
      //     for that cluster. For example, the kube-system namespace (e.g. the Kube API Server).
      //   - A mesh administrator wants to slowly migrate services to Istio. They might start by first
      //     having services cluster-local and then slowly transition them to mesh-wide. They could do
      //     this service-by-service (e.g. mysvc.myns.svc.cluster.local) or as a group
      //     (e.g. *.myns.svc.cluster.local).
      //
      // By default, Istio will consider all services in the kube-system namespace to be cluster-local,
      // unless explicitly overridden here.
      bool cluster_local = 1;
    }

    // The settings to apply to the selected services.
    Settings settings = 1;

    // The services to which the Settings should be applied. Services are selected using the hostname
    // matching rules used by DestinationRule.
    //
    // For example: foo.bar.svc.cluster.local, *.baz.svc.cluster.local
    repeated string hosts = 2;
  }

  // $hide_from_docs
  // Settings to be applied to select services.
  repeated ServiceSettings service_settings = 50;

  // If enabled, Istio agent will merge metrics exposed by the application with metrics from Envoy
  // and Istio agent. The sidecar injection will replace `prometheus.io` annotations present on the pod
  // and redirect them towards Istio agent, which will then merge metrics of from the application with Istio metrics.
  // This relies on the annotations `prometheus.io/scrape`, `prometheus.io/port`, and
  // `prometheus.io/path` annotations.
  // If you are running a separately managed Envoy with an Istio sidecar, this may cause issues, as the metrics will collide.
  // In this case, it is recommended to disable aggregation on that deployment with the
  // `prometheus.istio.io/merge-metrics: "false"` annotation.
  // If not specified, this will be enabled by default.
  google.protobuf.BoolValue enable_prometheus_merge = 51;

  reserved 53;
  reserved "termination_drain_duration";

  // $hide_from_docs
  // Next available field number: 54
}

// Resource describes the source of configuration
 enum Resource {
   // Set to only receive service entries that are generated by the platform.
   // These auto generated service entries are combination of services and endpoints
   // that are generated by a specific platform e.g. k8
   SERVICE_REGISTRY = 0;
 }

// ConfigSource describes information about a configuration store inside a
// mesh. A single control plane instance can interact with one or more data
// sources.
message ConfigSource {
 // Address of the server implementing the Istio Mesh Configuration
 // protocol (MCP). Can be IP address or a fully qualified DNS name.
 // Use fs:/// to specify a file-based backend with absolute path to the directory.
 string address = 1;
 // Use the tls_settings to specify the tls mode to use. If the MCP server
 // uses Istio mutual TLS and shares the root CA with Pilot, specify the TLS
 // mode as ISTIO_MUTUAL.
 istio.networking.v1alpha3.ClientTLSSettings tls_settings = 2;
 // Describes the source of configuration, if nothing is specified default is MCP
 repeated Resource subscribed_resources = 3;
}



// Certificate configures the provision of a certificate and its key.
// Example 1: key and cert stored in a secret
// { secretName: galley-cert
//   secretNamespace: istio-system
//   dnsNames:
//     - galley.istio-system.svc
//     - galley.mydomain.com
// }
// Example 2: key and cert stored in a directory
// { dnsNames:
//     - pilot.istio-system
//     - pilot.istio-system.svc
//     - pilot.mydomain.com
// }
message Certificate {
  // Name of the secret the certificate and its key will be stored into.
  // If it is empty, it will not be stored into a secret.
  // Instead, the certificate and its key will be stored into a hard-coded directory.
  string secret_name = 1;
  // The DNS names for the certificate. A certificate may contain
  // multiple DNS names.
  repeated string dns_names = 2;
}
