// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mesh/v1alpha1/certificate.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CertificateParameters are the parameters used to configure certificates issued
// adapted from cert-manager (see https://cert-manager.io/docs/reference/api-docs)
type CertificateParameters struct {
	// The cert lifetime of the self-signed CA certificate.
	// Default TTL duration is `8760h0m0s` for self-signed root
	// cert and `24h0m0s` for created workloads.
	Duration   *types.Duration            `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	PrivateKey *CertificateParameters_Key `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// The cert signer which will be used to sign certificates for workload-to-workload communication.
	// This only takes effect if Istiod is acting as RA (registration authority)
	CertSigner           string   `protobuf:"bytes,4,opt,name=cert_signer,json=certSigner,proto3" json:"cert_signer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateParameters) Reset()         { *m = CertificateParameters{} }
func (m *CertificateParameters) String() string { return proto.CompactTextString(m) }
func (*CertificateParameters) ProtoMessage()    {}
func (*CertificateParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e6b2b928dab56d, []int{0}
}
func (m *CertificateParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateParameters.Merge(m, src)
}
func (m *CertificateParameters) XXX_Size() int {
	return m.Size()
}
func (m *CertificateParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateParameters.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateParameters proto.InternalMessageInfo

func (m *CertificateParameters) GetDuration() *types.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *CertificateParameters) GetPrivateKey() *CertificateParameters_Key {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *CertificateParameters) GetCertSigner() string {
	if m != nil {
		return m.CertSigner
	}
	return ""
}

type CertificateParameters_Key struct {
	// Specify the signature algorithm to use when generating private keys
	Algorithm string `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// Specify the private key size
	Size_                int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateParameters_Key) Reset()         { *m = CertificateParameters_Key{} }
func (m *CertificateParameters_Key) String() string { return proto.CompactTextString(m) }
func (*CertificateParameters_Key) ProtoMessage()    {}
func (*CertificateParameters_Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e6b2b928dab56d, []int{0, 0}
}
func (m *CertificateParameters_Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateParameters_Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateParameters_Key.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateParameters_Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateParameters_Key.Merge(m, src)
}
func (m *CertificateParameters_Key) XXX_Size() int {
	return m.Size()
}
func (m *CertificateParameters_Key) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateParameters_Key.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateParameters_Key proto.InternalMessageInfo

func (m *CertificateParameters_Key) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func (m *CertificateParameters_Key) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func init() {
	proto.RegisterType((*CertificateParameters)(nil), "istio.mesh.v1alpha1.CertificateParameters")
	proto.RegisterType((*CertificateParameters_Key)(nil), "istio.mesh.v1alpha1.CertificateParameters.Key")
}

func init() { proto.RegisterFile("mesh/v1alpha1/certificate.proto", fileDescriptor_66e6b2b928dab56d) }

var fileDescriptor_66e6b2b928dab56d = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x59, 0x5b, 0xc5, 0x6c, 0x6e, 0x2b, 0x42, 0x0c, 0x92, 0x06, 0x4f, 0x39, 0xcd, 0x52,
	0x45, 0xbc, 0xab, 0xb7, 0x1e, 0x94, 0x78, 0xf3, 0x52, 0xb6, 0x75, 0x9a, 0x0c, 0x26, 0xdd, 0xb0,
	0xd9, 0x16, 0xe2, 0x13, 0x7a, 0xf4, 0x11, 0x24, 0x6f, 0xe1, 0x4d, 0xb2, 0x69, 0x2c, 0x42, 0x6f,
	0xcb, 0xcf, 0x37, 0xdf, 0xfe, 0x33, 0x7c, 0x52, 0x62, 0x9d, 0xcb, 0xed, 0x54, 0x15, 0x55, 0xae,
	0xa6, 0x72, 0x89, 0xc6, 0xd2, 0x8a, 0x96, 0xca, 0x22, 0x54, 0x46, 0x5b, 0x2d, 0xce, 0xa8, 0xb6,
	0xa4, 0xa1, 0xc3, 0x60, 0xc0, 0xc2, 0x28, 0xd3, 0x3a, 0x2b, 0x50, 0x3a, 0x64, 0xb1, 0x59, 0xc9,
	0xb7, 0x8d, 0x51, 0x96, 0xf4, 0xba, 0x1f, 0xba, 0xfa, 0x61, 0xfc, 0xfc, 0x61, 0xaf, 0x7a, 0x56,
	0x46, 0x95, 0x68, 0xd1, 0xd4, 0xe2, 0x96, 0x9f, 0x0e, 0x6c, 0xc0, 0x62, 0x96, 0xf8, 0xd7, 0x17,
	0xd0, 0xcb, 0x60, 0x90, 0xc1, 0xe3, 0x0e, 0x48, 0xff, 0x50, 0xf1, 0xc4, 0xfd, 0xca, 0xd0, 0x56,
	0x59, 0x9c, 0xbf, 0x63, 0x13, 0x8c, 0xdc, 0x24, 0xc0, 0x81, 0x6e, 0x70, 0xf0, 0x5f, 0x98, 0x61,
	0x93, 0xf2, 0x9d, 0x62, 0x86, 0x8d, 0x98, 0x70, 0xbf, 0xdb, 0x75, 0x5e, 0x53, 0xb6, 0x46, 0x13,
	0x8c, 0x63, 0x96, 0x78, 0x29, 0xef, 0xa2, 0x17, 0x97, 0x84, 0x77, 0x7c, 0xd4, 0x71, 0x97, 0xdc,
	0x53, 0x45, 0xa6, 0x0d, 0xd9, 0xbc, 0x74, 0x85, 0xbd, 0x74, 0x1f, 0x08, 0xc1, 0xc7, 0x35, 0x7d,
	0x60, 0x70, 0x14, 0xb3, 0xe4, 0x38, 0x75, 0xef, 0xfb, 0xe4, 0xb3, 0x8d, 0xd8, 0x57, 0x1b, 0xb1,
	0xef, 0x36, 0x62, 0xaf, 0x61, 0x5f, 0x91, 0xb4, 0x54, 0x15, 0xc9, 0x7f, 0xc7, 0x5e, 0x9c, 0xb8,
	0x8d, 0x6f, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x69, 0x4d, 0x27, 0x84, 0x01, 0x00, 0x00,
}

func (m *CertificateParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CertSigner) > 0 {
		i -= len(m.CertSigner)
		copy(dAtA[i:], m.CertSigner)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.CertSigner)))
		i--
		dAtA[i] = 0x22
	}
	if m.PrivateKey != nil {
		{
			size, err := m.PrivateKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertificate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Duration != nil {
		{
			size, err := m.Duration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertificate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CertificateParameters_Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateParameters_Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateParameters_Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintCertificate(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Algorithm) > 0 {
		i -= len(m.Algorithm)
		copy(dAtA[i:], m.Algorithm)
		i = encodeVarintCertificate(dAtA, i, uint64(len(m.Algorithm)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCertificate(dAtA []byte, offset int, v uint64) int {
	offset -= sovCertificate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CertificateParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovCertificate(uint64(l))
	}
	if m.PrivateKey != nil {
		l = m.PrivateKey.Size()
		n += 1 + l + sovCertificate(uint64(l))
	}
	l = len(m.CertSigner)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CertificateParameters_Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Algorithm)
	if l > 0 {
		n += 1 + l + sovCertificate(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCertificate(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCertificate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCertificate(x uint64) (n int) {
	return sovCertificate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CertificateParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertificate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &types.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKey == nil {
				m.PrivateKey = &CertificateParameters_Key{}
			}
			if err := m.PrivateKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertificate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertificate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateParameters_Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertificate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Algorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCertificate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertificate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCertificate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCertificate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertificate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCertificate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCertificate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCertificate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCertificate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCertificate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCertificate = fmt.Errorf("proto: unexpected end of group")
)
