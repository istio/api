// Copyright 2019 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/api/autoscaling/v2beta1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "github.com/gogo/protobuf/protobuf/google/protobuf/wrappers.proto";

package istio.mesh.v1alpha1;

option go_package="istio.io/api/mesh/v1alpha1";

// IstioComponentSpec defines the desired installed state of Istio components.
message IstioComponentSpec {
    PilotComponentSpec pilot = 30;
    ProxyComponentSpec proxy = 31;
    SidecarInjectorComponentSpec sidecar_injector = 32;
    PolicyComponentSpec policy = 33;
    TelemetryComponentSpec telemetry = 34;
    CitadelComponentSpec citadel = 35;
    NodeAgentComponentSpec node_agent = 37;
    GalleyComponentSpec galley = 38;
    repeated GatewayComponentSpec gateways = 39;
    CNIComponentSpec cni = 40;
    CoreDNSComponentSpec coreDNS = 41;

    // Non-core components. Map key is the name of the resources for the component. All k8s resources accessible through
    // KubernetesResourcesSpec must have the same name.
    map<string, ExtensionComponentSpec> = 42;
}

// Configuration common to all components.

// Selects whether this component is installed.
// TypeBoolValueForPB enabled = 1;

// Kubernetes resource spec.
// KubernetesResourcesSpec k8s = 80;

// Configuration options for the pilot component.
message PilotComponentSpec {
    TypeBoolValueForPB enabled = 1;
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for the proxy.
message ProxyComponentSpec {
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for the sidecar injector component.
message SidecarInjectorComponentSpec {
    TypeBoolValueForPB enabled = 1;
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for the policy enforcement component.
message PolicyComponentSpec {
    TypeBoolValueForPB enabled = 1;
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for the telemetry component.
message TelemetryComponentSpec {
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for Citadel component.
message CitadelComponentSpec {
    TypeBoolValueForPB enabled = 1;
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for node agent component.
message NodeAgentComponentSpec {
    TypeBoolValueForPB enabled = 1;
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for galley component.
message GalleyComponentSpec {
    TypeBoolValueForPB enabled = 1;
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for gateways.
message GatewayComponentSpec {
    string name = 1;
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for cni component.
message CNIComponentSpec {
    TypeBoolValueForPB enabled = 1;
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for CoreDNS component.
message CoreDNSComponentSpec {
    TypeBoolValueForPB enabled = 1;
    KubernetesResourcesSpec k8s = 80;
}

// Configuration options for CoreDNS component.
message ExtensionComponentSpec {
    KubernetesResourcesSpec k8s = 80;
}

// KubernetesResourcesConfig is a common set of k8s resource configs for components.
message KubernetesResourcesSpec {
    // k8s affinity.
    // https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    k8s.io.api.core.v1.Affinity affinity = 1;
    // Deployment environment variables.
    // https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
    repeated k8s.io.api.core.v1.EnvVar env = 2;
    // k8s HorizontalPodAutoscaler settings.
    // https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
    k8s.io.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec hpa_spec = 3;
    // k8s imagePullPolicy.
    // https://kubernetes.io/docs/concepts/containers/images/
    string image_pull_policy = 4;
    // k8s nodeSelector.
    // https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    map<string, string> node_selector = 5;
    // k8s PodDisruptionBudget settings.
    // https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#how-disruption-budgets-work
    PodDisruptionBudgetSpec pod_disruption_budget = 6;
    // k8s pod annotations.
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    map<string, string> pod_annotations = 7;
    // k8s priority_class_name. Default for all resources unless overridden.
    // https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
    string priority_class_name = 8;
    // k8s readinessProbe settings.
    // https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    // k8s.io.api.core.v1.Probe readiness_probe = 9;
    ReadinessProbe readiness_probe = 9;
    // k8s Deployment replicas setting.
    // https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
    uint32 replica_count = 10;
    // k8s resources settings.
    // https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
    Resources resources = 11;
    // k8s Service settings.
    // https://kubernetes.io/docs/concepts/services-networking/service/
    k8s.io.api.core.v1.ServiceSpec service = 12;
    // k8s deployment strategy.
    // https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
    DeploymentStrategy strategy = 13;
    // k8s toleration
    // https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    repeated k8s.io.api.core.v1.Toleration tolerations = 14;

    // Overlays for k8s resources in rendered manifests.
    repeated k8sObjectOverlay overlays = 100;
}

// Patch for an existing k8s resource.
message k8sObjectOverlay {
    message PathValue {
        // Path of the form a.b:c.e.:f
        // Where b:c is a list element selector of the form key:value and :f is a list selector of the form :value.
        // All path intermediate nodes must exist.
        string path = 1;
        // Value to add, delete or replace.
        // For add, the path should be a new leaf.
        // For delete, value should be unset.
        // For replace, path should reference an existing node.
        // All values are strings but are converted into appropriate type based on schema.
        TypeInterface value = 2;
    }
    // Resource API version.
    string api_version = 1;
    // Resource kind.
    string kind = 2;
    // Name of resource.
    // Namespace is always the component namespace.
    string name = 3;

    // List of patches to apply to resource.
    repeated PathValue patches = 4;
}

// Observed state of IstioControlPlane.
message InstallStatus {
    enum Status {
        NONE = 0;
        UPDATING = 1;
        HEALTHY = 2;
        ERROR = 3;
        RECONCILING = 4;
    }
    message VersionStatus {
        string version = 1;
        Status status = 2;
        string statusString = 3;
        string error = 4;
    }

    map<string, VersionStatus> status = 1;
}

// Mirrors k8s.io.api.core.v1.ResourceRequirements for unmarshaling.
message Resources {
    map<string, string> limits = 1;
    map<string, string> requests = 2;
}

// Mirrors k8s.io.api.core.v1.Probe for unmarshaling.
message ReadinessProbe {
    ExecAction exec = 1;
    HTTPGetAction httpGet = 2;
    TCPSocketAction tcpSocket = 3;
    int32 initialDelaySeconds = 4;
    int32 timeoutSeconds = 5;
    int32 periodSeconds = 6;
    int32 successThreshold = 7;
    int32 failureThreshold = 8;
}

// Mirrors k8s.io.api.core.v1.ExecAction for unmarshaling.
message ExecAction {
    repeated string command = 1;
}

// Mirrors k8s.io.api.core.v1.HTTPGetAction for unmarshaling.
message HTTPGetAction {
    string path = 1;
    TypeIntOrStringForPB port = 2;
    string host = 3;
    string scheme = 4;
    repeated HTTPHeader httpHeaders = 5;
}

// Mirrors k8s.io.api.core.v1.HTTPHeader for unmarshaling.
message HTTPHeader {
    string name = 1;
    string value = 2;
}

// Mirrors k8s.io.api.core.v1.TCPSocketAction for unmarshaling.
message TCPSocketAction {
    TypeIntOrStringForPB port = 1;
    string host = 2;
}

// Mirrors k8s.io.api.policy.v1beta1.PodDisruptionBudget for unmarshaling.
message PodDisruptionBudgetSpec {
    uint32 minAvailable = 1;
    k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 2;
    uint32 maxUnavailable = 3;
}

// Mirrors k8s.io.api.apps.v1.DeploymentStrategy for unmarshaling.
message DeploymentStrategy {
    string type = 1;
    RollingUpdateDeployment rollingUpdate = 2;
}

// Mirrors k8s.io.api.apps.v1.RollingUpdateDeployment for unmarshaling.
message RollingUpdateDeployment {
    TypeIntOrStringForPB maxUnavailable = 1;
    TypeIntOrStringForPB maxSurge = 2;
}

message ObjectMeta {
    // From k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.
    string name = 5;
    string namespace = 6;
}

// GOTYPE: map[string]interface{}
message TypeMapStringInterface {}

// GOTYPE: interface{}
message TypeInterface {}

// GOTYPE: *IntOrStringForPB
message TypeIntOrStringForPB {}

// GOTYPE: *BoolValueForPB
message TypeBoolValueForPB {}
