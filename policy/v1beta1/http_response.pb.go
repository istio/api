// Code generated by protoc-gen-gogo. DO NOT EDIT.
// policy/v1beta1/http_response.proto is a deprecated file.

package v1beta1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HTTP response codes.
// For more details: http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
type HttpStatusCode int32

const (
	// Empty - This code not part of the HTTP status code specification, but it is needed for proto
	// `enum` type.
	Empty                         HttpStatusCode = 0
	Continue                      HttpStatusCode = 100
	OK                            HttpStatusCode = 200
	Created                       HttpStatusCode = 201
	Accepted                      HttpStatusCode = 202
	NonAuthoritativeInformation   HttpStatusCode = 203
	NoContent                     HttpStatusCode = 204
	ResetContent                  HttpStatusCode = 205
	PartialContent                HttpStatusCode = 206
	MultiStatus                   HttpStatusCode = 207
	AlreadyReported               HttpStatusCode = 208
	IMUsed                        HttpStatusCode = 226
	MultipleChoices               HttpStatusCode = 300
	MovedPermanently              HttpStatusCode = 301
	Found                         HttpStatusCode = 302
	SeeOther                      HttpStatusCode = 303
	NotModified                   HttpStatusCode = 304
	UseProxy                      HttpStatusCode = 305
	TemporaryRedirect             HttpStatusCode = 307
	PermanentRedirect             HttpStatusCode = 308
	BadRequest                    HttpStatusCode = 400
	Unauthorized                  HttpStatusCode = 401
	PaymentRequired               HttpStatusCode = 402
	Forbidden                     HttpStatusCode = 403
	NotFound                      HttpStatusCode = 404
	MethodNotAllowed              HttpStatusCode = 405
	NotAcceptable                 HttpStatusCode = 406
	ProxyAuthenticationRequired   HttpStatusCode = 407
	RequestTimeout                HttpStatusCode = 408
	Conflict                      HttpStatusCode = 409
	Gone                          HttpStatusCode = 410
	LengthRequired                HttpStatusCode = 411
	PreconditionFailed            HttpStatusCode = 412
	PayloadTooLarge               HttpStatusCode = 413
	URITooLong                    HttpStatusCode = 414
	UnsupportedMediaType          HttpStatusCode = 415
	RangeNotSatisfiable           HttpStatusCode = 416
	ExpectationFailed             HttpStatusCode = 417
	MisdirectedRequest            HttpStatusCode = 421
	UnprocessableEntity           HttpStatusCode = 422
	Locked                        HttpStatusCode = 423
	FailedDependency              HttpStatusCode = 424
	UpgradeRequired               HttpStatusCode = 426
	PreconditionRequired          HttpStatusCode = 428
	TooManyRequests               HttpStatusCode = 429
	RequestHeaderFieldsTooLarge   HttpStatusCode = 431
	InternalServerError           HttpStatusCode = 500
	NotImplemented                HttpStatusCode = 501
	BadGateway                    HttpStatusCode = 502
	ServiceUnavailable            HttpStatusCode = 503
	GatewayTimeout                HttpStatusCode = 504
	HTTPVersionNotSupported       HttpStatusCode = 505
	VariantAlsoNegotiates         HttpStatusCode = 506
	InsufficientStorage           HttpStatusCode = 507
	LoopDetected                  HttpStatusCode = 508
	NotExtended                   HttpStatusCode = 510
	NetworkAuthenticationRequired HttpStatusCode = 511
)

var HttpStatusCode_name = map[int32]string{
	0:   "Empty",
	100: "Continue",
	200: "OK",
	201: "Created",
	202: "Accepted",
	203: "NonAuthoritativeInformation",
	204: "NoContent",
	205: "ResetContent",
	206: "PartialContent",
	207: "MultiStatus",
	208: "AlreadyReported",
	226: "IMUsed",
	300: "MultipleChoices",
	301: "MovedPermanently",
	302: "Found",
	303: "SeeOther",
	304: "NotModified",
	305: "UseProxy",
	307: "TemporaryRedirect",
	308: "PermanentRedirect",
	400: "BadRequest",
	401: "Unauthorized",
	402: "PaymentRequired",
	403: "Forbidden",
	404: "NotFound",
	405: "MethodNotAllowed",
	406: "NotAcceptable",
	407: "ProxyAuthenticationRequired",
	408: "RequestTimeout",
	409: "Conflict",
	410: "Gone",
	411: "LengthRequired",
	412: "PreconditionFailed",
	413: "PayloadTooLarge",
	414: "URITooLong",
	415: "UnsupportedMediaType",
	416: "RangeNotSatisfiable",
	417: "ExpectationFailed",
	421: "MisdirectedRequest",
	422: "UnprocessableEntity",
	423: "Locked",
	424: "FailedDependency",
	426: "UpgradeRequired",
	428: "PreconditionRequired",
	429: "TooManyRequests",
	431: "RequestHeaderFieldsTooLarge",
	500: "InternalServerError",
	501: "NotImplemented",
	502: "BadGateway",
	503: "ServiceUnavailable",
	504: "GatewayTimeout",
	505: "HTTPVersionNotSupported",
	506: "VariantAlsoNegotiates",
	507: "InsufficientStorage",
	508: "LoopDetected",
	510: "NotExtended",
	511: "NetworkAuthenticationRequired",
}

var HttpStatusCode_value = map[string]int32{
	"Empty":                         0,
	"Continue":                      100,
	"OK":                            200,
	"Created":                       201,
	"Accepted":                      202,
	"NonAuthoritativeInformation":   203,
	"NoContent":                     204,
	"ResetContent":                  205,
	"PartialContent":                206,
	"MultiStatus":                   207,
	"AlreadyReported":               208,
	"IMUsed":                        226,
	"MultipleChoices":               300,
	"MovedPermanently":              301,
	"Found":                         302,
	"SeeOther":                      303,
	"NotModified":                   304,
	"UseProxy":                      305,
	"TemporaryRedirect":             307,
	"PermanentRedirect":             308,
	"BadRequest":                    400,
	"Unauthorized":                  401,
	"PaymentRequired":               402,
	"Forbidden":                     403,
	"NotFound":                      404,
	"MethodNotAllowed":              405,
	"NotAcceptable":                 406,
	"ProxyAuthenticationRequired":   407,
	"RequestTimeout":                408,
	"Conflict":                      409,
	"Gone":                          410,
	"LengthRequired":                411,
	"PreconditionFailed":            412,
	"PayloadTooLarge":               413,
	"URITooLong":                    414,
	"UnsupportedMediaType":          415,
	"RangeNotSatisfiable":           416,
	"ExpectationFailed":             417,
	"MisdirectedRequest":            421,
	"UnprocessableEntity":           422,
	"Locked":                        423,
	"FailedDependency":              424,
	"UpgradeRequired":               426,
	"PreconditionRequired":          428,
	"TooManyRequests":               429,
	"RequestHeaderFieldsTooLarge":   431,
	"InternalServerError":           500,
	"NotImplemented":                501,
	"BadGateway":                    502,
	"ServiceUnavailable":            503,
	"GatewayTimeout":                504,
	"HTTPVersionNotSupported":       505,
	"VariantAlsoNegotiates":         506,
	"InsufficientStorage":           507,
	"LoopDetected":                  508,
	"NotExtended":                   510,
	"NetworkAuthenticationRequired": 511,
}

func (HttpStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dffd274153c8a074, []int{0}
}

// Direct HTTP response for a client-facing error message which can be attached
// to an RPC error.
type DirectHttpResponse struct {
	// HTTP status code. If not set, RPC error code is used.
	Code HttpStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=istio.policy.v1beta1.HttpStatusCode" json:"code,omitempty"`
	// HTTP response body.
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// HTTP response headers.
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DirectHttpResponse) Reset()      { *m = DirectHttpResponse{} }
func (*DirectHttpResponse) ProtoMessage() {}
func (*DirectHttpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dffd274153c8a074, []int{0}
}
func (m *DirectHttpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectHttpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectHttpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectHttpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectHttpResponse.Merge(m, src)
}
func (m *DirectHttpResponse) XXX_Size() int {
	return m.Size()
}
func (m *DirectHttpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectHttpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DirectHttpResponse proto.InternalMessageInfo

func (m *DirectHttpResponse) GetCode() HttpStatusCode {
	if m != nil {
		return m.Code
	}
	return Empty
}

func (m *DirectHttpResponse) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *DirectHttpResponse) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func init() {
	proto.RegisterEnum("istio.policy.v1beta1.HttpStatusCode", HttpStatusCode_name, HttpStatusCode_value)
	proto.RegisterType((*DirectHttpResponse)(nil), "istio.policy.v1beta1.DirectHttpResponse")
	proto.RegisterMapType((map[string]string)(nil), "istio.policy.v1beta1.DirectHttpResponse.HeadersEntry")
}

func init() {
	proto.RegisterFile("policy/v1beta1/http_response.proto", fileDescriptor_dffd274153c8a074)
}

var fileDescriptor_dffd274153c8a074 = []byte{
	// 1045 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xcb, 0x6f, 0x14, 0xc7,
	0x13, 0xde, 0xd9, 0xe6, 0xe5, 0xc6, 0x98, 0xa6, 0x31, 0x3f, 0xfc, 0x83, 0x64, 0x64, 0xa1, 0x1c,
	0x50, 0x0e, 0xb6, 0x20, 0x8a, 0x84, 0xb8, 0x19, 0x63, 0x83, 0x15, 0xef, 0x62, 0xad, 0x77, 0x39,
	0xe4, 0x12, 0xb5, 0xa7, 0x6b, 0x77, 0x5b, 0xcc, 0x76, 0x0d, 0x3d, 0xb5, 0x0b, 0x93, 0x53, 0xfe,
	0x04, 0xf2, 0x7e, 0xbf, 0x0e, 0x49, 0x50, 0x04, 0x21, 0x51, 0x72, 0x48, 0xfe, 0x03, 0xf2, 0xf6,
	0x91, 0x63, 0x58, 0x2e, 0xb9, 0x85, 0x43, 0xde, 0x89, 0x92, 0xa8, 0x7b, 0x1f, 0x32, 0x0a, 0xb9,
	0x4d, 0xd7, 0xd4, 0x57, 0xf5, 0xd5, 0xf7, 0xd5, 0x4c, 0xf3, 0x23, 0x19, 0xa6, 0x26, 0x29, 0xe6,
	0x7b, 0xc7, 0x36, 0x80, 0xd4, 0xb1, 0xf9, 0x36, 0x51, 0xf6, 0x84, 0x83, 0x3c, 0x43, 0x9b, 0xc3,
	0x5c, 0xe6, 0x90, 0x50, 0x4e, 0x9b, 0x9c, 0x0c, 0xce, 0x0d, 0x32, 0xe7, 0x86, 0x99, 0x47, 0x7e,
	0x88, 0xb8, 0x3c, 0x6d, 0x1c, 0x24, 0x74, 0x96, 0x28, 0xab, 0x0d, 0x21, 0xf2, 0x04, 0xdf, 0x96,
	0xa0, 0x86, 0x99, 0x68, 0x36, 0x3a, 0x3a, 0x75, 0xfc, 0xa1, 0xb9, 0xfb, 0x61, 0xe7, 0x3c, 0x62,
	0x9d, 0x14, 0x75, 0xf3, 0x45, 0xd4, 0x50, 0x0b, 0x08, 0x29, 0xf9, 0xb6, 0x0d, 0xd4, 0xc5, 0x4c,
	0x79, 0x36, 0x3a, 0x3a, 0x51, 0x0b, 0xcf, 0xf2, 0x1c, 0xdf, 0xd9, 0x06, 0xa5, 0xc1, 0xe5, 0x33,
	0x6c, 0x96, 0x1d, 0xdd, 0x7d, 0xfc, 0xd1, 0xfb, 0x17, 0xfc, 0x37, 0x91, 0xb9, 0xb3, 0x03, 0xdc,
	0x92, 0x25, 0x57, 0xd4, 0x46, 0x55, 0x0e, 0x9d, 0xe4, 0x93, 0x5b, 0x5f, 0x48, 0xc1, 0xd9, 0x05,
	0x28, 0x02, 0xdb, 0x89, 0x9a, 0x7f, 0x94, 0xd3, 0x7c, 0x7b, 0x4f, 0xa5, 0x5d, 0x18, 0xf2, 0x18,
	0x1c, 0x4e, 0x96, 0x4f, 0x44, 0x0f, 0x7f, 0x36, 0xc1, 0xa7, 0xee, 0x65, 0x2e, 0x27, 0xf8, 0xf6,
	0xa5, 0x4e, 0x46, 0x85, 0x28, 0xc9, 0x49, 0xbe, 0x6b, 0x11, 0x2d, 0x19, 0xdb, 0x05, 0xa1, 0xe5,
	0x4e, 0x5e, 0x3e, 0xf7, 0x98, 0xb8, 0x19, 0xc9, 0x49, 0xbe, 0x73, 0xd1, 0x81, 0x22, 0xd0, 0xe2,
	0xf3, 0x48, 0xee, 0xe1, 0xbb, 0x16, 0x92, 0x04, 0x32, 0x7f, 0xfc, 0x22, 0x92, 0xb3, 0xfc, 0x70,
	0x15, 0xed, 0x42, 0x97, 0xda, 0xe8, 0x0c, 0x29, 0x32, 0x3d, 0x58, 0xb1, 0x4d, 0x74, 0x1d, 0x45,
	0x06, 0xad, 0xf8, 0x32, 0x92, 0x53, 0x7c, 0xa2, 0x8a, 0xbe, 0x2e, 0x58, 0x12, 0x5f, 0x45, 0x72,
	0x1f, 0x9f, 0xac, 0x41, 0x0e, 0x34, 0x0a, 0x7d, 0x1d, 0xc9, 0xfd, 0x7c, 0x6a, 0x4d, 0x39, 0x32,
	0x2a, 0x1d, 0x05, 0xbf, 0x89, 0xa4, 0xe0, 0xbb, 0x2b, 0xdd, 0x94, 0xcc, 0x80, 0xab, 0xf8, 0x36,
	0x92, 0xd3, 0x7c, 0xef, 0x42, 0xea, 0x40, 0xe9, 0xa2, 0x06, 0x19, 0x3a, 0xcf, 0x60, 0x33, 0x92,
	0xbb, 0xf9, 0x8e, 0x95, 0x4a, 0x23, 0x07, 0x2d, 0xfa, 0x21, 0x25, 0x80, 0xb2, 0x14, 0x16, 0xdb,
	0x68, 0x12, 0xc8, 0xc5, 0xb5, 0xb2, 0x3c, 0xc0, 0x45, 0x05, 0x7b, 0xa0, 0xd7, 0xc0, 0x75, 0x94,
	0x05, 0x4b, 0x69, 0x21, 0xae, 0x97, 0x25, 0xe7, 0xdb, 0x97, 0xb1, 0x6b, 0xb5, 0xf8, 0xa0, 0xec,
	0xc7, 0x5a, 0x07, 0x38, 0x47, 0x6d, 0x70, 0xe2, 0x46, 0xd9, 0x37, 0xaf, 0x22, 0x55, 0x50, 0x9b,
	0xa6, 0x01, 0x2d, 0x3e, 0x0c, 0x09, 0x8d, 0x1c, 0xd6, 0x1c, 0x5e, 0x2e, 0xc4, 0x47, 0x65, 0xf9,
	0x3f, 0xbe, 0xaf, 0x0e, 0x9d, 0x0c, 0x9d, 0x72, 0x45, 0x0d, 0x74, 0x30, 0x4f, 0x7c, 0x1c, 0xe2,
	0xe3, 0x2e, 0xe3, 0xf8, 0x27, 0x65, 0xb9, 0x97, 0xf3, 0x53, 0x4a, 0xd7, 0xe0, 0x62, 0x17, 0x72,
	0x12, 0x57, 0x98, 0x97, 0xa1, 0x61, 0xd5, 0x40, 0xb7, 0x27, 0x41, 0x8b, 0xa7, 0x99, 0x27, 0xbf,
	0xa6, 0x8a, 0x4e, 0x40, 0x5e, 0xec, 0x1a, 0x07, 0x5a, 0x3c, 0xc3, 0xbc, 0x7e, 0xcb, 0xe8, 0x36,
	0x8c, 0xd6, 0x60, 0xc5, 0xb3, 0xcc, 0x13, 0xa9, 0x22, 0x0d, 0x88, 0x3f, 0xc7, 0xc2, 0x6c, 0x40,
	0x6d, 0xd4, 0x55, 0xa4, 0x85, 0x34, 0xc5, 0x4b, 0xa0, 0xc5, 0xf3, 0x4c, 0x4a, 0xbe, 0xc7, 0x07,
	0x82, 0x53, 0x6a, 0x23, 0x05, 0xf1, 0x02, 0xf3, 0x5e, 0x05, 0xfe, 0xde, 0x2d, 0xb0, 0x64, 0x92,
	0xe0, 0xd1, 0xb8, 0xd7, 0x8b, 0xcc, 0x1b, 0x31, 0xa4, 0x58, 0x37, 0x1d, 0xc0, 0x2e, 0x89, 0x97,
	0x42, 0xc3, 0x45, 0xb4, 0xcd, 0xd4, 0x24, 0x24, 0x5e, 0x66, 0x72, 0x82, 0x6f, 0x3b, 0x83, 0x16,
	0xc4, 0x2b, 0x21, 0x7d, 0x15, 0x6c, 0x8b, 0xda, 0xe3, 0x1a, 0xaf, 0x32, 0x79, 0x90, 0xcb, 0x35,
	0x07, 0x09, 0x5a, 0x6d, 0x7c, 0xf9, 0x65, 0x65, 0x52, 0xd0, 0xe2, 0xb5, 0xd1, 0x78, 0x29, 0x2a,
	0x5d, 0x47, 0x5c, 0x55, 0xae, 0x05, 0xe2, 0x75, 0xe6, 0x85, 0x69, 0xd4, 0x56, 0x7c, 0x04, 0x6d,
	0x4b, 0xbc, 0xc1, 0xe4, 0xff, 0xf9, 0x74, 0xc3, 0xe6, 0xdd, 0x6c, 0xe0, 0x70, 0x05, 0xb4, 0x51,
	0xf5, 0x22, 0x03, 0xf1, 0x26, 0x93, 0x33, 0x7c, 0x7f, 0x4d, 0xd9, 0x16, 0x54, 0x91, 0xd6, 0x15,
	0x99, 0xbc, 0x69, 0xc2, 0x68, 0x6f, 0x31, 0x2f, 0xfb, 0xd2, 0xe5, 0x0c, 0x12, 0x52, 0x5b, 0x7a,
	0xbe, 0x1d, 0xc8, 0x54, 0x4c, 0x3e, 0xb0, 0x01, 0xc6, 0xf2, 0xbf, 0x13, 0x4a, 0x35, 0x6c, 0xe6,
	0x30, 0x81, 0x3c, 0xf7, 0x45, 0x96, 0x2c, 0x19, 0x2a, 0xc4, 0xbb, 0xcc, 0xef, 0xd3, 0x2a, 0x26,
	0x17, 0x40, 0x8b, 0xf7, 0x82, 0xba, 0x83, 0x62, 0xa7, 0x21, 0x03, 0xab, 0xc1, 0x26, 0x85, 0xb8,
	0x1a, 0x46, 0x69, 0x64, 0x2d, 0xa7, 0x34, 0x8c, 0x27, 0x7f, 0x3f, 0x30, 0xdf, 0x3a, 0xf9, 0xf8,
	0xd5, 0xb5, 0x00, 0xa8, 0x23, 0x56, 0x94, 0x2d, 0x86, 0x1c, 0x72, 0x71, 0x3d, 0x18, 0x32, 0x3c,
	0x0e, 0xbe, 0xe8, 0x65, 0x03, 0xa9, 0xce, 0xc7, 0xea, 0xdc, 0x08, 0x34, 0x57, 0x2c, 0x81, 0xb3,
	0x2a, 0x5d, 0x07, 0xd7, 0x03, 0xb7, 0xe4, 0x1c, 0x3a, 0xf1, 0x63, 0xd0, 0xbe, 0x8a, 0xb4, 0xd2,
	0xc9, 0x52, 0xf0, 0x1b, 0x03, 0x5a, 0xfc, 0xc4, 0x86, 0x5b, 0x76, 0x46, 0x11, 0x5c, 0x52, 0x85,
	0xf8, 0x39, 0xcc, 0xef, 0x71, 0x26, 0x81, 0x86, 0x55, 0x3d, 0x65, 0xd2, 0x20, 0xd8, 0x2f, 0x01,
	0x3e, 0x4c, 0x1b, 0x39, 0xfd, 0x2b, 0x93, 0x0f, 0xf0, 0x83, 0x67, 0xeb, 0xf5, 0xb5, 0xf3, 0xe0,
	0x72, 0x83, 0xd6, 0xab, 0x3c, 0xb2, 0x41, 0xfc, 0xc6, 0xe4, 0x21, 0x7e, 0xe0, 0xbc, 0x72, 0x46,
	0x59, 0x5a, 0x48, 0x73, 0xac, 0x42, 0x0b, 0xc9, 0x28, 0x82, 0x5c, 0xfc, 0x3e, 0xe4, 0x99, 0x77,
	0x9b, 0x4d, 0x93, 0x18, 0xb0, 0xb4, 0x4e, 0xe8, 0x54, 0x0b, 0xc4, 0x1f, 0x61, 0xcf, 0x57, 0x11,
	0xb3, 0xd3, 0x40, 0xc1, 0x02, 0xf1, 0x27, 0x1b, 0x7e, 0x5c, 0x4b, 0x97, 0xc9, 0x2b, 0xaa, 0xc5,
	0x5f, 0x4c, 0x1e, 0xe1, 0x0f, 0x56, 0x81, 0x2e, 0xa1, 0xbb, 0xf0, 0x1f, 0xbb, 0xf9, 0x37, 0x3b,
	0x55, 0xdf, 0xbc, 0x1d, 0x97, 0x6e, 0xdd, 0x8e, 0x4b, 0x77, 0x6f, 0xc7, 0xd1, 0x53, 0xfd, 0x38,
	0xba, 0xda, 0x8f, 0xa3, 0x9b, 0xfd, 0x38, 0xda, 0xec, 0xc7, 0xd1, 0x77, 0xfd, 0x38, 0xfa, 0xbe,
	0x1f, 0x97, 0xee, 0xf6, 0xe3, 0xe8, 0xca, 0x9d, 0xb8, 0xb4, 0x79, 0x27, 0x2e, 0xdd, 0xba, 0x13,
	0x97, 0x1e, 0x3f, 0x3c, 0xf8, 0xd9, 0x1a, 0x9c, 0x57, 0x99, 0x99, 0xbf, 0xf7, 0xaa, 0xf8, 0x34,
	0x8a, 0x36, 0x76, 0x84, 0x0b, 0xe2, 0x91, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x41, 0x68, 0xfb,
	0x9c, 0x46, 0x06, 0x00, 0x00,
}

func (x HttpStatusCode) String() string {
	s, ok := HttpStatusCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DirectHttpResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DirectHttpResponse)
	if !ok {
		that2, ok := that.(DirectHttpResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if this.Headers[i] != that1.Headers[i] {
			return false
		}
	}
	return true
}
func (this *DirectHttpResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1beta1.DirectHttpResponse{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%#v: %#v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	if this.Headers != nil {
		s = append(s, "Headers: "+mapStringForHeaders+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHttpResponse(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DirectHttpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectHttpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectHttpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			v := m.Headers[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHttpResponse(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHttpResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHttpResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintHttpResponse(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintHttpResponse(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHttpResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovHttpResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DirectHttpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHttpResponse(uint64(m.Code))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovHttpResponse(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHttpResponse(uint64(len(k))) + 1 + len(v) + sovHttpResponse(uint64(len(v)))
			n += mapEntrySize + 1 + sovHttpResponse(uint64(mapEntrySize))
		}
	}
	return n
}

func sovHttpResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHttpResponse(x uint64) (n int) {
	return sovHttpResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DirectHttpResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%v: %v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	s := strings.Join([]string{`&DirectHttpResponse{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Headers:` + mapStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHttpResponse(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DirectHttpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectHttpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectHttpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= HttpStatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHttpResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHttpResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHttpResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHttpResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHttpResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHttpResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHttpResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHttpResponse
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHttpResponse
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHttpResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHttpResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHttpResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHttpResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttpResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttpResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHttpResponse
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthHttpResponse
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHttpResponse
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHttpResponse(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthHttpResponse
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHttpResponse = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHttpResponse   = fmt.Errorf("proto: integer overflow")
)
