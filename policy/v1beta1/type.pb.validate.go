// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: policy/v1beta1/type.proto

package v1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Value) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Value.(type) {

	case *Value_StringValue:
		// no validation rules for StringValue

	case *Value_Int64Value:
		// no validation rules for Int64Value

	case *Value_DoubleValue:
		// no validation rules for DoubleValue

	case *Value_BoolValue:
		// no validation rules for BoolValue

	case *Value_IpAddressValue:

		if v, ok := interface{}(m.GetIpAddressValue()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "IpAddressValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_TimestampValue:

		if v, ok := interface{}(m.GetTimestampValue()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "TimestampValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_DurationValue:

		if v, ok := interface{}(m.GetDurationValue()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "DurationValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_EmailAddressValue:

		if v, ok := interface{}(m.GetEmailAddressValue()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "EmailAddressValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_DnsNameValue:

		if v, ok := interface{}(m.GetDnsNameValue()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "DnsNameValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_UriValue:

		if v, ok := interface{}(m.GetUriValue()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "UriValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValueValidationError is the validation error returned by Value.Validate if
// the designated constraints aren't met.
type ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueValidationError) ErrorName() string { return "ValueValidationError" }

// Error satisfies the builtin error interface
func (e ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueValidationError{}

// Validate checks the field values on IPAddress with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IPAddress) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// IPAddressValidationError is the validation error returned by
// IPAddress.Validate if the designated constraints aren't met.
type IPAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPAddressValidationError) ErrorName() string { return "IPAddressValidationError" }

// Error satisfies the builtin error interface
func (e IPAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPAddressValidationError{}

// Validate checks the field values on Duration with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Duration) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return DurationValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DurationValidationError is the validation error returned by
// Duration.Validate if the designated constraints aren't met.
type DurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationValidationError) ErrorName() string { return "DurationValidationError" }

// Error satisfies the builtin error interface
func (e DurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDuration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationValidationError{}

// Validate checks the field values on TimeStamp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TimeStamp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return TimeStampValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TimeStampValidationError is the validation error returned by
// TimeStamp.Validate if the designated constraints aren't met.
type TimeStampValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeStampValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeStampValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeStampValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeStampValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeStampValidationError) ErrorName() string { return "TimeStampValidationError" }

// Error satisfies the builtin error interface
func (e TimeStampValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeStamp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeStampValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeStampValidationError{}

// Validate checks the field values on DNSName with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DNSName) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// DNSNameValidationError is the validation error returned by DNSName.Validate
// if the designated constraints aren't met.
type DNSNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DNSNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DNSNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DNSNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DNSNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DNSNameValidationError) ErrorName() string { return "DNSNameValidationError" }

// Error satisfies the builtin error interface
func (e DNSNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDNSName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DNSNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DNSNameValidationError{}

// Validate checks the field values on EmailAddress with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EmailAddress) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// EmailAddressValidationError is the validation error returned by
// EmailAddress.Validate if the designated constraints aren't met.
type EmailAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailAddressValidationError) ErrorName() string { return "EmailAddressValidationError" }

// Error satisfies the builtin error interface
func (e EmailAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailAddressValidationError{}

// Validate checks the field values on Uri with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Uri) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// UriValidationError is the validation error returned by Uri.Validate if the
// designated constraints aren't met.
type UriValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UriValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UriValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UriValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UriValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UriValidationError) ErrorName() string { return "UriValidationError" }

// Error satisfies the builtin error interface
func (e UriValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUri.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UriValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UriValidationError{}
