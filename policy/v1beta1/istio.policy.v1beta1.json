{
  "openapi": "3.0.1",
  "info": {
    "title": "Describes the rules used to configure Mixer's policy and telemetry features.",
    "version": "v1beta1"
  },
  "components": {
    "schemas": {
      "istio.policy.v1beta1.Action": {
        "description": "Action describes which [Handler][istio.policy.v1beta1.Handler] to invoke and what data to pass to it for processing.",
        "properties": {
          "handler": {
            "description": "Required. Fully qualified name of the handler to invoke. Must match the `name` of a [Handler][istio.policy.v1beta1.Handler.name].",
            "type": "string"
          },
          "instances": {
            "description": "Required. Each value must match the fully qualified name of the [Instance][istio.policy.v1beta1.Instance.name]s. Referenced instances are evaluated by resolving the attributes/literals for all the fields. The constructed objects are then passed to the `handler` referenced within this action.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Optional. A handle to refer to the results of the action.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.AttributeManifest": {
        "description": "AttributeManifest describes a set of Attributes produced by some component of an Istio deployment.",
        "properties": {
          "attributes": {
            "additionalProperties": {
              "properties": {
                "description": {
                  "description": "Optional. A human-readable description of the attribute's purpose.",
                  "type": "string"
                },
                "value_type": {
                  "description": "Required. The type of data carried by this attribute.",
                  "enum": [
                    [
                      "VALUE_TYPE_UNSPECIFIED",
                      "STRING",
                      "INT64",
                      "DOUBLE",
                      "BOOL",
                      "TIMESTAMP",
                      "IP_ADDRESS",
                      "EMAIL_ADDRESS",
                      "URI",
                      "DNS_NAME",
                      "DURATION",
                      "STRING_MAP"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The set of attributes this Istio component will be responsible for producing at runtime. We map from attribute name to the attribute's specification. The name of an attribute, which is how attributes are referred to in aspect configuration, must conform to:",
            "type": "object"
          },
          "name": {
            "description": "Required. Name of the component producing these attributes. This can be the proxy (with the canonical name `istio-proxy`) or the name of an `attributes` kind adapter in Mixer.",
            "type": "string"
          },
          "revision": {
            "description": "Optional. The revision of this document. Assigned by server.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Authentication": {
        "description": "Authentication allows the operator to specify the authentication of connections to out-of-process infrastructure backend.",
        "properties": {
          "auth_type": {
            "oneOf": [
              {
                "description": "Originate a TLS connection to the adapter and present an auth token in each call for client authentication.",
                "properties": {
                  "ca_certificates": {
                    "description": "The path to the file holding additional CA certificates to well known public certs.",
                    "type": "string"
                  },
                  "server_name": {
                    "description": "Used to configure mixer TLS client to verify the hostname on the returned certificates. It is also included in the client's handshake to support SNI.",
                    "type": "string"
                  },
                  "token_source": {
                    "oneOf": [
                      {
                        "description": "The path to the file holding the auth token (password, jwt token, api key, etc).",
                        "type": "string"
                      },
                      {
                        "description": "Oauth config to fetch access token from auth provider.",
                        "properties": {
                          "client_id": {
                            "description": "REQUIRED. OAuth client id for mixer.",
                            "type": "string"
                          },
                          "client_secret": {
                            "description": "REQUIRED. The path to the file holding the client secret for oauth.",
                            "type": "string"
                          },
                          "endpoint_params": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Additional parameters for requests to the token endpoint.",
                            "type": "object"
                          },
                          "scopes": {
                            "description": "List of requested permissions.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "token_url": {
                            "description": "REQUIRED. The Resource server's token endpoint URL.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "token_type": {
                    "oneOf": [
                      {
                        "description": "Access token is passed as authorization header.",
                        "enum": [
                          [
                            "PLAIN",
                            "BEARER"
                          ]
                        ],
                        "type": "string"
                      },
                      {
                        "description": "Customized header key to hold access token, e.g. x-api-key. Token will be passed as what it is.",
                        "type": "string"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              {
                "description": "Secure connections to the adapter using mutual TLS by presenting client certificates for authentication.",
                "properties": {
                  "ca_certificates": {
                    "description": "The path to the file holding additional CA certificates that are needed to verify the presented adapter certificates. By default Mixer should already include Istio CA certificates and system certificates in cert pool.",
                    "type": "string"
                  },
                  "client_certificate": {
                    "description": "The path to the file holding client certificate for mutual TLS. If omitted, the default Mixer certificates will be used.",
                    "type": "string"
                  },
                  "private_key": {
                    "description": "The path to the file holding the private key for mutual TLS. If omitted, the default Mixer private key will be used.",
                    "type": "string"
                  },
                  "server_name": {
                    "description": "Used to configure mixer mutual TLS client to supply server name for SNI. It is not used to verify the hostname of the peer certificate, since Istio verifies whitelisted SAN fields in mutual TLS.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Connection": {
        "description": "Connection allows the operator to specify the endpoint for out-of-process infrastructure backend. Connection is part of the handler custom resource and is specified alongside adapter specific configuration.",
        "properties": {
          "address": {
            "description": "The address of the backend.",
            "type": "string"
          },
          "authentication": {
            "$ref": "#/components/schemas/istio.policy.v1beta1.Authentication"
          },
          "timeout": {
            "description": "Timeout for remote calls to the backend.",
            "properties": {
              "nanos": {
                "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
                "format": "int32",
                "type": "integer"
              },
              "seconds": {
                "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.DNSName": {
        "description": "An instance field of type DNSName denotes that the expression for the field must evaluate to [ValueType.DNS_NAME][istio.policy.v1beta1.ValueType.DNS_NAME]",
        "properties": {
          "value": {
            "description": "DNSName encoded as string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.DirectHttpResponse": {
        "description": "Direct HTTP response for a client-facing error message which can be attached to an RPC error.",
        "properties": {
          "body": {
            "description": "HTTP response body.",
            "type": "string"
          },
          "code": {
            "description": "Optional HTTP status code. If not set, RPC error code is used.",
            "enum": [
              [
                "Empty",
                "Continue",
                "OK",
                "Created",
                "Accepted",
                "NonAuthoritativeInformation",
                "NoContent",
                "ResetContent",
                "PartialContent",
                "MultiStatus",
                "AlreadyReported",
                "IMUsed",
                "MultipleChoices",
                "MovedPermanently",
                "Found",
                "SeeOther",
                "NotModified",
                "UseProxy",
                "TemporaryRedirect",
                "PermanentRedirect",
                "BadRequest",
                "Unauthorized",
                "PaymentRequired",
                "Forbidden",
                "NotFound",
                "MethodNotAllowed",
                "NotAcceptable",
                "ProxyAuthenticationRequired",
                "RequestTimeout",
                "Conflict",
                "Gone",
                "LengthRequired",
                "PreconditionFailed",
                "PayloadTooLarge",
                "URITooLong",
                "UnsupportedMediaType",
                "RangeNotSatisfiable",
                "ExpectationFailed",
                "MisdirectedRequest",
                "UnprocessableEntity",
                "Locked",
                "FailedDependency",
                "UpgradeRequired",
                "PreconditionRequired",
                "TooManyRequests",
                "RequestHeaderFieldsTooLarge",
                "InternalServerError",
                "NotImplemented",
                "BadGateway",
                "ServiceUnavailable",
                "GatewayTimeout",
                "HTTPVersionNotSupported",
                "VariantAlsoNegotiates",
                "InsufficientStorage",
                "LoopDetected",
                "NotExtended",
                "NetworkAuthenticationRequired"
              ]
            ],
            "type": "string"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional HTTP response headers.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Duration": {
        "description": "An instance field of type Duration denotes that the expression for the field must evaluate to [ValueType.DURATION][istio.policy.v1beta1.ValueType.DURATION]",
        "properties": {
          "value": {
            "description": "Duration encoded as google.protobuf.Duration.",
            "properties": {
              "nanos": {
                "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
                "format": "int32",
                "type": "integer"
              },
              "seconds": {
                "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.EmailAddress": {
        "description": "DO NOT USE !! Under Development An instance field of type EmailAddress denotes that the expression for the field must evaluate to [ValueType.EMAIL_ADDRESS][istio.policy.v1beta1.ValueType.EMAIL_ADDRESS]",
        "properties": {
          "value": {
            "description": "EmailAddress encoded as string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.FractionalPercent": {
        "properties": {
          "denominator": {
            "description": "Specifies the denominator. If the denominator specified is less than the numerator, the final fractional percentage is capped at 1 (100%).",
            "enum": [
              [
                "HUNDRED",
                "TEN_THOUSAND"
              ]
            ],
            "type": "string"
          },
          "numerator": {
            "description": "Specifies the numerator. Defaults to 0.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Handler": {
        "description": "Handler allows the operator to configure a specific adapter implementation. Each adapter implementation defines its own `params` proto.",
        "properties": {
          "adapter": {
            "description": "Required. The name of a specific adapter implementation. For referencing compiled-in adapters, use the `compiled_adapter` field instead.",
            "type": "string"
          },
          "compiled_adapter": {
            "description": "Required. The name of the compiled in adapter this handler instantiates. For referencing non compiled-in adapters, use the `adapter` field instead.",
            "type": "string"
          },
          "connection": {
            "$ref": "#/components/schemas/istio.policy.v1beta1.Connection"
          },
          "name": {
            "description": "Required. Must be unique in the entire Mixer configuration. Used by [Actions][istio.policy.v1beta1.Action.handler] to refer to this handler.",
            "type": "string"
          },
          "params": {
            "description": "Optional. Depends on adapter implementation. Struct representation of a proto defined by the adapter implementation; this varies depending on the value of field `adapter`.",
            "properties": {
              "fields": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.HttpStatusCode": {
        "description": "HTTP response codes. For more details: http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml",
        "enum": [
          [
            "Empty",
            "Continue",
            "OK",
            "Created",
            "Accepted",
            "NonAuthoritativeInformation",
            "NoContent",
            "ResetContent",
            "PartialContent",
            "MultiStatus",
            "AlreadyReported",
            "IMUsed",
            "MultipleChoices",
            "MovedPermanently",
            "Found",
            "SeeOther",
            "NotModified",
            "UseProxy",
            "TemporaryRedirect",
            "PermanentRedirect",
            "BadRequest",
            "Unauthorized",
            "PaymentRequired",
            "Forbidden",
            "NotFound",
            "MethodNotAllowed",
            "NotAcceptable",
            "ProxyAuthenticationRequired",
            "RequestTimeout",
            "Conflict",
            "Gone",
            "LengthRequired",
            "PreconditionFailed",
            "PayloadTooLarge",
            "URITooLong",
            "UnsupportedMediaType",
            "RangeNotSatisfiable",
            "ExpectationFailed",
            "MisdirectedRequest",
            "UnprocessableEntity",
            "Locked",
            "FailedDependency",
            "UpgradeRequired",
            "PreconditionRequired",
            "TooManyRequests",
            "RequestHeaderFieldsTooLarge",
            "InternalServerError",
            "NotImplemented",
            "BadGateway",
            "ServiceUnavailable",
            "GatewayTimeout",
            "HTTPVersionNotSupported",
            "VariantAlsoNegotiates",
            "InsufficientStorage",
            "LoopDetected",
            "NotExtended",
            "NetworkAuthenticationRequired"
          ]
        ],
        "type": "string"
      },
      "istio.policy.v1beta1.IPAddress": {
        "description": "An instance field of type IPAddress denotes that the expression for the field must evaluate to [ValueType.IP_ADDRESS][istio.policy.v1beta1.ValueType.IP_ADDRESS]",
        "properties": {
          "value": {
            "description": "IPAddress encoded as bytes.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Instance": {
        "description": "An Instance tells Mixer how to create instances for particular template.",
        "properties": {
          "attribute_bindings": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Defines attribute bindings to map the output of attribute-producing adapters back into the attribute space. The variable `output` refers to the output template instance produced by the adapter. The following example derives `source.namespace` from `source.uid` in the context of Kubernetes: ```yaml params: # Pass the required attribute data to the adapter source_uid: source.uid | \"\" attribute_bindings: # Fill the new attributes from the adapter produced output source.namespace: output.source_namespace ```",
            "type": "object"
          },
          "compiled_template": {
            "description": "Required. The name of the compiled in template this instance creates instances for. For referencing non compiled-in templates, use the `template` field instead.",
            "type": "string"
          },
          "name": {
            "description": "Required. The name of this instance",
            "type": "string"
          },
          "params": {
            "description": "Optional. Depends on adapter implementation. Struct representation of a proto defined by the adapter implementation; this varies depending on the value of field `adapter`.",
            "properties": {
              "fields": {
                "additionalProperties": true,
                "type": "object"
              }
            }
          },
          "template": {
            "description": "Required. The name of the template this instance creates instances for. For referencing compiled-in templates, use the `compiled_template` field instead.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Mutual": {
        "description": "Mutual let operator specify TLS configuration for Mixer as client if mutual TLS is used to secure connection to adapter backend.",
        "properties": {
          "ca_certificates": {
            "description": "The path to the file holding additional CA certificates that are needed to verify the presented adapter certificates. By default Mixer should already include Istio CA certificates and system certificates in cert pool.",
            "type": "string"
          },
          "client_certificate": {
            "description": "The path to the file holding client certificate for mutual TLS. If omitted, the default Mixer certificates will be used.",
            "type": "string"
          },
          "private_key": {
            "description": "The path to the file holding the private key for mutual TLS. If omitted, the default Mixer private key will be used.",
            "type": "string"
          },
          "server_name": {
            "description": "Used to configure mixer mutual TLS client to supply server name for SNI. It is not used to verify the hostname of the peer certificate, since Istio verifies whitelisted SAN fields in mutual TLS.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.OAuth": {
        "description": "OAuth let operator specify config to fetch access token via oauth when using TLS for connection to the backend.",
        "properties": {
          "client_id": {
            "description": "REQUIRED. OAuth client id for mixer.",
            "type": "string"
          },
          "client_secret": {
            "description": "REQUIRED. The path to the file holding the client secret for oauth.",
            "type": "string"
          },
          "endpoint_params": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional parameters for requests to the token endpoint.",
            "type": "object"
          },
          "scopes": {
            "description": "List of requested permissions.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token_url": {
            "description": "REQUIRED. The Resource server's token endpoint URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.RandomSampling": {
        "properties": {
          "attribute_expression": {
            "description": "Specifies an attribute expression to use to override the numerator in the `percent_sampled` field. If this value is set, but no value is found OR if that value is not a numeric value, then the derived sampling rate will be 0 (meaning no `Action`s are executed for a `Rule`).",
            "type": "string"
          },
          "percent_sampled": {
            "$ref": "#/components/schemas/istio.policy.v1beta1.FractionalPercent"
          },
          "use_independent_randomness": {
            "description": "By default sampling will be based on the value of the request header `x-request-id`. This behavior will cause consistent sampling across `Rule`s and for the full trace of a request through a mesh (across hosts). If that value is not present and/or `use_independent_randomness` is set to true, the sampling will be done based on the value of attribute specified in `attribute_epxression`. If that attribute does not exist, the system will behave as if the sampling rate was 0 (meaning no `Action`s are executed for a `Rule`).",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.RateLimitSampling": {
        "properties": {
          "max_unsampled_entries": {
            "description": "Number of entries to allow during the `sampling_duration` before sampling is enforced.",
            "format": "int64",
            "type": "integer"
          },
          "sampling_duration": {
            "description": "Window in which to enforce the sampling rate.",
            "properties": {
              "nanos": {
                "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
                "format": "int32",
                "type": "integer"
              },
              "seconds": {
                "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "sampling_rate": {
            "description": "The rate at which to sample entries once the unsampled limit has been reached. Sampling will be enforced as 1 per every `sampling_rate` entries allowed.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Rule": {
        "description": "A Rule is a selector and a set of intentions to be executed when the selector is `true`",
        "properties": {
          "actions": {
            "$ref": "#/components/schemas/istio.policy.v1beta1.Action"
          },
          "match": {
            "description": "Required. Match is an attribute based predicate. When Mixer receives a request it evaluates the match expression and executes all the associated `actions` if the match evaluates to true.",
            "type": "string"
          },
          "request_header_operations": {
            "description": "Optional. Templatized operations on the request headers using values produced by the rule actions. Require the check action result to be OK.",
            "items": {
              "description": "A template for an HTTP header manipulation. Values in the template are expressions that may reference action outputs by name. For example, if an action `x` produces an output with a field `f`, then the header value expressions may use attribute `x.output.f` to reference the field value:",
              "properties": {
                "name": {
                  "description": "Required. Header name literal value.",
                  "type": "string"
                },
                "operation": {
                  "description": "Optional. Header operation type. Default operation is to replace the value of the header by name.",
                  "enum": [
                    [
                      "REPLACE",
                      "REMOVE",
                      "APPEND"
                    ]
                  ],
                  "type": "string"
                },
                "values": {
                  "description": "Optional. Header value expressions.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "response_header_operations": {
            "description": "Optional. Templatized operations on the response headers using values produced by the rule actions. Require the check action result to be OK.",
            "items": {
              "description": "A template for an HTTP header manipulation. Values in the template are expressions that may reference action outputs by name. For example, if an action `x` produces an output with a field `f`, then the header value expressions may use attribute `x.output.f` to reference the field value:",
              "properties": {
                "name": {
                  "description": "Required. Header name literal value.",
                  "type": "string"
                },
                "operation": {
                  "description": "Optional. Header operation type. Default operation is to replace the value of the header by name.",
                  "enum": [
                    [
                      "REPLACE",
                      "REMOVE",
                      "APPEND"
                    ]
                  ],
                  "type": "string"
                },
                "values": {
                  "description": "Optional. Header value expressions.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "sampling": {
            "$ref": "#/components/schemas/istio.policy.v1beta1.Sampling"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Sampling": {
        "properties": {
          "random": {
            "$ref": "#/components/schemas/istio.policy.v1beta1.RandomSampling"
          },
          "rate_limit": {
            "$ref": "#/components/schemas/istio.policy.v1beta1.RateLimitSampling"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.TimeStamp": {
        "description": "An instance field of type TimeStamp denotes that the expression for the field must evaluate to [ValueType.TIMESTAMP][istio.policy.v1beta1.ValueType.TIMESTAMP]",
        "properties": {
          "value": {
            "description": "TimeStamp encoded as google.protobuf.Timestamp.",
            "properties": {
              "nanos": {
                "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
                "format": "int32",
                "type": "integer"
              },
              "seconds": {
                "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Tls": {
        "description": "Tls let operator specify client authentication setting when TLS is used for connection to the backend.",
        "properties": {
          "ca_certificates": {
            "description": "The path to the file holding additional CA certificates to well known public certs.",
            "type": "string"
          },
          "server_name": {
            "description": "Used to configure mixer TLS client to verify the hostname on the returned certificates. It is also included in the client's handshake to support SNI.",
            "type": "string"
          },
          "token_source": {
            "oneOf": [
              {
                "description": "The path to the file holding the auth token (password, jwt token, api key, etc).",
                "type": "string"
              },
              {
                "description": "Oauth config to fetch access token from auth provider.",
                "properties": {
                  "client_id": {
                    "description": "REQUIRED. OAuth client id for mixer.",
                    "type": "string"
                  },
                  "client_secret": {
                    "description": "REQUIRED. The path to the file holding the client secret for oauth.",
                    "type": "string"
                  },
                  "endpoint_params": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Additional parameters for requests to the token endpoint.",
                    "type": "object"
                  },
                  "scopes": {
                    "description": "List of requested permissions.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "token_url": {
                    "description": "REQUIRED. The Resource server's token endpoint URL.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          },
          "token_type": {
            "oneOf": [
              {
                "description": "Access token is passed as authorization header.",
                "enum": [
                  [
                    "PLAIN",
                    "BEARER"
                  ]
                ],
                "type": "string"
              },
              {
                "description": "Customized header key to hold access token, e.g. x-api-key. Token will be passed as what it is.",
                "type": "string"
              }
            ]
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Uri": {
        "description": "DO NOT USE !! Under Development An instance field of type Uri denotes that the expression for the field must evaluate to [ValueType.URI][istio.policy.v1beta1.ValueType.URI]",
        "properties": {
          "value": {
            "description": "Uri encoded as string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.Value": {
        "description": "An instance field of type Value denotes that the expression for the field is of dynamic type and can evaluate to any [ValueType][istio.policy.v1beta1.ValueType] enum values. For example, when authoring an instance configuration for a template that has a field `data` of type `istio.policy.v1beta1.Value`, both of the following expressions are valid `data: source.ip | ip(\"0.0.0.0\")`, `data: request.id | \"\"`; the resulting type is either ValueType.IP_ADDRESS or ValueType.STRING for the two cases respectively.",
        "properties": {
          "value": {
            "oneOf": [
              {
                "description": "Used for values of type STRING",
                "type": "string"
              },
              {
                "description": "Used for values of type INT64",
                "format": "int64",
                "type": "integer"
              },
              {
                "description": "Used for values of type DOUBLE",
                "type": "number"
              },
              {
                "description": "Used for values of type BOOL",
                "type": "boolean"
              },
              {
                "description": "Used for values of type IPAddress",
                "properties": {
                  "value": {
                    "description": "IPAddress encoded as bytes.",
                    "format": "byte",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "description": "Used for values of type TIMESTAMP",
                "properties": {
                  "value": {
                    "description": "TimeStamp encoded as google.protobuf.Timestamp.",
                    "properties": {
                      "nanos": {
                        "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "seconds": {
                        "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              {
                "description": "Used for values of type DURATION",
                "properties": {
                  "value": {
                    "description": "Duration encoded as google.protobuf.Duration.",
                    "properties": {
                      "nanos": {
                        "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "seconds": {
                        "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              {
                "description": "Used for values of type EmailAddress",
                "properties": {
                  "value": {
                    "description": "EmailAddress encoded as string.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "description": "Used for values of type DNSName",
                "properties": {
                  "value": {
                    "description": "DNSName encoded as string.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "description": "Used for values of type Uri",
                "properties": {
                  "value": {
                    "description": "Uri encoded as string.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "istio.policy.v1beta1.ValueType": {
        "description": "ValueType describes the types that values in the Istio system can take. These are used to describe the type of Attributes at run time, describe the type of the result of evaluating an expression, and to describe the runtime type of fields of other descriptors.",
        "enum": [
          [
            "VALUE_TYPE_UNSPECIFIED",
            "STRING",
            "INT64",
            "DOUBLE",
            "BOOL",
            "TIMESTAMP",
            "IP_ADDRESS",
            "EMAIL_ADDRESS",
            "URI",
            "DNS_NAME",
            "DURATION",
            "STRING_MAP"
          ]
        ],
        "type": "string"
      }
    }
  }
}