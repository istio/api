// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: policy/v1beta1/cfg.proto

package v1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on AttributeManifest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AttributeManifest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Revision

	// no validation rules for Name

	// no validation rules for Attributes

	return nil
}

// AttributeManifestValidationError is the validation error returned by
// AttributeManifest.Validate if the designated constraints aren't met.
type AttributeManifestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeManifestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeManifestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeManifestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeManifestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeManifestValidationError) ErrorName() string {
	return "AttributeManifestValidationError"
}

// Error satisfies the builtin error interface
func (e AttributeManifestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeManifest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeManifestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeManifestValidationError{}

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Match

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRequestHeaderOperations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("RequestHeaderOperations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResponseHeaderOperations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("ResponseHeaderOperations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetSampling()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "Sampling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Action) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Handler

	// no validation rules for Name

	return nil
}

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Instance) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for CompiledTemplate

	// no validation rules for Template

	if v, ok := interface{}(m.GetParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return InstanceValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AttributeBindings

	return nil
}

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on Handler with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Handler) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for CompiledAdapter

	// no validation rules for Adapter

	if v, ok := interface{}(m.GetParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HandlerValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetConnection()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HandlerValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// HandlerValidationError is the validation error returned by Handler.Validate
// if the designated constraints aren't met.
type HandlerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandlerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandlerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandlerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandlerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandlerValidationError) ErrorName() string { return "HandlerValidationError" }

// Error satisfies the builtin error interface
func (e HandlerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandler.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandlerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandlerValidationError{}

// Validate checks the field values on Connection with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Connection) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	if v, ok := interface{}(m.GetTimeout()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConnectionValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConnectionValidationError is the validation error returned by
// Connection.Validate if the designated constraints aren't met.
type ConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionValidationError) ErrorName() string { return "ConnectionValidationError" }

// Error satisfies the builtin error interface
func (e ConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionValidationError{}

// Validate checks the field values on Sampling with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Sampling) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRandom()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return SamplingValidationError{
				field:  "Random",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRateLimit()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return SamplingValidationError{
				field:  "RateLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SamplingValidationError is the validation error returned by
// Sampling.Validate if the designated constraints aren't met.
type SamplingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SamplingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SamplingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SamplingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SamplingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SamplingValidationError) ErrorName() string { return "SamplingValidationError" }

// Error satisfies the builtin error interface
func (e SamplingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSampling.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SamplingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SamplingValidationError{}

// Validate checks the field values on RandomSampling with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RandomSampling) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AttributeExpression

	if v, ok := interface{}(m.GetPercentSampled()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return RandomSamplingValidationError{
				field:  "PercentSampled",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UseIndependentRandomness

	return nil
}

// RandomSamplingValidationError is the validation error returned by
// RandomSampling.Validate if the designated constraints aren't met.
type RandomSamplingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RandomSamplingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RandomSamplingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RandomSamplingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RandomSamplingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RandomSamplingValidationError) ErrorName() string { return "RandomSamplingValidationError" }

// Error satisfies the builtin error interface
func (e RandomSamplingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRandomSampling.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RandomSamplingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RandomSamplingValidationError{}

// Validate checks the field values on RateLimitSampling with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RateLimitSampling) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSamplingDuration()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return RateLimitSamplingValidationError{
				field:  "SamplingDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxUnsampledEntries

	// no validation rules for SamplingRate

	return nil
}

// RateLimitSamplingValidationError is the validation error returned by
// RateLimitSampling.Validate if the designated constraints aren't met.
type RateLimitSamplingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateLimitSamplingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateLimitSamplingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateLimitSamplingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateLimitSamplingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateLimitSamplingValidationError) ErrorName() string {
	return "RateLimitSamplingValidationError"
}

// Error satisfies the builtin error interface
func (e RateLimitSamplingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateLimitSampling.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateLimitSamplingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateLimitSamplingValidationError{}

// Validate checks the field values on FractionalPercent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FractionalPercent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Numerator

	// no validation rules for Denominator

	return nil
}

// FractionalPercentValidationError is the validation error returned by
// FractionalPercent.Validate if the designated constraints aren't met.
type FractionalPercentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FractionalPercentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FractionalPercentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FractionalPercentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FractionalPercentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FractionalPercentValidationError) ErrorName() string {
	return "FractionalPercentValidationError"
}

// Error satisfies the builtin error interface
func (e FractionalPercentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFractionalPercent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FractionalPercentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FractionalPercentValidationError{}

// Validate checks the field values on AttributeManifest_AttributeInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AttributeManifest_AttributeInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Description

	// no validation rules for ValueType

	return nil
}

// AttributeManifest_AttributeInfoValidationError is the validation error
// returned by AttributeManifest_AttributeInfo.Validate if the designated
// constraints aren't met.
type AttributeManifest_AttributeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeManifest_AttributeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeManifest_AttributeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeManifest_AttributeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeManifest_AttributeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeManifest_AttributeInfoValidationError) ErrorName() string {
	return "AttributeManifest_AttributeInfoValidationError"
}

// Error satisfies the builtin error interface
func (e AttributeManifest_AttributeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeManifest_AttributeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeManifest_AttributeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeManifest_AttributeInfoValidationError{}

// Validate checks the field values on Rule_HeaderOperationTemplate with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Rule_HeaderOperationTemplate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Operation

	return nil
}

// Rule_HeaderOperationTemplateValidationError is the validation error returned
// by Rule_HeaderOperationTemplate.Validate if the designated constraints
// aren't met.
type Rule_HeaderOperationTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Rule_HeaderOperationTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Rule_HeaderOperationTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Rule_HeaderOperationTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Rule_HeaderOperationTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Rule_HeaderOperationTemplateValidationError) ErrorName() string {
	return "Rule_HeaderOperationTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e Rule_HeaderOperationTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule_HeaderOperationTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Rule_HeaderOperationTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Rule_HeaderOperationTemplateValidationError{}
