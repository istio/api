// Copyright 2017 Istio Authors
// vim: set expandtab ts=2 sw=2:
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package istio.galley.v1;

import "google/rpc/status.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

// Galley follows
// the Kubenertes API server delegation and resource model.
// /apiGroup/version/objecttype/{namespace}/objectname  -->
//
// It generalizes the concept of namespace to an arbitrary grouping.
//
// /apiGroup/version/objecttype/{objectGroup}/objectname
// 
// api_group = /mixer/v1  or
// api_group = /proxy/v1
service Galley {
  // Get a single object.
  rpc GetObject(GetObjectRequest) returns (Object) {
    option (google.api.http) = {
      get: "/{meta.api_group}/{meta.api_group_version}/{meta.object_type}/{meta.object_group}/{meta.name}"
    };
  };

  // Get a list of objects.
  // Other arguments like meta.object_group, meta.name are optional
  // This lets the caller list all objects of a type, or all objects of a type
  // that is within an object group.
  rpc ListObjects(ListObjectsRequest) returns (ObjectList) {
    option (google.api.http) = {
      // meta.object_group can be specified as a query parameter
      get: "/{meta.api_group}/{meta.api_group_version}/{meta.object_type}"
      additional_bindings: {
        get: "/{meta.api_group}/{meta.api_group_version}/{meta.object_type}/{meta.object_group}"
      };
    };
  };

  // Get a list of object types.
  // Lists all object types or all object types 
  // within an api group.
  rpc ListObjectTypes(ListObjectTypesRequest) returns (ObjectTypeList) {
    option (google.api.http) = {
      get: "/{meta.api_group}/{meta.api_group_version}"
      additional_bindings: {
        get: "/"
      };
    };
  };

  // Create an object. This may result in configuration validation errors.
  // Referential integrity should be maximally enforced, except where not possible or desirable.
  rpc CreateObject(ObjectRequest) returns (Object) {
    option (google.api.http) = {
      post: "/{meta.api_group}/{meta.api_group_version}/{meta.object_type}/{meta.object_group}"
      body: "source_data"
    };
  };

  // Update a single object. May return validation errors.
  rpc UpdateObject(ObjectRequest) returns (Object) {
    option (google.api.http) = {
      put: "/{meta.api_group}/{meta.api_group_version}/{meta.object_type}/{meta.object_group}/{meta.name}"
      body: "source_data"
    };
  };

  // Delete a single object. May return validation errors.
  rpc DeleteObject(DeleteObjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/{meta.api_group}/{meta.api_group_version}/{meta.object_type}/{meta.object_group}/{meta.name}"
    };
  };
};


// Watcher service is designed to efficiently watch mutiple subtrees of the resource tree.
service Watcher { 
  // Watch watches for events happening or that have happened. Both input and output
  // are streams; the input stream is for creating and cancelling watchers and the output
  // stream sends events. One watch RPC can watch on multiple key roots, streaming events
  // for several watches at once. 
  // The watch creation call will result in returning the current state of the subtree.
  rpc Watch(stream WatchRequest) returns (stream WatchResponse) {
    option (google.api.http) = {
      post: "/events/v1:watch"
      body: "*"
    };
  };
}

message ObjectFieldInclude {
  // if true object(s) should include data.
  bool data = 1;

  // if true object(s) should include source_data.
  bool source_data = 2;
}

message ListObjectTypesRequest {
  // meta is the metadata associated with the root where listing begins.
  Meta meta = 1;
}

message ListObjectsRequest {
  // meta is the metadata associated with the root where listing begins.
  Meta meta = 1;

  // incl(ude) selects fields to include in the result. 
  // `include` is a reserved word. so not used here.
  ObjectFieldInclude include_fields= 2; 
}

message ObjectRequest {
  // meta is the metadata associated with the object.
  Meta meta = 1;

  // oneof source_data or data
  // Note: an actual oneof is not used here because
  // grpc gateway does not handle oneoff in request body
 
  // source_data is the data as it was specified in json / yaml format.
  google.protobuf.Struct source_data = 2;
 
  // data is protos encoded as bytes only specify  
  bytes data = 3; 
}

message GetObjectRequest {
  // meta is the metadata associated with the object.
  Meta meta = 1;

  // incl(ude) selects fields to include in the result.
  // `include` is a reserved word. so not used here.
  ObjectFieldInclude include_fields= 2; 
}

message DeleteObjectRequest {
  // meta is the metadata associated with the object.
  Meta meta = 1;
}

// Object
message Object {
  // meta is the metadata associated with the object.
  Meta meta = 1;

  // source_data is the data as it was specified in json / yaml format.
  google.protobuf.Struct source_data = 2;

  // data is the binary encoded protobuf data
  // Both representations are useful. 
  // For example:
  // If `source_data` contains an expressions in text form 
  // `data` may contain a parsed AST
  bytes data = 3; 
}

message ObjectTypeList {
  // meta is the metadata associated with this list.
  Meta meta = 1;
  
  // list of objects returned.
  repeated Meta object_types = 2;
}

message ObjectList {
  // meta is the metadata associated with this list.
  Meta meta = 1;
  
  // list of objects returned.
  repeated Object objects = 2;
} 


// Meta
message Meta {
  // api_group is the top level delegation.
  // All messages from an api group are handled by the same delegation handler.
  // api group itself is versioned.
  string api_group = 1;

  // every api group is independently versioned.  
  string api_group_version = 2;

  // objectType is the type of an object.
  // route-rule, metrics-type, metrics-ctor, ...
  string object_type = 3;

  // objectGroup is an arbitrary hierarchical grouping of resources.
  // For Mixer configuration object_group == mesh, svc:svc1, svc:svc2 ...
  // For Proxy it can be mesh, destination. 
  string object_group = 4;

  // name of the object.
  string name = 5;

  // uid assigned to the object. Only used when a new object is created 
  // in the same place as before.
  string uid = 6;

  // revision of the repository, the last time Object was updated.
  int64 revision = 7;

  // labels associated with the object.
  map<string, string> labels = 8;
}

// WatchRequest creates on cancels a watch.
// Create and cancel are part of the same message because the WatchRequest message
// is used in a streaming API. The client may add new watchers and remove old watchers
// on an existing stream.
message WatchRequest {
  // request_union indicates whether to create a new watcher or cancel an existing watcher.
  oneof request_union {
    WatchCreateRequest create_request = 1;
    WatchCancelRequest cancel_request = 2;
  }
}

message WatchCreateRequest {
  // used to identify the watched subtree
  Meta subtree = 1;

  // start watching from this revision of the repository.
  // If the requested revision is not available, the watch request should fail.
  // if not specified "now" is used.
  int64 start_revision = 2; 
}

message WatchCancelRequest {
  // watch_id is the watcher id to cancel so that no more events are transmitted.
  int64 watch_id = 1;
}

// Indicates that watch was successfully canceled.
message WatchCanceled {
}

// Indicates that a watch was successfully created.
message WatchCreated {
  // returns the initial_state of the specified subtree. Watch stream will begin 
  // at the revision.
  repeated Object initial_state = 1;
}

// WatchEvents indicates that this message contains events from the watch stream.
message WatchEvents {
  // returns events for the specified watch id. 
  repeated Event events = 4;
}

message WatchResponse {
  // watch_id is the ID of the watcher that corresponds to the response.
  int64 watch_id = 1;

  // if watcher could not be created or had to be aborted status is NON-OK.
  // client should not look at other fields if status is not OK and remove
  // watch_id from the watch set.
  google.rpc.Status status = 2;

  oneof response_union {
    // Watch was successfully created. Client should record the watch_id for this watch.
    // The response also contains the current state of the watched subtree.
    WatchCreated created = 3;

    // response contains events from a watched subtree.
    WatchEvents events = 4;
    
    // a previous watch was successfully canceled.
    // No further events will be sent to the canceled watcher.
    WatchCanceled canceled = 5; 
  };
};

message Event {
  enum EventType {
    PUT = 0;  // ADD and UPDATE
    DELETE = 1;
  }
  // type is the kind of event. If type is a PUT, it indicates
  // new data has been stored to the key. If type is a DELETE,
  // it indicates the key was deleted.
  EventType type = 1;
  // kv holds the KeyValue for the event.
  // A PUT event contains current kv pair.
  // A PUT event with kv.Version=1 indicates the creation of a key.
  // A DELETE event contains the deleted key with
  // its modification revision set to the revision of deletion.
  Object kv = 2;

  // prev_kv holds the key-value pair before the event happens.
  Object prev_kv = 3;
}
