# DO NOT EDIT - Generated by Cue OpenAPI generator.
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: mixer
    chart: istio
    heritage: Tiller
    istio: core
    package: istio.io.mixer
    release: istio
  name: attributemanifests.config.istio.io
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: attributemanifest
    plural: attributemanifests
    singular: attributemanifest
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: AttributeManifest describes a set of Attributes produced by
            some component of an Istio deployment.
          properties:
            attributes:
              additionalProperties:
                properties:
                  description:
                    description: Optional. A human-readable description of the attribute's
                      purpose.
                    format: string
                    type: string
                  valueType:
                    description: Required. The type of data carried by this attribute.
                    enum:
                    - VALUE_TYPE_UNSPECIFIED
                    - STRING
                    - INT64
                    - DOUBLE
                    - BOOL
                    - TIMESTAMP
                    - IP_ADDRESS
                    - EMAIL_ADDRESS
                    - URI
                    - DNS_NAME
                    - DURATION
                    - STRING_MAP
                    type: string
                type: object
              description: 'The set of attributes this Istio component will be responsible
                for producing at runtime. We map from attribute name to the attribute''s
                specification. The name of an attribute, which is how attributes are
                referred to in aspect configuration, must conform to: Name = IDENT
                { SEPARATOR IDENT };'
              type: object
            name:
              description: Required. Name of the component producing these attributes.
                This can be the proxy (with the canonical name `istio-proxy`) or the
                name of an `attributes` kind adapter in Mixer.
              format: string
              type: string
            revision:
              description: Optional. The revision of this document. Assigned by server.
              format: string
              type: string
          required:
          - attributes
          type: object
      type: object
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app: istio-pilot
    heritage: Tiller
    istio: rbac
    release: istio
  name: authorizationpolicies.rbac.istio.io
spec:
  group: rbac.istio.io
  names:
    categories:
    - istio-io
    - rbac-istio-io
    kind: AuthorizationPolicy
    plural: authorizationpolicies
    singular: authorizationpolicy
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: AuthorizationPolicy enables access control on workloads.
          properties:
            rules:
              description: Optional. A list of rules to specify the allowed access
                to the workload.
              items:
                properties:
                  from:
                    description: Optional. from specifies the source of a request.
                    items:
                      properties:
                        source:
                          description: Source specifies the source of a request.
                          properties:
                            ipBlocks:
                              description: Optional. A list of IP blocks, which matches
                                to the “source.ip” attribute. Single IP (e.g. "1.2.3.4")
                                and CIDR (e.g. "1.2.3.0/24") are supported.
                              items:
                                format: string
                                type: string
                              type: array
                            namespaces:
                              description: Optional. A list of namespaces, which matches
                                to the “source.namespace” attribute.
                              items:
                                format: string
                                type: string
                              type: array
                            principals:
                              description: Optional. A list of source peer identities
                                (i.e. service account), which matches to the "source.principal"
                                attribute.
                              items:
                                format: string
                                type: string
                              type: array
                            requestPrincipals:
                              description: Optional. A list of request identities
                                (i.e. “iss/sub” claims), which matches to the “request.auth.principal”
                                attribute.
                              items:
                                format: string
                                type: string
                              type: array
                          type: object
                      type: object
                    type: array
                  to:
                    description: Optional. to specifies the operation of a request.
                    items:
                      properties:
                        operation:
                          description: Operation specifies the operation of a request.
                          properties:
                            hosts:
                              description: Optional. A list of hosts, which matches
                                to the “request.host” attribute.
                              items:
                                format: string
                                type: string
                              type: array
                            methods:
                              description: Optional. A list of methods, which matches
                                to the “request.method” attribute. For gRPC service,
                                this should be the fully-qualified name in the form
                                of "/package.service/method"
                              items:
                                format: string
                                type: string
                              type: array
                            paths:
                              description: Optional. A list of paths, which matches
                                to the “request.url_path” attribute.
                              items:
                                format: string
                                type: string
                              type: array
                            ports:
                              description: Optional. A list of ports, which matches
                                to the “destination.port” attribute.
                              items:
                                format: string
                                type: string
                              type: array
                          type: object
                      type: object
                    type: array
                  when:
                    description: Optional. when specifies a list of additional conditions
                      of a request.
                    items:
                      properties:
                        key:
                          description: 'Required. The name of an Istio attribute.
                            Note: Check https://istio.io/docs/reference/config/ for
                            the list of supported attribute name.'
                          format: string
                          type: string
                        values:
                          description: Required. The allowed values for the attribute.
                          items:
                            format: string
                            type: string
                          type: array
                      type: object
                    type: array
                type: object
              type: array
            selector:
              description: Optional. Workload selector decides where to apply the
                authorization policy. If not set, the authorization policy will be
                applied to all workloads in the same namespace as the authorization
                policy.
              properties:
                matchLabels:
                  additionalProperties:
                    format: string
                    type: string
                  description: 'REQUIRED: One or more labels that indicate a specific
                    set of pods/VMs on which a policy should be applied. The scope
                    of label search is restricted to the configuration namespace in
                    which the resource is present.'
                  type: object
              required:
              - matchLabels
              type: object
          type: object
      type: object
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-pilot
    heritage: Tiller
    istio: rbac
    release: istio
  name: clusterrbacconfigs.rbac.istio.io
spec:
  group: rbac.istio.io
  names:
    categories:
    - istio-io
    - rbac-istio-io
    kind: ClusterRbacConfig
    plural: clusterrbacconfigs
    singular: clusterrbacconfig
  scope: Cluster
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: RbacConfig implements the ClusterRbaConfig Custom Resource
            Definition for controlling Istio RBAC behavior. The ClusterRbaConfig Custom
            Resource is a singleton where only one ClusterRbaConfig should be created
            globally in the mesh and the namespace should be the same to other Istio
            components, which usually is `istio-system`.
          properties:
            enforcementMode:
              description: Indicates enforcement mode of the RbacConfig, in ENFORCED
                mode by default. It's used to verify new RbacConfig work as expected
                before rolling to production. When setting as PERMISSIVE, RBAC isn't
                enforced and has no impact on users. RBAC engine run RbacConfig in
                PERMISSIVE mode and logs stats. Invalid to set RbacConfig in PERMISSIVE
                and ServiceRoleBinding in ENFORCED mode.
              enum:
              - ENFORCED
              - PERMISSIVE
              type: string
            exclusion:
              description: 'A list of services or namespaces that should not be enforced
                by Istio RBAC policies. Note: This field have effect only when mode
                is ON_WITH_EXCLUSION and will be ignored for any other modes.'
              properties:
                namespaces:
                  description: A list of namespaces.
                  items:
                    format: string
                    type: string
                  type: array
                services:
                  description: A list of services.
                  items:
                    format: string
                    type: string
                  type: array
              type: object
            inclusion:
              description: 'A list of services or namespaces that should be enforced
                by Istio RBAC policies. Note: This field have effect only when mode
                is ON_WITH_INCLUSION and will be ignored for any other modes.'
              properties:
                namespaces:
                  description: A list of namespaces.
                  items:
                    format: string
                    type: string
                  type: array
                services:
                  description: A list of services.
                  items:
                    format: string
                    type: string
                  type: array
              type: object
            mode:
              description: Istio RBAC mode.
              enum:
              - "OFF"
              - "ON"
              - ON_WITH_INCLUSION
              - ON_WITH_EXCLUSION
              type: string
          type: object
      type: object
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-pilot
    chart: istio
    heritage: Tiller
    release: istio
  name: destinationrules.networking.istio.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.host
    description: The name of a service from the service registry
    name: Host
    type: string
  - JSONPath: .metadata.creationTimestamp
    description: |-
      CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
      Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    name: Age
    type: date
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: DestinationRule
    listKind: DestinationRuleList
    plural: destinationrules
    shortNames:
    - dr
    singular: destinationrule
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            exportTo:
              description: A list of namespaces to which this destination rule is
                exported. The resolution of a destination rule to apply to a service
                occurs in the context of a hierarchy of namespaces. Exporting a destination
                rule allows it to be included in the resolution hierarchy for services
                in other namespaces. This feature provides a mechanism for service
                owners and mesh administrators to control the visibility of destination
                rules across namespace boundaries.
              items:
                format: string
                type: string
              type: array
            host:
              description: REQUIRED. The name of a service from the service registry.
                Service names are looked up from the platform's service registry (e.g.,
                Kubernetes services, Consul services, etc.) and from the hosts declared
                by [ServiceEntries](https://istio.io/docs/reference/config/networking/v1alpha3/service-entry/#ServiceEntry).
                Rules defined for services that do not exist in the service registry
                will be ignored.
              format: string
              type: string
            subsets:
              description: One or more named sets that represent individual versions
                of a service. Traffic policies can be overridden at subset level.
              items:
                properties:
                  labels:
                    additionalProperties:
                      format: string
                      type: string
                    description: Labels apply a filter over the endpoints of a service
                      in the service registry. See route rules for examples of usage.
                    type: object
                  name:
                    description: REQUIRED. Name of the subset. The service name and
                      the subset name can be used for traffic splitting in a route
                      rule.
                    format: string
                    type: string
                  trafficPolicy:
                    description: Traffic policies that apply to this subset. Subsets
                      inherit the traffic policies specified at the DestinationRule
                      level. Settings specified at the subset level will override
                      the corresponding settings specified at the DestinationRule
                      level.
                    properties:
                      connectionPool:
                        description: Settings controlling the volume of connections
                          to an upstream service
                        properties:
                          http:
                            description: HTTP connection pool settings.
                            properties:
                              h2UpgradePolicy:
                                description: Specify if http1.1 connection should
                                  be upgraded to http2 for the associated destination.
                                enum:
                                - DEFAULT
                                - DO_NOT_UPGRADE
                                - UPGRADE
                                type: string
                              http1MaxPendingRequests:
                                description: Maximum number of pending HTTP requests
                                  to a destination. Default 1024.
                                format: int32
                                type: integer
                              http2MaxRequests:
                                description: Maximum number of requests to a backend.
                                  Default 1024.
                                format: int32
                                type: integer
                              idleTimeout:
                                description: The idle timeout for upstream connection
                                  pool connections. The idle timeout is defined as
                                  the period in which there are no active requests.
                                  If not set, there is no idle timeout. When the idle
                                  timeout is reached the connection will be closed.
                                  Note that request based timeouts mean that HTTP/2
                                  PINGs will not keep the connection alive. Applies
                                  to both HTTP1.1 and HTTP2 connections.
                                type: string
                              maxRequestsPerConnection:
                                description: Maximum number of requests per connection
                                  to a backend. Setting this parameter to 1 disables
                                  keep alive. Default 0, meaning "unlimited", up to
                                  2^29.
                                format: int32
                                type: integer
                              maxRetries:
                                description: Maximum number of retries that can be
                                  outstanding to all hosts in a cluster at a given
                                  time. Defaults to 1024.
                                format: int32
                                type: integer
                            type: object
                          tcp:
                            description: Settings common to both HTTP and TCP upstream
                              connections.
                            properties:
                              connectTimeout:
                                description: TCP connection timeout.
                                type: string
                              maxConnections:
                                description: Maximum number of HTTP1 /TCP connections
                                  to a destination host. Default 1024.
                                format: int32
                                type: integer
                              tcpKeepalive:
                                description: If set then set SO_KEEPALIVE on the socket
                                  to enable TCP Keepalives.
                                properties:
                                  interval:
                                    description: The time duration between keep-alive
                                      probes. Default is to use the OS level configuration
                                      (unless overridden, Linux defaults to 75s.)
                                    type: string
                                  probes:
                                    description: Maximum number of keepalive probes
                                      to send without response before deciding the
                                      connection is dead. Default is to use the OS
                                      level configuration (unless overridden, Linux
                                      defaults to 9.)
                                    type: integer
                                  time:
                                    description: The time duration a connection needs
                                      to be idle before keep-alive probes start being
                                      sent. Default is to use the OS level configuration
                                      (unless overridden, Linux defaults to 7200s
                                      (ie 2 hours.)
                                    type: string
                                type: object
                            type: object
                        type: object
                      loadBalancer:
                        description: Settings controlling the load balancer algorithms.
                        oneOf:
                        - required:
                          - simple
                        - properties:
                            consistentHash:
                              oneOf:
                              - required:
                                - httpHeaderName
                              - required:
                                - httpCookie
                              - required:
                                - useSourceIp
                          required:
                          - consistentHash
                        properties:
                          consistentHash:
                            properties:
                              httpCookie:
                                description: Hash based on HTTP cookie.
                                properties:
                                  name:
                                    description: REQUIRED. Name of the cookie.
                                    format: string
                                    type: string
                                  path:
                                    description: Path to set for the cookie.
                                    format: string
                                    type: string
                                  ttl:
                                    description: REQUIRED. Lifetime of the cookie.
                                    type: string
                                type: object
                              httpHeaderName:
                                description: Hash based on a specific HTTP header.
                                format: string
                                type: string
                              minimumRingSize:
                                description: The minimum number of virtual nodes to
                                  use for the hash ring. Defaults to 1024. Larger
                                  ring sizes result in more granular load distributions.
                                  If the number of hosts in the load balancing pool
                                  is larger than the ring size, each host will be
                                  assigned a single virtual node.
                                type: integer
                              useSourceIp:
                                description: Hash based on the source IP address.
                                type: boolean
                            type: object
                          simple:
                            enum:
                            - ROUND_ROBIN
                            - LEAST_CONN
                            - RANDOM
                            - PASSTHROUGH
                            type: string
                        type: object
                      outlierDetection:
                        description: Settings controlling eviction of unhealthy hosts
                          from the load balancing pool
                        properties:
                          baseEjectionTime:
                            description: 'Minimum ejection duration. A host will remain
                              ejected for a period equal to the product of minimum
                              ejection duration and the number of times the host has
                              been ejected. This technique allows the system to automatically
                              increase the ejection period for unhealthy upstream
                              servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default
                              is 30s.'
                            type: string
                          consecutiveErrors:
                            description: Number of errors before a host is ejected
                              from the connection pool. Defaults to 5. When the upstream
                              host is accessed over HTTP, a 502, 503 or 504 return
                              code qualifies as an error. When the upstream host is
                              accessed over an opaque TCP connection, connect timeouts
                              and connection error/failure events qualify as an error.
                            format: int32
                            type: integer
                          interval:
                            description: 'Time interval between ejection sweep analysis.
                              format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                            type: string
                          maxEjectionPercent:
                            description: Maximum % of hosts in the load balancing
                              pool for the upstream service that can be ejected. Defaults
                              to 10%.
                            format: int32
                            type: integer
                          minHealthPercent:
                            description: Outlier detection will be enabled as long
                              as the associated load balancing pool has at least min_health_percent
                              hosts in healthy mode. When the percentage of healthy
                              hosts in the load balancing pool drops below this threshold,
                              outlier detection will be disabled and the proxy will
                              load balance across all hosts in the pool (healthy and
                              unhealthy). The threshold can be disabled by setting
                              it to 0%. The default is 0% as it's not typically applicable
                              in k8s environments with few pods per service.
                            format: int32
                            type: integer
                        type: object
                      portLevelSettings:
                        description: Traffic policies specific to individual ports.
                          Note that port level settings will override the destination-level
                          settings. Traffic settings specified at the destination-level
                          will not be inherited when overridden by port-level settings,
                          i.e. default values will be applied to fields omitted in
                          port-level traffic policies.
                        items:
                          properties:
                            connectionPool:
                              description: Settings controlling the volume of connections
                                to an upstream service
                              properties:
                                http:
                                  description: HTTP connection pool settings.
                                  properties:
                                    h2UpgradePolicy:
                                      description: Specify if http1.1 connection should
                                        be upgraded to http2 for the associated destination.
                                      enum:
                                      - DEFAULT
                                      - DO_NOT_UPGRADE
                                      - UPGRADE
                                      type: string
                                    http1MaxPendingRequests:
                                      description: Maximum number of pending HTTP
                                        requests to a destination. Default 1024.
                                      format: int32
                                      type: integer
                                    http2MaxRequests:
                                      description: Maximum number of requests to a
                                        backend. Default 1024.
                                      format: int32
                                      type: integer
                                    idleTimeout:
                                      description: The idle timeout for upstream connection
                                        pool connections. The idle timeout is defined
                                        as the period in which there are no active
                                        requests. If not set, there is no idle timeout.
                                        When the idle timeout is reached the connection
                                        will be closed. Note that request based timeouts
                                        mean that HTTP/2 PINGs will not keep the connection
                                        alive. Applies to both HTTP1.1 and HTTP2 connections.
                                      type: string
                                    maxRequestsPerConnection:
                                      description: Maximum number of requests per
                                        connection to a backend. Setting this parameter
                                        to 1 disables keep alive. Default 0, meaning
                                        "unlimited", up to 2^29.
                                      format: int32
                                      type: integer
                                    maxRetries:
                                      description: Maximum number of retries that
                                        can be outstanding to all hosts in a cluster
                                        at a given time. Defaults to 1024.
                                      format: int32
                                      type: integer
                                  type: object
                                tcp:
                                  description: Settings common to both HTTP and TCP
                                    upstream connections.
                                  properties:
                                    connectTimeout:
                                      description: TCP connection timeout.
                                      type: string
                                    maxConnections:
                                      description: Maximum number of HTTP1 /TCP connections
                                        to a destination host. Default 1024.
                                      format: int32
                                      type: integer
                                    tcpKeepalive:
                                      description: If set then set SO_KEEPALIVE on
                                        the socket to enable TCP Keepalives.
                                      properties:
                                        interval:
                                          description: The time duration between keep-alive
                                            probes. Default is to use the OS level
                                            configuration (unless overridden, Linux
                                            defaults to 75s.)
                                          type: string
                                        probes:
                                          description: Maximum number of keepalive
                                            probes to send without response before
                                            deciding the connection is dead. Default
                                            is to use the OS level configuration (unless
                                            overridden, Linux defaults to 9.)
                                          type: integer
                                        time:
                                          description: The time duration a connection
                                            needs to be idle before keep-alive probes
                                            start being sent. Default is to use the
                                            OS level configuration (unless overridden,
                                            Linux defaults to 7200s (ie 2 hours.)
                                          type: string
                                      type: object
                                  type: object
                              type: object
                            loadBalancer:
                              description: Settings controlling the load balancer
                                algorithms.
                              oneOf:
                              - required:
                                - simple
                              - properties:
                                  consistentHash:
                                    oneOf:
                                    - required:
                                      - httpHeaderName
                                    - required:
                                      - httpCookie
                                    - required:
                                      - useSourceIp
                                required:
                                - consistentHash
                              properties:
                                consistentHash:
                                  properties:
                                    httpCookie:
                                      description: Hash based on HTTP cookie.
                                      properties:
                                        name:
                                          description: REQUIRED. Name of the cookie.
                                          format: string
                                          type: string
                                        path:
                                          description: Path to set for the cookie.
                                          format: string
                                          type: string
                                        ttl:
                                          description: REQUIRED. Lifetime of the cookie.
                                          type: string
                                      type: object
                                    httpHeaderName:
                                      description: Hash based on a specific HTTP header.
                                      format: string
                                      type: string
                                    minimumRingSize:
                                      description: The minimum number of virtual nodes
                                        to use for the hash ring. Defaults to 1024.
                                        Larger ring sizes result in more granular
                                        load distributions. If the number of hosts
                                        in the load balancing pool is larger than
                                        the ring size, each host will be assigned
                                        a single virtual node.
                                      type: integer
                                    useSourceIp:
                                      description: Hash based on the source IP address.
                                      type: boolean
                                  type: object
                                simple:
                                  enum:
                                  - ROUND_ROBIN
                                  - LEAST_CONN
                                  - RANDOM
                                  - PASSTHROUGH
                                  type: string
                              type: object
                            outlierDetection:
                              description: Settings controlling eviction of unhealthy
                                hosts from the load balancing pool
                              properties:
                                baseEjectionTime:
                                  description: 'Minimum ejection duration. A host
                                    will remain ejected for a period equal to the
                                    product of minimum ejection duration and the number
                                    of times the host has been ejected. This technique
                                    allows the system to automatically increase the
                                    ejection period for unhealthy upstream servers.
                                    format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is
                                    30s.'
                                  type: string
                                consecutiveErrors:
                                  description: Number of errors before a host is ejected
                                    from the connection pool. Defaults to 5. When
                                    the upstream host is accessed over HTTP, a 502,
                                    503 or 504 return code qualifies as an error.
                                    When the upstream host is accessed over an opaque
                                    TCP connection, connect timeouts and connection
                                    error/failure events qualify as an error.
                                  format: int32
                                  type: integer
                                interval:
                                  description: 'Time interval between ejection sweep
                                    analysis. format: 1h/1m/1s/1ms. MUST BE >=1ms.
                                    Default is 10s.'
                                  type: string
                                maxEjectionPercent:
                                  description: Maximum % of hosts in the load balancing
                                    pool for the upstream service that can be ejected.
                                    Defaults to 10%.
                                  format: int32
                                  type: integer
                                minHealthPercent:
                                  description: Outlier detection will be enabled as
                                    long as the associated load balancing pool has
                                    at least min_health_percent hosts in healthy mode.
                                    When the percentage of healthy hosts in the load
                                    balancing pool drops below this threshold, outlier
                                    detection will be disabled and the proxy will
                                    load balance across all hosts in the pool (healthy
                                    and unhealthy). The threshold can be disabled
                                    by setting it to 0%. The default is 0% as it's
                                    not typically applicable in k8s environments with
                                    few pods per service.
                                  format: int32
                                  type: integer
                              type: object
                            port:
                              description: Specifies the number of a port on the destination
                                service on which this policy is being applied.
                              oneOf:
                              - required:
                                - number
                              - required:
                                - name
                              properties:
                                name:
                                  format: string
                                  type: string
                                number:
                                  description: Valid port number
                                  type: integer
                              type: object
                            tls:
                              description: TLS related settings for connections to
                                the upstream service.
                              properties:
                                caCertificates:
                                  description: 'OPTIONAL: The path to the file containing
                                    certificate authority certificates to use in verifying
                                    a presented server certificate. If omitted, the
                                    proxy will not verify the server''s certificate.
                                    Should be empty if mode is `ISTIO_MUTUAL`.'
                                  format: string
                                  type: string
                                clientCertificate:
                                  description: REQUIRED if mode is `MUTUAL`. The path
                                    to the file holding the client-side TLS certificate
                                    to use. Should be empty if mode is `ISTIO_MUTUAL`.
                                  format: string
                                  type: string
                                mode:
                                  description: 'REQUIRED: Indicates whether connections
                                    to this port should be secured using TLS. The
                                    value of this field determines how TLS is enforced.'
                                  enum:
                                  - DISABLE
                                  - SIMPLE
                                  - MUTUAL
                                  - ISTIO_MUTUAL
                                  type: string
                                privateKey:
                                  description: REQUIRED if mode is `MUTUAL`. The path
                                    to the file holding the client's private key.
                                    Should be empty if mode is `ISTIO_MUTUAL`.
                                  format: string
                                  type: string
                                sni:
                                  description: SNI string to present to the server
                                    during TLS handshake.
                                  format: string
                                  type: string
                                subjectAltNames:
                                  description: A list of alternate names to verify
                                    the subject identity in the certificate. If specified,
                                    the proxy will verify that the server certificate's
                                    subject alt name matches one of the specified
                                    values. If specified, this list overrides the
                                    value of subject_alt_names from the ServiceEntry.
                                  items:
                                    format: string
                                    type: string
                                  type: array
                              type: object
                          type: object
                        type: array
                      tls:
                        description: TLS related settings for connections to the upstream
                          service.
                        properties:
                          caCertificates:
                            description: 'OPTIONAL: The path to the file containing
                              certificate authority certificates to use in verifying
                              a presented server certificate. If omitted, the proxy
                              will not verify the server''s certificate. Should be
                              empty if mode is `ISTIO_MUTUAL`.'
                            format: string
                            type: string
                          clientCertificate:
                            description: REQUIRED if mode is `MUTUAL`. The path to
                              the file holding the client-side TLS certificate to
                              use. Should be empty if mode is `ISTIO_MUTUAL`.
                            format: string
                            type: string
                          mode:
                            description: 'REQUIRED: Indicates whether connections
                              to this port should be secured using TLS. The value
                              of this field determines how TLS is enforced.'
                            enum:
                            - DISABLE
                            - SIMPLE
                            - MUTUAL
                            - ISTIO_MUTUAL
                            type: string
                          privateKey:
                            description: REQUIRED if mode is `MUTUAL`. The path to
                              the file holding the client's private key. Should be
                              empty if mode is `ISTIO_MUTUAL`.
                            format: string
                            type: string
                          sni:
                            description: SNI string to present to the server during
                              TLS handshake.
                            format: string
                            type: string
                          subjectAltNames:
                            description: A list of alternate names to verify the subject
                              identity in the certificate. If specified, the proxy
                              will verify that the server certificate's subject alt
                              name matches one of the specified values. If specified,
                              this list overrides the value of subject_alt_names from
                              the ServiceEntry.
                            items:
                              format: string
                              type: string
                            type: array
                        type: object
                    type: object
                required:
                - labels
                type: object
              type: array
            trafficPolicy:
              description: Traffic policies to apply (load balancing policy, connection
                pool sizes, outlier detection).
              properties:
                connectionPool:
                  description: Settings controlling the volume of connections to an
                    upstream service
                  properties:
                    http:
                      description: HTTP connection pool settings.
                      properties:
                        h2UpgradePolicy:
                          description: Specify if http1.1 connection should be upgraded
                            to http2 for the associated destination.
                          enum:
                          - DEFAULT
                          - DO_NOT_UPGRADE
                          - UPGRADE
                          type: string
                        http1MaxPendingRequests:
                          description: Maximum number of pending HTTP requests to
                            a destination. Default 1024.
                          format: int32
                          type: integer
                        http2MaxRequests:
                          description: Maximum number of requests to a backend. Default
                            1024.
                          format: int32
                          type: integer
                        idleTimeout:
                          description: The idle timeout for upstream connection pool
                            connections. The idle timeout is defined as the period
                            in which there are no active requests. If not set, there
                            is no idle timeout. When the idle timeout is reached the
                            connection will be closed. Note that request based timeouts
                            mean that HTTP/2 PINGs will not keep the connection alive.
                            Applies to both HTTP1.1 and HTTP2 connections.
                          type: string
                        maxRequestsPerConnection:
                          description: Maximum number of requests per connection to
                            a backend. Setting this parameter to 1 disables keep alive.
                            Default 0, meaning "unlimited", up to 2^29.
                          format: int32
                          type: integer
                        maxRetries:
                          description: Maximum number of retries that can be outstanding
                            to all hosts in a cluster at a given time. Defaults to
                            1024.
                          format: int32
                          type: integer
                      type: object
                    tcp:
                      description: Settings common to both HTTP and TCP upstream connections.
                      properties:
                        connectTimeout:
                          description: TCP connection timeout.
                          type: string
                        maxConnections:
                          description: Maximum number of HTTP1 /TCP connections to
                            a destination host. Default 1024.
                          format: int32
                          type: integer
                        tcpKeepalive:
                          description: If set then set SO_KEEPALIVE on the socket
                            to enable TCP Keepalives.
                          properties:
                            interval:
                              description: The time duration between keep-alive probes.
                                Default is to use the OS level configuration (unless
                                overridden, Linux defaults to 75s.)
                              type: string
                            probes:
                              description: Maximum number of keepalive probes to send
                                without response before deciding the connection is
                                dead. Default is to use the OS level configuration
                                (unless overridden, Linux defaults to 9.)
                              type: integer
                            time:
                              description: The time duration a connection needs to
                                be idle before keep-alive probes start being sent.
                                Default is to use the OS level configuration (unless
                                overridden, Linux defaults to 7200s (ie 2 hours.)
                              type: string
                          type: object
                      type: object
                  type: object
                loadBalancer:
                  description: Settings controlling the load balancer algorithms.
                  oneOf:
                  - required:
                    - simple
                  - properties:
                      consistentHash:
                        oneOf:
                        - required:
                          - httpHeaderName
                        - required:
                          - httpCookie
                        - required:
                          - useSourceIp
                    required:
                    - consistentHash
                  properties:
                    consistentHash:
                      properties:
                        httpCookie:
                          description: Hash based on HTTP cookie.
                          properties:
                            name:
                              description: REQUIRED. Name of the cookie.
                              format: string
                              type: string
                            path:
                              description: Path to set for the cookie.
                              format: string
                              type: string
                            ttl:
                              description: REQUIRED. Lifetime of the cookie.
                              type: string
                          type: object
                        httpHeaderName:
                          description: Hash based on a specific HTTP header.
                          format: string
                          type: string
                        minimumRingSize:
                          description: The minimum number of virtual nodes to use
                            for the hash ring. Defaults to 1024. Larger ring sizes
                            result in more granular load distributions. If the number
                            of hosts in the load balancing pool is larger than the
                            ring size, each host will be assigned a single virtual
                            node.
                          type: integer
                        useSourceIp:
                          description: Hash based on the source IP address.
                          type: boolean
                      type: object
                    simple:
                      enum:
                      - ROUND_ROBIN
                      - LEAST_CONN
                      - RANDOM
                      - PASSTHROUGH
                      type: string
                  type: object
                outlierDetection:
                  description: Settings controlling eviction of unhealthy hosts from
                    the load balancing pool
                  properties:
                    baseEjectionTime:
                      description: 'Minimum ejection duration. A host will remain
                        ejected for a period equal to the product of minimum ejection
                        duration and the number of times the host has been ejected.
                        This technique allows the system to automatically increase
                        the ejection period for unhealthy upstream servers. format:
                        1h/1m/1s/1ms. MUST BE >=1ms. Default is 30s.'
                      type: string
                    consecutiveErrors:
                      description: Number of errors before a host is ejected from
                        the connection pool. Defaults to 5. When the upstream host
                        is accessed over HTTP, a 502, 503 or 504 return code qualifies
                        as an error. When the upstream host is accessed over an opaque
                        TCP connection, connect timeouts and connection error/failure
                        events qualify as an error.
                      format: int32
                      type: integer
                    interval:
                      description: 'Time interval between ejection sweep analysis.
                        format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                      type: string
                    maxEjectionPercent:
                      description: Maximum % of hosts in the load balancing pool for
                        the upstream service that can be ejected. Defaults to 10%.
                      format: int32
                      type: integer
                    minHealthPercent:
                      description: Outlier detection will be enabled as long as the
                        associated load balancing pool has at least min_health_percent
                        hosts in healthy mode. When the percentage of healthy hosts
                        in the load balancing pool drops below this threshold, outlier
                        detection will be disabled and the proxy will load balance
                        across all hosts in the pool (healthy and unhealthy). The
                        threshold can be disabled by setting it to 0%. The default
                        is 0% as it's not typically applicable in k8s environments
                        with few pods per service.
                      format: int32
                      type: integer
                  type: object
                portLevelSettings:
                  description: Traffic policies specific to individual ports. Note
                    that port level settings will override the destination-level settings.
                    Traffic settings specified at the destination-level will not be
                    inherited when overridden by port-level settings, i.e. default
                    values will be applied to fields omitted in port-level traffic
                    policies.
                  items:
                    properties:
                      connectionPool:
                        description: Settings controlling the volume of connections
                          to an upstream service
                        properties:
                          http:
                            description: HTTP connection pool settings.
                            properties:
                              h2UpgradePolicy:
                                description: Specify if http1.1 connection should
                                  be upgraded to http2 for the associated destination.
                                enum:
                                - DEFAULT
                                - DO_NOT_UPGRADE
                                - UPGRADE
                                type: string
                              http1MaxPendingRequests:
                                description: Maximum number of pending HTTP requests
                                  to a destination. Default 1024.
                                format: int32
                                type: integer
                              http2MaxRequests:
                                description: Maximum number of requests to a backend.
                                  Default 1024.
                                format: int32
                                type: integer
                              idleTimeout:
                                description: The idle timeout for upstream connection
                                  pool connections. The idle timeout is defined as
                                  the period in which there are no active requests.
                                  If not set, there is no idle timeout. When the idle
                                  timeout is reached the connection will be closed.
                                  Note that request based timeouts mean that HTTP/2
                                  PINGs will not keep the connection alive. Applies
                                  to both HTTP1.1 and HTTP2 connections.
                                type: string
                              maxRequestsPerConnection:
                                description: Maximum number of requests per connection
                                  to a backend. Setting this parameter to 1 disables
                                  keep alive. Default 0, meaning "unlimited", up to
                                  2^29.
                                format: int32
                                type: integer
                              maxRetries:
                                description: Maximum number of retries that can be
                                  outstanding to all hosts in a cluster at a given
                                  time. Defaults to 1024.
                                format: int32
                                type: integer
                            type: object
                          tcp:
                            description: Settings common to both HTTP and TCP upstream
                              connections.
                            properties:
                              connectTimeout:
                                description: TCP connection timeout.
                                type: string
                              maxConnections:
                                description: Maximum number of HTTP1 /TCP connections
                                  to a destination host. Default 1024.
                                format: int32
                                type: integer
                              tcpKeepalive:
                                description: If set then set SO_KEEPALIVE on the socket
                                  to enable TCP Keepalives.
                                properties:
                                  interval:
                                    description: The time duration between keep-alive
                                      probes. Default is to use the OS level configuration
                                      (unless overridden, Linux defaults to 75s.)
                                    type: string
                                  probes:
                                    description: Maximum number of keepalive probes
                                      to send without response before deciding the
                                      connection is dead. Default is to use the OS
                                      level configuration (unless overridden, Linux
                                      defaults to 9.)
                                    type: integer
                                  time:
                                    description: The time duration a connection needs
                                      to be idle before keep-alive probes start being
                                      sent. Default is to use the OS level configuration
                                      (unless overridden, Linux defaults to 7200s
                                      (ie 2 hours.)
                                    type: string
                                type: object
                            type: object
                        type: object
                      loadBalancer:
                        description: Settings controlling the load balancer algorithms.
                        oneOf:
                        - required:
                          - simple
                        - properties:
                            consistentHash:
                              oneOf:
                              - required:
                                - httpHeaderName
                              - required:
                                - httpCookie
                              - required:
                                - useSourceIp
                          required:
                          - consistentHash
                        properties:
                          consistentHash:
                            properties:
                              httpCookie:
                                description: Hash based on HTTP cookie.
                                properties:
                                  name:
                                    description: REQUIRED. Name of the cookie.
                                    format: string
                                    type: string
                                  path:
                                    description: Path to set for the cookie.
                                    format: string
                                    type: string
                                  ttl:
                                    description: REQUIRED. Lifetime of the cookie.
                                    type: string
                                type: object
                              httpHeaderName:
                                description: Hash based on a specific HTTP header.
                                format: string
                                type: string
                              minimumRingSize:
                                description: The minimum number of virtual nodes to
                                  use for the hash ring. Defaults to 1024. Larger
                                  ring sizes result in more granular load distributions.
                                  If the number of hosts in the load balancing pool
                                  is larger than the ring size, each host will be
                                  assigned a single virtual node.
                                type: integer
                              useSourceIp:
                                description: Hash based on the source IP address.
                                type: boolean
                            type: object
                          simple:
                            enum:
                            - ROUND_ROBIN
                            - LEAST_CONN
                            - RANDOM
                            - PASSTHROUGH
                            type: string
                        type: object
                      outlierDetection:
                        description: Settings controlling eviction of unhealthy hosts
                          from the load balancing pool
                        properties:
                          baseEjectionTime:
                            description: 'Minimum ejection duration. A host will remain
                              ejected for a period equal to the product of minimum
                              ejection duration and the number of times the host has
                              been ejected. This technique allows the system to automatically
                              increase the ejection period for unhealthy upstream
                              servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default
                              is 30s.'
                            type: string
                          consecutiveErrors:
                            description: Number of errors before a host is ejected
                              from the connection pool. Defaults to 5. When the upstream
                              host is accessed over HTTP, a 502, 503 or 504 return
                              code qualifies as an error. When the upstream host is
                              accessed over an opaque TCP connection, connect timeouts
                              and connection error/failure events qualify as an error.
                            format: int32
                            type: integer
                          interval:
                            description: 'Time interval between ejection sweep analysis.
                              format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                            type: string
                          maxEjectionPercent:
                            description: Maximum % of hosts in the load balancing
                              pool for the upstream service that can be ejected. Defaults
                              to 10%.
                            format: int32
                            type: integer
                          minHealthPercent:
                            description: Outlier detection will be enabled as long
                              as the associated load balancing pool has at least min_health_percent
                              hosts in healthy mode. When the percentage of healthy
                              hosts in the load balancing pool drops below this threshold,
                              outlier detection will be disabled and the proxy will
                              load balance across all hosts in the pool (healthy and
                              unhealthy). The threshold can be disabled by setting
                              it to 0%. The default is 0% as it's not typically applicable
                              in k8s environments with few pods per service.
                            format: int32
                            type: integer
                        type: object
                      port:
                        description: Specifies the number of a port on the destination
                          service on which this policy is being applied.
                        oneOf:
                        - required:
                          - number
                        - required:
                          - name
                        properties:
                          name:
                            format: string
                            type: string
                          number:
                            description: Valid port number
                            type: integer
                        type: object
                      tls:
                        description: TLS related settings for connections to the upstream
                          service.
                        properties:
                          caCertificates:
                            description: 'OPTIONAL: The path to the file containing
                              certificate authority certificates to use in verifying
                              a presented server certificate. If omitted, the proxy
                              will not verify the server''s certificate. Should be
                              empty if mode is `ISTIO_MUTUAL`.'
                            format: string
                            type: string
                          clientCertificate:
                            description: REQUIRED if mode is `MUTUAL`. The path to
                              the file holding the client-side TLS certificate to
                              use. Should be empty if mode is `ISTIO_MUTUAL`.
                            format: string
                            type: string
                          mode:
                            description: 'REQUIRED: Indicates whether connections
                              to this port should be secured using TLS. The value
                              of this field determines how TLS is enforced.'
                            enum:
                            - DISABLE
                            - SIMPLE
                            - MUTUAL
                            - ISTIO_MUTUAL
                            type: string
                          privateKey:
                            description: REQUIRED if mode is `MUTUAL`. The path to
                              the file holding the client's private key. Should be
                              empty if mode is `ISTIO_MUTUAL`.
                            format: string
                            type: string
                          sni:
                            description: SNI string to present to the server during
                              TLS handshake.
                            format: string
                            type: string
                          subjectAltNames:
                            description: A list of alternate names to verify the subject
                              identity in the certificate. If specified, the proxy
                              will verify that the server certificate's subject alt
                              name matches one of the specified values. If specified,
                              this list overrides the value of subject_alt_names from
                              the ServiceEntry.
                            items:
                              format: string
                              type: string
                            type: array
                        type: object
                    type: object
                  type: array
                tls:
                  description: TLS related settings for connections to the upstream
                    service.
                  properties:
                    caCertificates:
                      description: 'OPTIONAL: The path to the file containing certificate
                        authority certificates to use in verifying a presented server
                        certificate. If omitted, the proxy will not verify the server''s
                        certificate. Should be empty if mode is `ISTIO_MUTUAL`.'
                      format: string
                      type: string
                    clientCertificate:
                      description: REQUIRED if mode is `MUTUAL`. The path to the file
                        holding the client-side TLS certificate to use. Should be
                        empty if mode is `ISTIO_MUTUAL`.
                      format: string
                      type: string
                    mode:
                      description: 'REQUIRED: Indicates whether connections to this
                        port should be secured using TLS. The value of this field
                        determines how TLS is enforced.'
                      enum:
                      - DISABLE
                      - SIMPLE
                      - MUTUAL
                      - ISTIO_MUTUAL
                      type: string
                    privateKey:
                      description: REQUIRED if mode is `MUTUAL`. The path to the file
                        holding the client's private key. Should be empty if mode
                        is `ISTIO_MUTUAL`.
                      format: string
                      type: string
                    sni:
                      description: SNI string to present to the server during TLS
                        handshake.
                      format: string
                      type: string
                    subjectAltNames:
                      description: A list of alternate names to verify the subject
                        identity in the certificate. If specified, the proxy will
                        verify that the server certificate's subject alt name matches
                        one of the specified values. If specified, this list overrides
                        the value of subject_alt_names from the ServiceEntry.
                      items:
                        format: string
                        type: string
                      type: array
                  type: object
              type: object
          type: object
      type: object
  versions:
  - name: v1alpha3
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-pilot
    chart: istio
    heritage: Tiller
    release: istio
  name: envoyfilters.networking.istio.io
spec:
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: EnvoyFilter
    plural: envoyfilters
    singular: envoyfilter
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            configPatches:
              description: REQUIRED. One or more patches with match conditions.
              items:
                properties:
                  applyTo:
                    description: Specifies where in the Envoy configuration, the patch
                      should be applied. The match is expected to select the appropriate
                      object based on applyTo. For example, an applyTo with HTTP_FILTER
                      is expected to have a match condition on the listeners, with
                      a network filter selection on envoy.http_connection_manager
                      and a sub filter selection on the HTTP filter relative to which
                      the insertion should be performed. Similarly, an applyTo on
                      CLUSTER should have a match (if provided) on the cluster and
                      not on a listener.
                    enum:
                    - INVALID
                    - LISTENER
                    - FILTER_CHAIN
                    - NETWORK_FILTER
                    - HTTP_FILTER
                    - ROUTE_CONFIGURATION
                    - VIRTUAL_HOST
                    - HTTP_ROUTE
                    - CLUSTER
                    type: string
                  match:
                    description: Match on listener/route configuration/cluster.
                    oneOf:
                    - required:
                      - listener
                    - required:
                      - routeConfiguration
                    - required:
                      - cluster
                    properties:
                      cluster:
                        description: Match on envoy cluster attributes.
                        properties:
                          name:
                            description: The exact name of the cluster to match. To
                              match a specific cluster by name, such as the internally
                              generated "Passthrough" cluster, leave all fields in
                              clusterMatch empty, except the name.
                            format: string
                            type: string
                          portNumber:
                            description: The service port for which this cluster was
                              generated. If omitted, applies to clusters for any port.
                            type: integer
                          service:
                            description: The fully qualified service name for this
                              cluster. If omitted, applies to clusters for any service.
                              For services defined through service entries, the service
                              name is same as the hosts defined in the service entry.
                            format: string
                            type: string
                          subset:
                            description: The subset associated with the service. If
                              omitted, applies to clusters for any subset of a service.
                            format: string
                            type: string
                        type: object
                      context:
                        description: The specific config generation context to match
                          on. Istio Pilot generates envoy configuration in the context
                          of a gateway, inbound traffic to sidecar and outbound traffic
                          from sidecar.
                        enum:
                        - ANY
                        - SIDECAR_INBOUND
                        - SIDECAR_OUTBOUND
                        - GATEWAY
                        type: string
                      listener:
                        description: Match on envoy listener attributes.
                        properties:
                          filterChain:
                            description: Match a specific filter chain in a listener.
                              If specified, the patch will be applied to the filter
                              chain (and a specific filter if specified) and not to
                              other filter chains in the listener.
                            properties:
                              applicationProtocols:
                                description: Applies only to sidecars. If non-empty,
                                  a comma separated set of application protocols to
                                  consider when determining a filter chain match.
                                  This value will be compared against the application
                                  protocols of a new connection, when it's detected
                                  by one of the listener filters such as the http_inspector.
                                format: string
                                type: string
                              filter:
                                description: The name of a specific filter to apply
                                  the patch to. Set this to envoy.http_connection_manager
                                  to add a filter or apply a patch to the HTTP connection
                                  manager.
                                properties:
                                  name:
                                    description: The filter name to match on.
                                    format: string
                                    type: string
                                  subFilter:
                                    description: The next level filter within this
                                      filter to match upon. Typically used for HTTP
                                      Connection Manager filters and Thrift filters.
                                    properties:
                                      name:
                                        description: The filter name to match on.
                                        format: string
                                        type: string
                                    type: object
                                type: object
                              name:
                                description: The name assigned to the filter chain.
                                format: string
                                type: string
                              sni:
                                description: The SNI value used by a filter chain's
                                  match condition. This condition will evaluate to
                                  false if the filter chain has no sni match.
                                format: string
                                type: string
                              transportProtocol:
                                description: Applies only to SIDECAR_INBOUND context.
                                  If non-empty, a transport protocol to consider when
                                  determining a filter chain match. This value will
                                  be compared against the transport protocol of a
                                  new connection, when it's detected by the tls_inspector
                                  listener filter.
                                format: string
                                type: string
                            type: object
                          name:
                            description: Match a specific listener by its name. The
                              listeners generated by Pilot are typically named as
                              IP:Port.
                            format: string
                            type: string
                          portName:
                            description: Instead of using specific port numbers, a
                              set of ports matching a given service's port name can
                              be selected. Matching is case insensitive. Not implemented.
                              $hide_from_docs
                            format: string
                            type: string
                          portNumber:
                            description: The service port/gateway port to which traffic
                              is being sent/received. If not specified, matches all
                              listeners. Even though inbound listeners are generated
                              for the instance/pod ports, only service ports should
                              be used to match listeners.
                            type: integer
                        type: object
                      proxy:
                        description: Match on properties associated with a proxy.
                        properties:
                          metadata:
                            additionalProperties:
                              format: string
                              type: string
                            description: Match on the node metadata supplied by a
                              proxy when connecting to Istio Pilot. Note that while
                              Envoy's node metadata is of type Struct, only string
                              key-value pairs are processed by Pilot. All keys specified
                              in the metadata must match with exact values. The match
                              will fail if any of the specified keys are absent or
                              the values fail to match.
                            type: object
                          proxyVersion:
                            description: A regular expression in golang regex format
                              (RE2) that can be used to select proxies using a specific
                              version of istio proxy. The Istio version for a given
                              proxy is obtained from the node metadata field ISTIO_VERSION
                              supplied by the proxy when connecting to Pilot. This
                              value is embedded as an environment variable (ISTIO_META_ISTIO_VERSION)
                              in the Istio proxy docker image. Custom proxy implementations
                              should provide this metadata variable to take advantage
                              of the Istio version check option.
                            format: string
                            type: string
                        required:
                        - metadata
                        type: object
                      routeConfiguration:
                        description: Match on envoy HTTP route configuration attributes.
                        properties:
                          gateway:
                            description: The Istio gateway config's namespace/name
                              for which this route configuration was generated. Applies
                              only if the context is GATEWAY. Should be in the namespace/name
                              format. Use this field in conjunction with the portNumber
                              and portName to accurately select the Envoy route configuration
                              for a specific HTTPS server within a gateway config
                              object.
                            format: string
                            type: string
                          name:
                            description: Route configuration name to match on. Can
                              be used to match a specific route configuration by name,
                              such as the internally generated "http_proxy" route
                              configuration for all sidecars.
                            format: string
                            type: string
                          portName:
                            description: Applicable only for GATEWAY context. The
                              gateway server port name for which this route configuration
                              was generated.
                            format: string
                            type: string
                          portNumber:
                            description: The service port number or gateway server
                              port number for which this route configuration was generated.
                              If omitted, applies to route configurations for all
                              ports.
                            type: integer
                          vhost:
                            description: Match a specific virtual host in a route
                              configuration and apply the patch to the virtual host.
                            properties:
                              name:
                                description: The VirtualHosts objects generated by
                                  Istio are named as host:port, where the host typically
                                  corresponds to the VirtualService's host field or
                                  the hostname of a service in the registry.
                                format: string
                                type: string
                              route:
                                description: Match a specific route within the virtual
                                  host.
                                properties:
                                  action:
                                    description: Match a route with specific action
                                      type.
                                    enum:
                                    - ANY
                                    - ROUTE
                                    - REDIRECT
                                    - DIRECT_RESPONSE
                                    type: string
                                  name:
                                    description: The Route objects generated by default
                                      are named as "default". Route objects generated
                                      using a virtual service will carry the name
                                      used in the virtual service's HTTP routes.
                                    format: string
                                    type: string
                                type: object
                            type: object
                        type: object
                    type: object
                  patch:
                    description: The patch to apply along with the operation.
                    properties:
                      operation:
                        description: Determines how the patch should be applied.
                        enum:
                        - INVALID
                        - MERGE
                        - ADD
                        - REMOVE
                        - INSERT_BEFORE
                        - INSERT_AFTER
                        type: string
                      value:
                        description: The JSON config of the object being patched.
                          This will be merged using json merge semantics with the
                          existing proto in the path.
                        type: object
                    type: object
                type: object
              type: array
            filters:
              items:
                properties:
                  filterConfig:
                    description: 'REQUIRED: Filter specific configuration which depends
                      on the filter being instantiated.'
                    type: object
                  filterName:
                    description: 'REQUIRED: The name of the filter to instantiate.
                      The name must match a supported filter _compiled into_ Envoy.'
                    format: string
                    type: string
                  filterType:
                    description: 'REQUIRED: The type of filter to instantiate.'
                    enum:
                    - INVALID
                    - HTTP
                    - NETWORK
                    type: string
                  insertPosition:
                    description: Insert position in the filter chain. Defaults to
                      FIRST
                    properties:
                      index:
                        description: Position of this filter in the filter chain.
                        enum:
                        - FIRST
                        - LAST
                        - BEFORE
                        - AFTER
                        type: string
                      relativeTo:
                        description: If BEFORE or AFTER position is specified, specify
                          the name of the filter relative to which this filter should
                          be inserted.
                        format: string
                        type: string
                    type: object
                  listenerMatch:
                    description: Filter will be added to the listener only if the
                      match conditions are true. If not specified, the filters will
                      be applied to all listeners where possible, potentially resulting
                      in invalid configurations. It is recommended to specify the
                      listener match criteria for all filter insertions.
                    properties:
                      address:
                        description: One or more IP addresses to which the listener
                          is bound. If specified, should match at least one address
                          in the list.
                        items:
                          format: string
                          type: string
                        type: array
                      listenerProtocol:
                        description: Selects a class of listeners for the same protocol.
                          Use the protocol selection to select all HTTP listeners
                          (includes HTTP2/gRPC/HTTPS where Envoy terminates TLS) or
                          all TCP listeners (includes HTTPS passthrough using SNI).
                          When adding a HTTP filter, the listenerProtocol should be
                          set to HTTP.
                        enum:
                        - ALL
                        - HTTP
                        - TCP
                        type: string
                      listenerType:
                        description: Inbound vs outbound sidecar listener or gateway
                          listener. If not specified, matches all listeners.
                        enum:
                        - ANY
                        - SIDECAR_INBOUND
                        - SIDECAR_OUTBOUND
                        - GATEWAY
                        type: string
                      portNamePrefix:
                        description: Instead of using specific port numbers, a set
                          of ports matching a given port name prefix can be selected.
                          E.g., "mongo" selects ports named mongo-port, mongo, mongoDB,
                          MONGO, etc. Matching is case insensitive.
                        format: string
                        type: string
                      portNumber:
                        description: The service port/gateway port to which traffic
                          is being sent/received. If not specified, matches all listeners.
                          Even though inbound listeners are generated for the instance/pod
                          ports, only service ports should be used to match listeners.
                        type: integer
                    type: object
                type: object
              type: array
            workloadLabels:
              additionalProperties:
                format: string
                type: string
              description: Deprecated. Use workload_selector instead. $hide_from_docs
              type: object
            workloadSelector:
              description: Criteria used to select the specific set of pods/VMs on
                which this patch configuration should be applied. If omitted, the
                set of patches in this configuration will be applied to all workload
                instances in the same namespace. If omitted, the EnvoyFilter patches
                will be applied to all workloads in the same namespace. If the EnvoyFilter
                is present in the config root namespace, it will be applied to all
                applicable workloads in any namespace.
              properties:
                labels:
                  additionalProperties:
                    format: string
                    type: string
                  description: 'REQUIRED: One or more labels that indicate a specific
                    set of pods/VMs on which this sidecar configuration should be
                    applied. The scope of label search is restricted to the configuration
                    namespace in which the the resource is present.'
                  type: object
              required:
              - labels
              type: object
          required:
          - workloadLabels
          type: object
      type: object
  versions:
  - name: v1alpha3
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-pilot
    chart: istio
    heritage: Tiller
    release: istio
  name: gateways.networking.istio.io
spec:
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: Gateway
    plural: gateways
    shortNames:
    - gw
    singular: gateway
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            selector:
              additionalProperties:
                format: string
                type: string
              description: 'REQUIRED: One or more labels that indicate a specific
                set of pods/VMs on which this gateway configuration should be applied.
                The scope of label search is restricted to the configuration namespace
                in which the the resource is present. In other words, the Gateway
                resource must reside in the same namespace as the gateway workload
                instance.'
              type: object
            servers:
              description: 'REQUIRED: A list of server specifications.'
              items:
                properties:
                  bind:
                    description: 'The ip or the Unix domain socket to which the listener
                      should be bound to. Format: `x.x.x.x` or `unix:///path/to/uds`
                      or `unix://@foobar` (Linux abstract namespace). When using Unix
                      domain sockets, the port number should be 0.'
                    format: string
                    type: string
                  defaultEndpoint:
                    description: The loopback IP endpoint or Unix domain socket to
                      which traffic should be forwarded to by default. Format should
                      be `127.0.0.1:PORT` or `unix:///path/to/socket` or `unix://@foobar`
                      (Linux abstract namespace).
                    format: string
                    type: string
                  hosts:
                    description: REQUIRED. One or more hosts exposed by this gateway.
                      While typically applicable to HTTP services, it can also be
                      used for TCP services using TLS with SNI. A host is specified
                      as a `dnsName` with an optional `namespace/` prefix. The `dnsName`
                      should be specified using FQDN format, optionally including
                      a wildcard character in the left-most component (e.g., `prod/*.example.com`).
                      Set the `dnsName` to `*` to select all `VirtualService` hosts
                      from the specified namespace (e.g.,`prod/*`). If no `namespace/`
                      is specified, the `VirtualService` hosts will be selected from
                      any available namespace. Any associated `DestinationRule` in
                      the same namespace will also be used.
                    items:
                      format: string
                      type: string
                    type: array
                  port:
                    description: 'REQUIRED: The Port on which the proxy should listen
                      for incoming connections.'
                    properties:
                      name:
                        description: Label assigned to the port.
                        format: string
                        type: string
                      number:
                        description: 'REQUIRED: A valid non-negative integer port
                          number.'
                        type: integer
                      protocol:
                        description: 'REQUIRED: The protocol exposed on the port.
                          MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS. TLS
                          implies the connection will be routed based on the SNI header
                          to the destination without terminating the TLS connection.'
                        format: string
                        type: string
                    type: object
                  tls:
                    description: Set of TLS related options that govern the server's
                      behavior. Use these options to control if all http requests
                      should be redirected to https, and the TLS modes to use.
                    properties:
                      caCertificates:
                        description: REQUIRED if mode is `MUTUAL`. The path to a file
                          containing certificate authority certificates to use in
                          verifying a presented client side certificate.
                        format: string
                        type: string
                      cipherSuites:
                        description: 'Optional: If specified, only support the specified
                          cipher list. Otherwise default to the default cipher list
                          supported by Envoy.'
                        items:
                          format: string
                          type: string
                        type: array
                      credentialName:
                        description: The credentialName stands for a unique identifier
                          that can be used to identify the serverCertificate and the
                          privateKey. The credentialName appended with suffix "-cacert"
                          is used to identify the CaCertificates associated with this
                          server. Gateway workloads capable of fetching credentials
                          from a remote credential store such as Kubernetes secrets,
                          will be configured to retrieve the serverCertificate and
                          the privateKey using credentialName, instead of using the
                          file system paths specified above. If using mutual TLS,
                          gateway workload instances will retrieve the CaCertificates
                          using credentialName-cacert. The semantics of the name are
                          platform dependent. In Kubernetes, the default Istio supplied
                          credential server expects the credentialName to match the
                          name of the Kubernetes secret that holds the server certificate,
                          the private key, and the CA certificate (if using mutual
                          TLS). Set the `ISTIO_META_USER_SDS` metadata variable in
                          the gateway's proxy to enable the dynamic credential fetching
                          feature.
                        format: string
                        type: string
                      httpsRedirect:
                        description: If set to true, the load balancer will send a
                          301 redirect for all http connections, asking the clients
                          to use HTTPS.
                        type: boolean
                      maxProtocolVersion:
                        description: 'Optional: Maximum TLS protocol version.'
                        enum:
                        - TLS_AUTO
                        - TLSV1_0
                        - TLSV1_1
                        - TLSV1_2
                        - TLSV1_3
                        type: string
                      minProtocolVersion:
                        description: 'Optional: Minimum TLS protocol version.'
                        enum:
                        - TLS_AUTO
                        - TLSV1_0
                        - TLSV1_1
                        - TLSV1_2
                        - TLSV1_3
                        type: string
                      mode:
                        description: 'Optional: Indicates whether connections to this
                          port should be secured using TLS. The value of this field
                          determines how TLS is enforced.'
                        enum:
                        - PASSTHROUGH
                        - SIMPLE
                        - MUTUAL
                        - AUTO_PASSTHROUGH
                        - ISTIO_MUTUAL
                        type: string
                      privateKey:
                        description: REQUIRED if mode is `SIMPLE` or `MUTUAL`. The
                          path to the file holding the server's private key.
                        format: string
                        type: string
                      serverCertificate:
                        description: REQUIRED if mode is `SIMPLE` or `MUTUAL`. The
                          path to the file holding the server-side TLS certificate
                          to use.
                        format: string
                        type: string
                      subjectAltNames:
                        description: A list of alternate names to verify the subject
                          identity in the certificate presented by the client.
                        items:
                          format: string
                          type: string
                        type: array
                      verifyCertificateHash:
                        description: 'An optional list of hex-encoded SHA-256 hashes
                          of the authorized client certificates. Both simple and colon
                          separated formats are acceptable. Note: When both verify_certificate_hash
                          and verify_certificate_spki are specified, a hash matching
                          either value will result in the certificate being accepted.'
                        items:
                          format: string
                          type: string
                        type: array
                      verifyCertificateSpki:
                        description: 'An optional list of base64-encoded SHA-256 hashes
                          of the SKPIs of authorized client certificates. Note: When
                          both verify_certificate_hash and verify_certificate_spki
                          are specified, a hash matching either value will result
                          in the certificate being accepted.'
                        items:
                          format: string
                          type: string
                        type: array
                    type: object
                type: object
              type: array
          required:
          - selector
          type: object
      type: object
  versions:
  - name: v1alpha3
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-mixer
    chart: istio
    heritage: Tiller
    release: istio
  name: httpapispecbindings.config.istio.io
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - apim-istio-io
    kind: HTTPAPISpecBinding
    plural: httpapispecbindings
    singular: httpapispecbinding
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: HTTPAPISpecBinding defines the binding between HTTPAPISpecs
            and one or more IstioService. For example, the following establishes a
            binding between the HTTPAPISpec `petstore` and service `foo` in namespace
            `bar`.
          properties:
            apiSpecs:
              description: REQUIRED. One or more HTTPAPISpec references that should
                be mapped to the specified service(s). The aggregate collection of
                match conditions defined in the HTTPAPISpecs should not overlap.
              items:
                properties:
                  name:
                    description: REQUIRED. The short name of the HTTPAPISpec. This
                      is the resource name defined by the metadata name field.
                    format: string
                    type: string
                  namespace:
                    description: Optional namespace of the HTTPAPISpec. Defaults to
                      the encompassing HTTPAPISpecBinding's metadata namespace field.
                    format: string
                    type: string
                type: object
              type: array
            services:
              description: REQUIRED. One or more services to map the listed HTTPAPISpec
                onto.
              items:
                properties:
                  domain:
                    description: Domain suffix used to construct the service FQDN
                      in implementations that support such specification.
                    format: string
                    type: string
                  labels:
                    additionalProperties:
                      format: string
                      type: string
                    description: Optional one or more labels that uniquely identify
                      the service version.
                    type: object
                  name:
                    description: The short name of the service such as "foo".
                    format: string
                    type: string
                  namespace:
                    description: Optional namespace of the service. Defaults to value
                      of metadata namespace field.
                    format: string
                    type: string
                  service:
                    description: The service FQDN.
                    format: string
                    type: string
                required:
                - labels
                type: object
              type: array
          type: object
      type: object
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-mixer
    chart: istio
    heritage: Tiller
    release: istio
  name: httpapispecs.config.istio.io
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - apim-istio-io
    kind: HTTPAPISpec
    plural: httpapispecs
    singular: httpapispec
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: HTTPAPISpec defines the canonical configuration for generating
            API-related attributes from HTTP requests based on the method and uri
            templated path matches. It is sufficient for defining the API surface
            of a service for the purposes of API attribute generation. It is not intended
            to represent auth, quota, documentation, or other information commonly
            found in other API specifications, e.g. OpenAPI.
          properties:
            apiKeys:
              description: List of APIKey that describes how to extract an API-KEY
                from an HTTP request. The first API-Key match found in the list is
                used, i.e. 'OR' semantics.
              items:
                oneOf:
                - required:
                  - query
                - required:
                  - header
                - required:
                  - cookie
                properties:
                  cookie:
                    description: API key is sent in a [cookie](https://swagger.io/docs/specification/authentication/cookie-authentication),
                    format: string
                    type: string
                  header:
                    description: API key is sent in a request header. `header` represents
                      the header name.
                    format: string
                    type: string
                  query:
                    description: API Key is sent as a query parameter. `query` represents
                      the query string parameter name.
                    format: string
                    type: string
                type: object
              type: array
            attributes:
              description: List of attributes that are generated when *any* of the
                HTTP patterns match. This list typically includes the "api.service"
                and "api.version" attributes.
              properties:
                attributes:
                  additionalProperties:
                    oneOf:
                    - required:
                      - stringValue
                    - required:
                      - int64Value
                    - required:
                      - doubleValue
                    - required:
                      - boolValue
                    - required:
                      - bytesValue
                    - required:
                      - timestampValue
                    - required:
                      - durationValue
                    - required:
                      - stringMapValue
                    properties:
                      boolValue:
                        description: Used for values of type BOOL
                        type: boolean
                      bytesValue:
                        description: Used for values of type BYTES
                        format: binary
                        type: string
                      doubleValue:
                        description: Used for values of type DOUBLE
                        format: double
                        type: number
                      durationValue:
                        description: Used for values of type DURATION
                        type: string
                      int64Value:
                        description: Used for values of type INT64
                        format: int64
                        type: integer
                      stringMapValue:
                        description: Used for values of type STRING_MAP
                        properties:
                          entries:
                            additionalProperties:
                              format: string
                              type: string
                            description: Holds a set of name/value pairs.
                            type: object
                        required:
                        - entries
                        type: object
                      stringValue:
                        description: Used for values of type STRING, DNS_NAME, EMAIL_ADDRESS,
                          and URI
                        format: string
                        type: string
                      timestampValue:
                        description: Used for values of type TIMESTAMP
                        format: dateTime
                        type: string
                    type: object
                  description: A map of attribute name to its value.
                  type: object
              required:
              - attributes
              type: object
            patterns:
              description: List of HTTP patterns to match.
              items:
                oneOf:
                - required:
                  - uriTemplate
                - required:
                  - regex
                properties:
                  attributes:
                    description: List of attributes that are generated if the HTTP
                      request matches the specified http_method and uri_template.
                      This typically includes the "api.operation" attribute.
                    properties:
                      attributes:
                        additionalProperties:
                          oneOf:
                          - required:
                            - stringValue
                          - required:
                            - int64Value
                          - required:
                            - doubleValue
                          - required:
                            - boolValue
                          - required:
                            - bytesValue
                          - required:
                            - timestampValue
                          - required:
                            - durationValue
                          - required:
                            - stringMapValue
                          properties:
                            boolValue:
                              description: Used for values of type BOOL
                              type: boolean
                            bytesValue:
                              description: Used for values of type BYTES
                              format: binary
                              type: string
                            doubleValue:
                              description: Used for values of type DOUBLE
                              format: double
                              type: number
                            durationValue:
                              description: Used for values of type DURATION
                              type: string
                            int64Value:
                              description: Used for values of type INT64
                              format: int64
                              type: integer
                            stringMapValue:
                              description: Used for values of type STRING_MAP
                              properties:
                                entries:
                                  additionalProperties:
                                    format: string
                                    type: string
                                  description: Holds a set of name/value pairs.
                                  type: object
                              required:
                              - entries
                              type: object
                            stringValue:
                              description: Used for values of type STRING, DNS_NAME,
                                EMAIL_ADDRESS, and URI
                              format: string
                              type: string
                            timestampValue:
                              description: Used for values of type TIMESTAMP
                              format: dateTime
                              type: string
                          type: object
                        description: A map of attribute name to its value.
                        type: object
                    required:
                    - attributes
                    type: object
                  httpMethod:
                    description: 'HTTP request method to match against as defined
                      by [rfc7231](https://tools.ietf.org/html/rfc7231#page-21). For
                      example: GET, HEAD, POST, PUT, DELETE.'
                    format: string
                    type: string
                  regex:
                    description: 'EXPERIMENTAL: ecmascript style regex-based match
                      as defined by [EDCA-262](http://en.cppreference.com/w/cpp/regex/ecmascript).
                      For example,'
                    format: string
                    type: string
                  uriTemplate:
                    description: 'URI template to match against as defined by [rfc6570](https://tools.ietf.org/html/rfc6570).
                      For example, the following are valid URI templates: /pets /pets/{id}
                      /dictionary/{term:1}/{term} /search{?q*,lang}'
                    format: string
                    type: string
                type: object
              type: array
          type: object
      type: object
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-citadel
    chart: istio
    heritage: Tiller
    release: istio
  name: meshpolicies.authentication.istio.io
spec:
  group: authentication.istio.io
  names:
    categories:
    - istio-io
    - authentication-istio-io
    kind: MeshPolicy
    listKind: MeshPolicyList
    plural: meshpolicies
    singular: meshpolicy
  scope: Cluster
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: Policy defines what authentication methods can be accepted
            on workload(s), and if authenticated, which method/certificate will set
            the request principal (i.e request.auth.principal attribute).
          properties:
            originIsOptional:
              description: Set this flag to true to accept request (for origin authentication
                perspective), even when none of the origin authentication methods
                defined above satisfied. Typically, this is used to delay the rejection
                decision to next layer (e.g authorization). This flag is ignored if
                no authentication defined for origin (origins field is empty).
              type: boolean
            origins:
              description: List of authentication methods that can be used for origin
                authentication. Similar to peers, these will be evaluated in order;
                the first validate one will be used to set origin identity and attributes
                (i.e request.auth.user, request.auth.issuer etc). If none of these
                methods pass, request will be rejected with authentication failed
                error (401). A method may be skipped, depends on its trigger rule.
                If all of these methods are skipped, origin authentication will be
                ignored, as if it is not defined. Leave the list empty if origin authentication
                is not required.
              items:
                properties:
                  jwt:
                    description: Jwt params for the method.
                    properties:
                      audiences:
                        description: The list of JWT [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3).
                          that are allowed to access. A JWT containing any of these
                          audiences will be accepted.
                        items:
                          format: string
                          type: string
                        type: array
                      issuer:
                        description: Identifies the issuer that issued the JWT. See
                          [issuer](https://tools.ietf.org/html/rfc7519#section-4.1.1)
                          Usually a URL or an email address.
                        format: string
                        type: string
                      jwks:
                        description: JSON Web Key Set of public keys to validate signature
                          of the JWT. See https://auth0.com/docs/jwks.
                        format: string
                        type: string
                      jwksUri:
                        description: URL of the provider's public key set to validate
                          signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                        format: string
                        type: string
                      jwtHeaders:
                        description: JWT is sent in a request header. `header` represents
                          the header name.
                        items:
                          format: string
                          type: string
                        type: array
                      jwtParams:
                        description: JWT is sent in a query parameter. `query` represents
                          the query parameter name.
                        items:
                          format: string
                          type: string
                        type: array
                      triggerRules:
                        description: List of trigger rules to decide if this JWT should
                          be used to validate the request. The JWT validation happens
                          if any one of the rules matched. If the list is not empty
                          and none of the rules matched, authentication will skip
                          the JWT validation. Leave this empty to always trigger the
                          JWT validation.
                        items:
                          properties:
                            excludedPaths:
                              description: List of paths to be excluded from the request.
                                The rule is satisfied if request path does not match
                                to any of the path in this list.
                              items:
                                oneOf:
                                - required:
                                  - exact
                                - required:
                                  - prefix
                                - required:
                                  - suffix
                                - required:
                                  - regex
                                properties:
                                  exact:
                                    description: exact string match.
                                    format: string
                                    type: string
                                  prefix:
                                    description: prefix-based match.
                                    format: string
                                    type: string
                                  regex:
                                    description: 'ECMAscript style regex-based match
                                      as defined by [EDCA-262]( http://en.cppreference.com/w/cpp/regex/ecmascript).
                                      Example: "^/pets/(.*?)?"'
                                    format: string
                                    type: string
                                  suffix:
                                    description: suffix-based match.
                                    format: string
                                    type: string
                                type: object
                              type: array
                            includedPaths:
                              description: List of paths that the request must include.
                                If the list is not empty, the rule is satisfied if
                                request path matches at least one of the path in the
                                list. If the list is empty, the rule is ignored, in
                                other words the rule is always satisfied.
                              items:
                                oneOf:
                                - required:
                                  - exact
                                - required:
                                  - prefix
                                - required:
                                  - suffix
                                - required:
                                  - regex
                                properties:
                                  exact:
                                    description: exact string match.
                                    format: string
                                    type: string
                                  prefix:
                                    description: prefix-based match.
                                    format: string
                                    type: string
                                  regex:
                                    description: 'ECMAscript style regex-based match
                                      as defined by [EDCA-262]( http://en.cppreference.com/w/cpp/regex/ecmascript).
                                      Example: "^/pets/(.*?)?"'
                                    format: string
                                    type: string
                                  suffix:
                                    description: suffix-based match.
                                    format: string
                                    type: string
                                type: object
                              type: array
                          type: object
                        type: array
                    type: object
                type: object
              type: array
            peerIsOptional:
              description: Set this flag to true to accept request (for peer authentication
                perspective), even when none of the peer authentication methods defined
                above satisfied. Typically, this is used to delay the rejection decision
                to next layer (e.g authorization). This flag is ignored if no authentication
                defined for peer (peers field is empty).
              type: boolean
            peers:
              description: List of authentication methods that can be used for peer
                authentication. They will be evaluated in order; the first validate
                one will be used to set peer identity (source.user) and other peer
                attributes. If none of these methods pass, request will be rejected
                with authentication failed error (401). Leave the list empty if peer
                authentication is not required
              items:
                oneOf:
                - required:
                  - mtls
                - required:
                  - jwt
                properties:
                  jwt:
                    description: Set if JWT is used. This option is not yet available.
                    properties:
                      audiences:
                        description: The list of JWT [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3).
                          that are allowed to access. A JWT containing any of these
                          audiences will be accepted.
                        items:
                          format: string
                          type: string
                        type: array
                      issuer:
                        description: Identifies the issuer that issued the JWT. See
                          [issuer](https://tools.ietf.org/html/rfc7519#section-4.1.1)
                          Usually a URL or an email address.
                        format: string
                        type: string
                      jwks:
                        description: JSON Web Key Set of public keys to validate signature
                          of the JWT. See https://auth0.com/docs/jwks.
                        format: string
                        type: string
                      jwksUri:
                        description: URL of the provider's public key set to validate
                          signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                        format: string
                        type: string
                      jwtHeaders:
                        description: JWT is sent in a request header. `header` represents
                          the header name.
                        items:
                          format: string
                          type: string
                        type: array
                      jwtParams:
                        description: JWT is sent in a query parameter. `query` represents
                          the query parameter name.
                        items:
                          format: string
                          type: string
                        type: array
                      triggerRules:
                        description: List of trigger rules to decide if this JWT should
                          be used to validate the request. The JWT validation happens
                          if any one of the rules matched. If the list is not empty
                          and none of the rules matched, authentication will skip
                          the JWT validation. Leave this empty to always trigger the
                          JWT validation.
                        items:
                          properties:
                            excludedPaths:
                              description: List of paths to be excluded from the request.
                                The rule is satisfied if request path does not match
                                to any of the path in this list.
                              items:
                                oneOf:
                                - required:
                                  - exact
                                - required:
                                  - prefix
                                - required:
                                  - suffix
                                - required:
                                  - regex
                                properties:
                                  exact:
                                    description: exact string match.
                                    format: string
                                    type: string
                                  prefix:
                                    description: prefix-based match.
                                    format: string
                                    type: string
                                  regex:
                                    description: 'ECMAscript style regex-based match
                                      as defined by [EDCA-262]( http://en.cppreference.com/w/cpp/regex/ecmascript).
                                      Example: "^/pets/(.*?)?"'
                                    format: string
                                    type: string
                                  suffix:
                                    description: suffix-based match.
                                    format: string
                                    type: string
                                type: object
                              type: array
                            includedPaths:
                              description: List of paths that the request must include.
                                If the list is not empty, the rule is satisfied if
                                request path matches at least one of the path in the
                                list. If the list is empty, the rule is ignored, in
                                other words the rule is always satisfied.
                              items:
                                oneOf:
                                - required:
                                  - exact
                                - required:
                                  - prefix
                                - required:
                                  - suffix
                                - required:
                                  - regex
                                properties:
                                  exact:
                                    description: exact string match.
                                    format: string
                                    type: string
                                  prefix:
                                    description: prefix-based match.
                                    format: string
                                    type: string
                                  regex:
                                    description: 'ECMAscript style regex-based match
                                      as defined by [EDCA-262]( http://en.cppreference.com/w/cpp/regex/ecmascript).
                                      Example: "^/pets/(.*?)?"'
                                    format: string
                                    type: string
                                  suffix:
                                    description: suffix-based match.
                                    format: string
                                    type: string
                                type: object
                              type: array
                          type: object
                        type: array
                    type: object
                  mtls:
                    description: Set if mTLS is used.
                    properties:
                      allowTls:
                        description: WILL BE DEPRECATED, if set, will translates to
                          `TLS_PERMISSIVE` mode. Set this flag to true to allow regular
                          TLS (i.e without client x509 certificate). If request carries
                          client certificate, identity will be extracted and used
                          (set to peer identity). Otherwise, peer identity will be
                          left unset. When the flag is false (default), request must
                          have client certificate.
                        type: boolean
                      mode:
                        description: Defines the mode of mTLS authentication.
                        enum:
                        - STRICT
                        - PERMISSIVE
                        type: string
                    type: object
                type: object
              type: array
            principalBinding:
              description: Define whether peer or origin identity should be use for
                principal. Default value is USE_PEER. If peer (or origin) identity
                is not available, either because of peer/origin authentication is
                not defined, or failed, principal will be left unset. In other words,
                binding rule does not affect the decision to accept or reject request.
              enum:
              - USE_PEER
              - USE_ORIGIN
              type: string
            targets:
              description: List rules to select workloads that the policy should be
                applied on. If empty, policy will be used on all workloads in the
                same namespace.
              items:
                properties:
                  labels:
                    additionalProperties:
                      format: string
                      type: string
                    description: Select workload by labels. Once implemented, this
                      is the preferred way rather than using the service name.
                    type: object
                  name:
                    description: REQUIRED. The name must be a short name from the
                      service registry. The fully qualified domain name will be resolved
                      in a platform specific manner.
                    format: string
                    type: string
                  ports:
                    description: 'Specifies the ports. Note that this is the port(s)
                      exposed by the service, not workload instance ports. For example,
                      if a service is defined as below, then `8000` should be used,
                      not `9000`. ```yaml kind: Service metadata: ... spec: ports:
                      - name: http port: 8000 targetPort: 9000 selector: app: backend
                      ``` Leave empty to match all ports that are exposed.'
                    items:
                      oneOf:
                      - required:
                        - number
                      - required:
                        - name
                      properties:
                        name:
                          description: Port name
                          format: string
                          type: string
                        number:
                          description: Valid port number
                          type: integer
                      type: object
                    type: array
                required:
                - labels
                type: object
              type: array
          type: object
      type: object
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-citadel
    chart: istio
    heritage: Tiller
    release: istio
  name: policies.authentication.istio.io
spec:
  group: authentication.istio.io
  names:
    categories:
    - istio-io
    - authentication-istio-io
    kind: Policy
    plural: policies
    singular: policy
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: Policy defines what authentication methods can be accepted
            on workload(s), and if authenticated, which method/certificate will set
            the request principal (i.e request.auth.principal attribute).
          properties:
            originIsOptional:
              description: Set this flag to true to accept request (for origin authentication
                perspective), even when none of the origin authentication methods
                defined above satisfied. Typically, this is used to delay the rejection
                decision to next layer (e.g authorization). This flag is ignored if
                no authentication defined for origin (origins field is empty).
              type: boolean
            origins:
              description: List of authentication methods that can be used for origin
                authentication. Similar to peers, these will be evaluated in order;
                the first validate one will be used to set origin identity and attributes
                (i.e request.auth.user, request.auth.issuer etc). If none of these
                methods pass, request will be rejected with authentication failed
                error (401). A method may be skipped, depends on its trigger rule.
                If all of these methods are skipped, origin authentication will be
                ignored, as if it is not defined. Leave the list empty if origin authentication
                is not required.
              items:
                properties:
                  jwt:
                    description: Jwt params for the method.
                    properties:
                      audiences:
                        description: The list of JWT [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3).
                          that are allowed to access. A JWT containing any of these
                          audiences will be accepted.
                        items:
                          format: string
                          type: string
                        type: array
                      issuer:
                        description: Identifies the issuer that issued the JWT. See
                          [issuer](https://tools.ietf.org/html/rfc7519#section-4.1.1)
                          Usually a URL or an email address.
                        format: string
                        type: string
                      jwks:
                        description: JSON Web Key Set of public keys to validate signature
                          of the JWT. See https://auth0.com/docs/jwks.
                        format: string
                        type: string
                      jwksUri:
                        description: URL of the provider's public key set to validate
                          signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                        format: string
                        type: string
                      jwtHeaders:
                        description: JWT is sent in a request header. `header` represents
                          the header name.
                        items:
                          format: string
                          type: string
                        type: array
                      jwtParams:
                        description: JWT is sent in a query parameter. `query` represents
                          the query parameter name.
                        items:
                          format: string
                          type: string
                        type: array
                      triggerRules:
                        description: List of trigger rules to decide if this JWT should
                          be used to validate the request. The JWT validation happens
                          if any one of the rules matched. If the list is not empty
                          and none of the rules matched, authentication will skip
                          the JWT validation. Leave this empty to always trigger the
                          JWT validation.
                        items:
                          properties:
                            excludedPaths:
                              description: List of paths to be excluded from the request.
                                The rule is satisfied if request path does not match
                                to any of the path in this list.
                              items:
                                oneOf:
                                - required:
                                  - exact
                                - required:
                                  - prefix
                                - required:
                                  - suffix
                                - required:
                                  - regex
                                properties:
                                  exact:
                                    description: exact string match.
                                    format: string
                                    type: string
                                  prefix:
                                    description: prefix-based match.
                                    format: string
                                    type: string
                                  regex:
                                    description: 'ECMAscript style regex-based match
                                      as defined by [EDCA-262]( http://en.cppreference.com/w/cpp/regex/ecmascript).
                                      Example: "^/pets/(.*?)?"'
                                    format: string
                                    type: string
                                  suffix:
                                    description: suffix-based match.
                                    format: string
                                    type: string
                                type: object
                              type: array
                            includedPaths:
                              description: List of paths that the request must include.
                                If the list is not empty, the rule is satisfied if
                                request path matches at least one of the path in the
                                list. If the list is empty, the rule is ignored, in
                                other words the rule is always satisfied.
                              items:
                                oneOf:
                                - required:
                                  - exact
                                - required:
                                  - prefix
                                - required:
                                  - suffix
                                - required:
                                  - regex
                                properties:
                                  exact:
                                    description: exact string match.
                                    format: string
                                    type: string
                                  prefix:
                                    description: prefix-based match.
                                    format: string
                                    type: string
                                  regex:
                                    description: 'ECMAscript style regex-based match
                                      as defined by [EDCA-262]( http://en.cppreference.com/w/cpp/regex/ecmascript).
                                      Example: "^/pets/(.*?)?"'
                                    format: string
                                    type: string
                                  suffix:
                                    description: suffix-based match.
                                    format: string
                                    type: string
                                type: object
                              type: array
                          type: object
                        type: array
                    type: object
                type: object
              type: array
            peerIsOptional:
              description: Set this flag to true to accept request (for peer authentication
                perspective), even when none of the peer authentication methods defined
                above satisfied. Typically, this is used to delay the rejection decision
                to next layer (e.g authorization). This flag is ignored if no authentication
                defined for peer (peers field is empty).
              type: boolean
            peers:
              description: List of authentication methods that can be used for peer
                authentication. They will be evaluated in order; the first validate
                one will be used to set peer identity (source.user) and other peer
                attributes. If none of these methods pass, request will be rejected
                with authentication failed error (401). Leave the list empty if peer
                authentication is not required
              items:
                oneOf:
                - required:
                  - mtls
                - required:
                  - jwt
                properties:
                  jwt:
                    description: Set if JWT is used. This option is not yet available.
                    properties:
                      audiences:
                        description: The list of JWT [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3).
                          that are allowed to access. A JWT containing any of these
                          audiences will be accepted.
                        items:
                          format: string
                          type: string
                        type: array
                      issuer:
                        description: Identifies the issuer that issued the JWT. See
                          [issuer](https://tools.ietf.org/html/rfc7519#section-4.1.1)
                          Usually a URL or an email address.
                        format: string
                        type: string
                      jwks:
                        description: JSON Web Key Set of public keys to validate signature
                          of the JWT. See https://auth0.com/docs/jwks.
                        format: string
                        type: string
                      jwksUri:
                        description: URL of the provider's public key set to validate
                          signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                        format: string
                        type: string
                      jwtHeaders:
                        description: JWT is sent in a request header. `header` represents
                          the header name.
                        items:
                          format: string
                          type: string
                        type: array
                      jwtParams:
                        description: JWT is sent in a query parameter. `query` represents
                          the query parameter name.
                        items:
                          format: string
                          type: string
                        type: array
                      triggerRules:
                        description: List of trigger rules to decide if this JWT should
                          be used to validate the request. The JWT validation happens
                          if any one of the rules matched. If the list is not empty
                          and none of the rules matched, authentication will skip
                          the JWT validation. Leave this empty to always trigger the
                          JWT validation.
                        items:
                          properties:
                            excludedPaths:
                              description: List of paths to be excluded from the request.
                                The rule is satisfied if request path does not match
                                to any of the path in this list.
                              items:
                                oneOf:
                                - required:
                                  - exact
                                - required:
                                  - prefix
                                - required:
                                  - suffix
                                - required:
                                  - regex
                                properties:
                                  exact:
                                    description: exact string match.
                                    format: string
                                    type: string
                                  prefix:
                                    description: prefix-based match.
                                    format: string
                                    type: string
                                  regex:
                                    description: 'ECMAscript style regex-based match
                                      as defined by [EDCA-262]( http://en.cppreference.com/w/cpp/regex/ecmascript).
                                      Example: "^/pets/(.*?)?"'
                                    format: string
                                    type: string
                                  suffix:
                                    description: suffix-based match.
                                    format: string
                                    type: string
                                type: object
                              type: array
                            includedPaths:
                              description: List of paths that the request must include.
                                If the list is not empty, the rule is satisfied if
                                request path matches at least one of the path in the
                                list. If the list is empty, the rule is ignored, in
                                other words the rule is always satisfied.
                              items:
                                oneOf:
                                - required:
                                  - exact
                                - required:
                                  - prefix
                                - required:
                                  - suffix
                                - required:
                                  - regex
                                properties:
                                  exact:
                                    description: exact string match.
                                    format: string
                                    type: string
                                  prefix:
                                    description: prefix-based match.
                                    format: string
                                    type: string
                                  regex:
                                    description: 'ECMAscript style regex-based match
                                      as defined by [EDCA-262]( http://en.cppreference.com/w/cpp/regex/ecmascript).
                                      Example: "^/pets/(.*?)?"'
                                    format: string
                                    type: string
                                  suffix:
                                    description: suffix-based match.
                                    format: string
                                    type: string
                                type: object
                              type: array
                          type: object
                        type: array
                    type: object
                  mtls:
                    description: Set if mTLS is used.
                    properties:
                      allowTls:
                        description: WILL BE DEPRECATED, if set, will translates to
                          `TLS_PERMISSIVE` mode. Set this flag to true to allow regular
                          TLS (i.e without client x509 certificate). If request carries
                          client certificate, identity will be extracted and used
                          (set to peer identity). Otherwise, peer identity will be
                          left unset. When the flag is false (default), request must
                          have client certificate.
                        type: boolean
                      mode:
                        description: Defines the mode of mTLS authentication.
                        enum:
                        - STRICT
                        - PERMISSIVE
                        type: string
                    type: object
                type: object
              type: array
            principalBinding:
              description: Define whether peer or origin identity should be use for
                principal. Default value is USE_PEER. If peer (or origin) identity
                is not available, either because of peer/origin authentication is
                not defined, or failed, principal will be left unset. In other words,
                binding rule does not affect the decision to accept or reject request.
              enum:
              - USE_PEER
              - USE_ORIGIN
              type: string
            targets:
              description: List rules to select workloads that the policy should be
                applied on. If empty, policy will be used on all workloads in the
                same namespace.
              items:
                properties:
                  labels:
                    additionalProperties:
                      format: string
                      type: string
                    description: Select workload by labels. Once implemented, this
                      is the preferred way rather than using the service name.
                    type: object
                  name:
                    description: REQUIRED. The name must be a short name from the
                      service registry. The fully qualified domain name will be resolved
                      in a platform specific manner.
                    format: string
                    type: string
                  ports:
                    description: 'Specifies the ports. Note that this is the port(s)
                      exposed by the service, not workload instance ports. For example,
                      if a service is defined as below, then `8000` should be used,
                      not `9000`. ```yaml kind: Service metadata: ... spec: ports:
                      - name: http port: 8000 targetPort: 9000 selector: app: backend
                      ``` Leave empty to match all ports that are exposed.'
                    items:
                      oneOf:
                      - required:
                        - number
                      - required:
                        - name
                      properties:
                        name:
                          description: Port name
                          format: string
                          type: string
                        number:
                          description: Valid port number
                          type: integer
                      type: object
                    type: array
                required:
                - labels
                type: object
              type: array
          type: object
      type: object
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-mixer
    chart: istio
    heritage: Tiller
    release: istio
  name: quotaspecbindings.config.istio.io
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - apim-istio-io
    kind: QuotaSpecBinding
    plural: quotaspecbindings
    singular: quotaspecbinding
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: QuotaSpecBinding defines the binding between QuotaSpecs and
            one or more IstioService.
          properties:
            quotaSpecs:
              description: REQUIRED. One or more QuotaSpec references that should
                be mapped to the specified service(s). The aggregate collection of
                match conditions defined in the QuotaSpecs should not overlap.
              items:
                properties:
                  name:
                    description: REQUIRED. The short name of the QuotaSpec. This is
                      the resource name defined by the metadata name field.
                    format: string
                    type: string
                  namespace:
                    description: Optional namespace of the QuotaSpec. Defaults to
                      the value of the metadata namespace field.
                    format: string
                    type: string
                type: object
              type: array
            services:
              description: REQUIRED. One or more services to map the listed QuotaSpec
                onto.
              items:
                properties:
                  domain:
                    description: Domain suffix used to construct the service FQDN
                      in implementations that support such specification.
                    format: string
                    type: string
                  labels:
                    additionalProperties:
                      format: string
                      type: string
                    description: Optional one or more labels that uniquely identify
                      the service version.
                    type: object
                  name:
                    description: The short name of the service such as "foo".
                    format: string
                    type: string
                  namespace:
                    description: Optional namespace of the service. Defaults to value
                      of metadata namespace field.
                    format: string
                    type: string
                  service:
                    description: The service FQDN.
                    format: string
                    type: string
                required:
                - labels
                type: object
              type: array
          type: object
      type: object
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-mixer
    chart: istio
    heritage: Tiller
    release: istio
  name: quotaspecs.config.istio.io
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - apim-istio-io
    kind: QuotaSpec
    plural: quotaspecs
    singular: quotaspec
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: Determines the quotas used for individual requests.
          properties:
            rules:
              description: A list of Quota rules.
              items:
                properties:
                  match:
                    description: If empty, match all request. If any of match is true,
                      it is matched.
                    items:
                      properties:
                        clause:
                          additionalProperties:
                            oneOf:
                            - required:
                              - exact
                            - required:
                              - prefix
                            - required:
                              - regex
                            properties:
                              exact:
                                description: exact string match
                                format: string
                                type: string
                              prefix:
                                description: prefix-based match
                                format: string
                                type: string
                              regex:
                                description: ECMAscript style regex-based match
                                format: string
                                type: string
                            type: object
                          description: Map of attribute names to StringMatch type.
                            Each map element specifies one condition to match.
                          type: object
                      required:
                      - clause
                      type: object
                    type: array
                  quotas:
                    description: The list of quotas to charge.
                    items:
                      properties:
                        charge:
                          description: The quota amount to charge
                          format: int64
                          type: integer
                        quota:
                          description: The quota name to charge
                          format: string
                          type: string
                      type: object
                    type: array
                type: object
              type: array
          type: object
      type: object
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: mixer
    chart: istio
    heritage: Tiller
    istio: rbac
    package: istio.io.mixer
    release: istio
  name: rbacconfigs.rbac.istio.io
spec:
  group: rbac.istio.io
  names:
    categories:
    - istio-io
    - rbac-istio-io
    kind: RbacConfig
    plural: rbacconfigs
    singular: rbacconfig
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: RbacConfig implements the ClusterRbaConfig Custom Resource
            Definition for controlling Istio RBAC behavior. The ClusterRbaConfig Custom
            Resource is a singleton where only one ClusterRbaConfig should be created
            globally in the mesh and the namespace should be the same to other Istio
            components, which usually is `istio-system`.
          properties:
            enforcementMode:
              description: Indicates enforcement mode of the RbacConfig, in ENFORCED
                mode by default. It's used to verify new RbacConfig work as expected
                before rolling to production. When setting as PERMISSIVE, RBAC isn't
                enforced and has no impact on users. RBAC engine run RbacConfig in
                PERMISSIVE mode and logs stats. Invalid to set RbacConfig in PERMISSIVE
                and ServiceRoleBinding in ENFORCED mode.
              enum:
              - ENFORCED
              - PERMISSIVE
              type: string
            exclusion:
              description: 'A list of services or namespaces that should not be enforced
                by Istio RBAC policies. Note: This field have effect only when mode
                is ON_WITH_EXCLUSION and will be ignored for any other modes.'
              properties:
                namespaces:
                  description: A list of namespaces.
                  items:
                    format: string
                    type: string
                  type: array
                services:
                  description: A list of services.
                  items:
                    format: string
                    type: string
                  type: array
              type: object
            inclusion:
              description: 'A list of services or namespaces that should be enforced
                by Istio RBAC policies. Note: This field have effect only when mode
                is ON_WITH_INCLUSION and will be ignored for any other modes.'
              properties:
                namespaces:
                  description: A list of namespaces.
                  items:
                    format: string
                    type: string
                  type: array
                services:
                  description: A list of services.
                  items:
                    format: string
                    type: string
                  type: array
              type: object
            mode:
              description: Istio RBAC mode.
              enum:
              - "OFF"
              - "ON"
              - ON_WITH_INCLUSION
              - ON_WITH_EXCLUSION
              type: string
          type: object
      type: object
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: mixer
    chart: istio
    heritage: Tiller
    istio: core
    package: istio.io.mixer
    release: istio
  name: rules.config.istio.io
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: rule
    plural: rules
    singular: rule
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: A Rule is a selector and a set of intentions to be executed
            when the selector is `true`
          properties:
            actions:
              description: Optional. The actions that will be executed when match
                evaluates to `true`.
              items:
                properties:
                  handler:
                    description: Required. Fully qualified name of the handler to
                      invoke. Must match the `name` of a [Handler][istio.policy.v1beta1.Handler.name].
                    format: string
                    type: string
                  instances:
                    description: Required. Each value must match the fully qualified
                      name of the [Instance][istio.policy.v1beta1.Instance.name]s.
                      Referenced instances are evaluated by resolving the attributes/literals
                      for all the fields. The constructed objects are then passed
                      to the `handler` referenced within this action.
                    items:
                      format: string
                      type: string
                    type: array
                  name:
                    description: Optional. A handle to refer to the results of the
                      action.
                    format: string
                    type: string
                type: object
              type: array
            match:
              description: Required. Match is an attribute based predicate. When Mixer
                receives a request it evaluates the match expression and executes
                all the associated `actions` if the match evaluates to true.
              format: string
              type: string
            requestHeaderOperations:
              description: Optional. Templatized operations on the request headers
                using values produced by the rule actions. Require the check action
                result to be OK.
              items:
                properties:
                  name:
                    description: Required. Header name literal value.
                    format: string
                    type: string
                  operation:
                    description: Optional. Header operation type. Default operation
                      is to replace the value of the header by name.
                    enum:
                    - REPLACE
                    - REMOVE
                    - APPEND
                    type: string
                  values:
                    description: Optional. Header value expressions.
                    items:
                      format: string
                      type: string
                    type: array
                type: object
              type: array
            responseHeaderOperations:
              description: Optional. Templatized operations on the response headers
                using values produced by the rule actions. Require the check action
                result to be OK.
              items:
                properties:
                  name:
                    description: Required. Header name literal value.
                    format: string
                    type: string
                  operation:
                    description: Optional. Header operation type. Default operation
                      is to replace the value of the header by name.
                    enum:
                    - REPLACE
                    - REMOVE
                    - APPEND
                    type: string
                  values:
                    description: Optional. Header value expressions.
                    items:
                      format: string
                      type: string
                    type: array
                type: object
              type: array
            sampling:
              description: Optional. Provides the ability to add a sampling configuration
                for Mixer rules. This sampling will limit the scenarios in which the
                `actions` of the rule are executed. The sampling will only take place
                after a `match` predicate has evaluated to true.
              properties:
                random:
                  description: Optional. Provides filtering of actions based on random
                    selection per request.
                  properties:
                    attributeExpression:
                      description: Specifies an attribute expression to use to override
                        the numerator in the `percent_sampled` field. If this value
                        is set, but no value is found OR if that value is not a numeric
                        value, then the derived sampling rate will be 0 (meaning no
                        `Action`s are executed for a `Rule`).
                      format: string
                      type: string
                    percentSampled:
                      description: The default sampling rate, expressed as a percentage.
                        Defaults to 0% with a denominator of 100.
                      properties:
                        denominator:
                          description: Specifies the denominator. If the denominator
                            specified is less than the numerator, the final fractional
                            percentage is capped at 1 (100%).
                          enum:
                          - HUNDRED
                          - TEN_THOUSAND
                          type: string
                        numerator:
                          description: Specifies the numerator. Defaults to 0.
                          type: integer
                      type: object
                    useIndependentRandomness:
                      description: By default sampling will be based on the value
                        of the request header `x-request-id`. This behavior will cause
                        consistent sampling across `Rule`s and for the full trace
                        of a request through a mesh (across hosts). If that value
                        is not present and/or `use_independent_randomness` is set
                        to true, the sampling will be done based on the value of attribute
                        specified in `attribute_epxression`. If that attribute does
                        not exist, the system will behave as if the sampling rate
                        was 0 (meaning no `Action`s are executed for a `Rule`).
                      type: boolean
                  type: object
                rateLimit:
                  description: Optional. Provides filtering of actions based on number
                    of requests observed within a configured time window.
                  properties:
                    maxUnsampledEntries:
                      description: Number of entries to allow during the `sampling_duration`
                        before sampling is enforced.
                      format: int64
                      type: integer
                    samplingDuration:
                      description: Window in which to enforce the sampling rate.
                      type: string
                    samplingRate:
                      description: The rate at which to sample entries once the unsampled
                        limit has been reached. Sampling will be enforced as 1 per
                        every `sampling_rate` entries allowed.
                      format: int64
                      type: integer
                  type: object
              type: object
          type: object
      type: object
  versions:
  - name: v1alpha2
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-pilot
    chart: istio
    heritage: Tiller
    release: istio
  name: serviceentries.networking.istio.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.hosts
    description: The hosts associated with the ServiceEntry
    name: Hosts
    type: string
  - JSONPath: .spec.location
    description: Whether the service is external to the mesh or part of the mesh (MESH_EXTERNAL
      or MESH_INTERNAL)
    name: Location
    type: string
  - JSONPath: .spec.resolution
    description: Service discovery mode for the hosts (NONE, STATIC, or DNS)
    name: Resolution
    type: string
  - JSONPath: .metadata.creationTimestamp
    description: |-
      CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
      Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    name: Age
    type: date
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: ServiceEntry
    listKind: ServiceEntryList
    plural: serviceentries
    shortNames:
    - se
    singular: serviceentry
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            addresses:
              description: The virtual IP addresses associated with the service. Could
                be CIDR prefix. For HTTP traffic, generated route configurations will
                include http route domains for both the `addresses` and `hosts` field
                values and the destination will be identified based on the HTTP Host/Authority
                header. If one or more IP addresses are specified, the incoming traffic
                will be identified as belonging to this service if the destination
                IP matches the IP/CIDRs specified in the addresses field. If the Addresses
                field is empty, traffic will be identified solely based on the destination
                port. In such scenarios, the port on which the service is being accessed
                must not be shared by any other service in the mesh. In other words,
                the sidecar will behave as a simple TCP proxy, forwarding incoming
                traffic on a specified port to the specified destination endpoint
                IP/host. Unix domain socket addresses are not supported in this field.
              items:
                format: string
                type: string
              type: array
            endpoints:
              description: One or more endpoints associated with the service.
              items:
                properties:
                  address:
                    description: 'REQUIRED: Address associated with the network endpoint
                      without the port. Domain names can be used if and only if the
                      resolution is set to DNS, and must be fully-qualified without
                      wildcards. Use the form unix:///absolute/path/to/socket for
                      Unix domain socket endpoints.'
                    format: string
                    type: string
                  labels:
                    additionalProperties:
                      format: string
                      type: string
                    description: One or more labels associated with the endpoint.
                    type: object
                  locality:
                    description: The locality associated with the endpoint. A locality
                      corresponds to a failure domain (e.g., country/region/zone).
                      Arbitrary failure domain hierarchies can be represented by separating
                      each encapsulating failure domain by /. For example, the locality
                      of an an endpoint in US, in US-East-1 region, within availability
                      zone az-1, in data center rack r11 can be represented as us/us-east-1/az-1/r11.
                      Istio will configure the sidecar to route to endpoints within
                      the same locality as the sidecar. If none of the endpoints in
                      the locality are available, endpoints parent locality (but within
                      the same network ID) will be chosen. For example, if there are
                      two endpoints in same network (networkID "n1"), say e1 with
                      locality us/us-east-1/az-1/r11 and e2 with locality us/us-east-1/az-2/r12,
                      a sidecar from us/us-east-1/az-1/r11 locality will prefer e1
                      from the same locality over e2 from a different locality. Endpoint
                      e2 could be the IP associated with a gateway (that bridges networks
                      n1 and n2), or the IP associated with a standard service endpoint.
                    format: string
                    type: string
                  network:
                    description: Network enables Istio to group endpoints resident
                      in the same L3 domain/network. All endpoints in the same network
                      are assumed to be directly reachable from one another. When
                      endpoints in different networks cannot reach each other directly,
                      an Istio Gateway can be used to establish connectivity (usually
                      using the AUTO_PASSTHROUGH mode in a Gateway Server). This is
                      an advanced configuration used typically for spanning an Istio
                      mesh over multiple clusters.
                    format: string
                    type: string
                  ports:
                    additionalProperties:
                      type: integer
                    description: Set of ports associated with the endpoint. The ports
                      must be associated with a port name that was declared as part
                      of the service. Do not use for `unix://` addresses.
                    type: object
                  weight:
                    description: The load balancing weight associated with the endpoint.
                      Endpoints with higher weights will receive proportionally higher
                      traffic.
                    type: integer
                required:
                - labels
                - ports
                type: object
              type: array
            exportTo:
              description: A list of namespaces to which this service is exported.
                Exporting a service allows it to be used by sidecars, gateways and
                virtual services defined in other namespaces. This feature provides
                a mechanism for service owners and mesh administrators to control
                the visibility of services across namespace boundaries.
              items:
                format: string
                type: string
              type: array
            hosts:
              description: REQUIRED. The hosts associated with the ServiceEntry. Could
                be a DNS name with wildcard prefix.
              items:
                format: string
                type: string
              type: array
            location:
              description: Specify whether the service should be considered external
                to the mesh or part of the mesh.
              enum:
              - MESH_EXTERNAL
              - MESH_INTERNAL
              type: string
            ports:
              description: REQUIRED. The ports associated with the external service.
                If the Endpoints are Unix domain socket addresses, there must be exactly
                one port.
              items:
                properties:
                  name:
                    description: Label assigned to the port.
                    format: string
                    type: string
                  number:
                    description: 'REQUIRED: A valid non-negative integer port number.'
                    type: integer
                  protocol:
                    description: 'REQUIRED: The protocol exposed on the port. MUST
                      BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS. TLS implies the
                      connection will be routed based on the SNI header to the destination
                      without terminating the TLS connection.'
                    format: string
                    type: string
                type: object
              type: array
            resolution:
              description: 'REQUIRED: Service discovery mode for the hosts. Care must
                be taken when setting the resolution mode to NONE for a TCP port without
                accompanying IP addresses. In such cases, traffic to any IP on said
                port will be allowed (i.e. 0.0.0.0:<port>).'
              enum:
              - NONE
              - STATIC
              - DNS
              type: string
            subjectAltNames:
              description: The list of subject alternate names allowed for workload
                instances that implement this service. This information is used to
                enforce [secure-naming](https://istio.io/docs/concepts/security/#secure-naming).
                If specified, the proxy will verify that the server certificate's
                subject alternate name matches one of the specified values.
              items:
                format: string
                type: string
              type: array
          type: object
      type: object
  versions:
  - name: v1alpha3
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: mixer
    chart: istio
    heritage: Tiller
    istio: rbac
    package: istio.io.mixer
    release: istio
  name: servicerolebindings.rbac.istio.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.roleRef.name
    description: The name of the ServiceRole object being referenced
    name: Reference
    type: string
  - JSONPath: .metadata.creationTimestamp
    description: |-
      CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
      Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    name: Age
    type: date
  group: rbac.istio.io
  names:
    categories:
    - istio-io
    - rbac-istio-io
    kind: ServiceRoleBinding
    plural: servicerolebindings
    singular: servicerolebinding
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: ServiceRoleBinding assigns a ServiceRole to a list of subjects.
          properties:
            actions:
              description: 'Inline role definition. An inline role is a role that
                is defined inside an authorization policy, instead of explicitly defined
                in a ServiceRole object. Inline roles can be used for the role definitions
                that are not intended to be reused in other bindings, while explicit
                roles are reusable. Both inline roles (defined in "actions" field)
                and explicit roles (defined in ServiceRole) are supported. Users should
                use only one of them in a single binding. For example, the following
                “product-frontend” AuthorizationPolicy allows “frontend” service to
                view “product” service on “/info” path. ```yaml apiVersion: "rbac.istio.io/v1alpha1"
                kind: AuthorizationPolicy metadata: name: product-frontend namespace:
                ns1 spec: selector: labels: app: product allow: - subjects: - names:
                ["cluster.local/ns/default/sa/frontend"] actions: - paths: ["/info"]
                methods: ["GET"] Required. The set of access rules (permissions) that
                the role has.'
              items:
                properties:
                  constraints:
                    description: Optional. Extra constraints in the ServiceRole specification.
                    items:
                      properties:
                        key:
                          description: Key of the constraint.
                          format: string
                          type: string
                        values:
                          description: List of valid values for the constraint. Exact
                            match, prefix match, and suffix match are supported. For
                            example, the value "v1alpha2" matches "v1alpha2" (exact
                            match), or "v1*" (prefix match), or "*alpha2" (suffix
                            match).
                          items:
                            format: string
                            type: string
                          type: array
                      type: object
                    type: array
                  hosts:
                    description: Optional. A list of HTTP hosts. This is matched against
                      the HOST header in a HTTP request. Exact match, prefix match
                      and suffix match are supported. For example, the host "test.abc.com"
                      matches "test.abc.com" (exact match), or "*.abc.com" (prefix
                      match), or "test.abc.*" (suffix match). If not specified, it
                      matches to any host. This field should not be set for TCP services.
                      The policy will be ignored.
                    items:
                      format: string
                      type: string
                    type: array
                  methods:
                    description: Optional. A list of HTTP methods (e.g., "GET", "POST").
                      If not specified or specified as "*", it matches to any methods.
                      This field should not be set for TCP services. The policy will
                      be ignored. For gRPC services, only `POST` is allowed; other
                      methods will result in denying services.
                    items:
                      format: string
                      type: string
                    type: array
                  notHosts:
                    description: Optional. A list of HTTP hosts that must not be matched.
                    items:
                      format: string
                      type: string
                    type: array
                  notMethods:
                    description: 'Optional. A list of HTTP methods that must not be
                      matched. Note: It''s an error to set methods and not_methods
                      at the same time.'
                    items:
                      format: string
                      type: string
                    type: array
                  notPaths:
                    description: Optional. A list of HTTP paths or gRPC methods that
                      must not be matched.
                    items:
                      format: string
                      type: string
                    type: array
                  notPorts:
                    description: 'Optional. A list of port numbers that must not be
                      matched. Note: It''s an error to set ports and not_ports at
                      the same time.'
                    items:
                      format: int32
                      type: integer
                    type: array
                  paths:
                    description: Optional. A list of HTTP paths or gRPC methods. gRPC
                      methods must be presented as fully-qualified name in the form
                      of "/packageName.serviceName/methodName" and are case sensitive.
                      Exact match, prefix match, and suffix match are supported. For
                      example, the path "/books/review" matches "/books/review" (exact
                      match), or "/books/*" (prefix match), or "*/review" (suffix
                      match). If not specified, it matches to any path. This field
                      should not be set for TCP services. The policy will be ignored.
                    items:
                      format: string
                      type: string
                    type: array
                  ports:
                    description: 'Optional. A list of port numbers of the request.
                      If not specified, it matches to any port number. Note: It''s
                      an error to set ports and not_ports at the same time.'
                    items:
                      format: int32
                      type: integer
                    type: array
                  services:
                    description: Required. A list of service names. Exact match, prefix
                      match, and suffix match are supported for service names. For
                      example, the service name "bookstore.mtv.cluster.local" matches
                      "bookstore.mtv.cluster.local" (exact match), or "bookstore*"
                      (prefix match), or "*.mtv.cluster.local" (suffix match). If
                      set to ["*"], it refers to all services in the namespace.
                    items:
                      format: string
                      type: string
                    type: array
                type: object
              type: array
            mode:
              description: Indicates enforcement mode of the ServiceRoleBinding.
              enum:
              - ENFORCED
              - PERMISSIVE
              type: string
            role:
              description: A `role` inside a ServiceRoleBinding refers to the ServiceRole
                that this ServiceRoleBinding binds to. A ServiceRoleBinding can bind
                to a ServiceRole in the same namespace or the root namespace. A ServiceRole
                in the root namespace represents a mesh global ServiceRole. The value
                of `role` is the name of the ServiceRole, and it can start with or
                without a forward slash ("/"). When a `role` starts with "/", e.g.
                "/service-viewer", it means that this ServiceRoleBinding refers to
                the ServiceRole in the configurable Istio root namespace. When a `role`
                starts without "/", this ServiceRoleBinding refers to the ServiceRole
                in the same namespace as the AuthorizationPolicy's, which contains
                said ServiceRoleBinding.
              format: string
              type: string
            roleRef:
              description: Required. Reference to the ServiceRole object.
              properties:
                kind:
                  description: Required. The type of the role being referenced. Currently,
                    "ServiceRole" is the only supported value for "kind".
                  format: string
                  type: string
                name:
                  description: Required. The name of the ServiceRole object being
                    referenced. The ServiceRole object must be in the same namespace
                    as the ServiceRoleBinding object.
                  format: string
                  type: string
              type: object
            subjects:
              description: Required. List of subjects that are assigned the ServiceRole
                object.
              items:
                properties:
                  group:
                    description: Optional. The group that the subject belongs to.
                      Deprecated. Use groups and not_groups instead.
                    format: string
                    type: string
                  groups:
                    description: Optional. A list of groups that the subject represents.
                      This is matched to the `request.auth.claims[groups]` attribute.
                      If not specified, it applies to any groups.
                    items:
                      format: string
                      type: string
                    type: array
                  ips:
                    description: Optional. A list of IP address or CIDR ranges that
                      the subject represents. E.g. 192.168.100.2 or 10.1.0.0/16. If
                      not specified, it applies to any IP addresses.
                    items:
                      format: string
                      type: string
                    type: array
                  names:
                    description: Optional. A list of subject names. This is matched
                      to the `source.principal` attribute. If one of subject names
                      is "*", it matches to a subject with any name. Prefix and suffix
                      matches are supported.
                    items:
                      format: string
                      type: string
                    type: array
                  namespaces:
                    description: Optional. A list of namespaces that the subject represents.
                      This is matched to the `source.namespace` attribute. If not
                      specified, it applies to any namespaces.
                    items:
                      format: string
                      type: string
                    type: array
                  notGroups:
                    description: Optional. A list of groups that must not be matched.
                    items:
                      format: string
                      type: string
                    type: array
                  notIps:
                    description: Optional. A list of IP addresses or CIDR ranges that
                      must not be matched.
                    items:
                      format: string
                      type: string
                    type: array
                  notNames:
                    description: Optional. A list of subject names that must not be
                      matched.
                    items:
                      format: string
                      type: string
                    type: array
                  notNamespaces:
                    description: Optional. A list of namespaces that must not be matched.
                    items:
                      format: string
                      type: string
                    type: array
                  properties:
                    additionalProperties:
                      format: string
                      type: string
                    description: Optional. The set of properties that identify the
                      subject.
                    type: object
                  user:
                    description: Optional. The user name/ID that the subject represents.
                    format: string
                    type: string
                required:
                - properties
                type: object
              type: array
          type: object
      type: object
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: mixer
    chart: istio
    heritage: Tiller
    istio: rbac
    package: istio.io.mixer
    release: istio
  name: serviceroles.rbac.istio.io
spec:
  group: rbac.istio.io
  names:
    categories:
    - istio-io
    - rbac-istio-io
    kind: ServiceRole
    plural: serviceroles
    singular: servicerole
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: ServiceRole specification contains a list of access rules (permissions).
          properties:
            rules:
              description: Required. The set of access rules (permissions) that the
                role has.
              items:
                properties:
                  constraints:
                    description: Optional. Extra constraints in the ServiceRole specification.
                    items:
                      properties:
                        key:
                          description: Key of the constraint.
                          format: string
                          type: string
                        values:
                          description: List of valid values for the constraint. Exact
                            match, prefix match, and suffix match are supported. For
                            example, the value "v1alpha2" matches "v1alpha2" (exact
                            match), or "v1*" (prefix match), or "*alpha2" (suffix
                            match).
                          items:
                            format: string
                            type: string
                          type: array
                      type: object
                    type: array
                  hosts:
                    description: Optional. A list of HTTP hosts. This is matched against
                      the HOST header in a HTTP request. Exact match, prefix match
                      and suffix match are supported. For example, the host "test.abc.com"
                      matches "test.abc.com" (exact match), or "*.abc.com" (prefix
                      match), or "test.abc.*" (suffix match). If not specified, it
                      matches to any host. This field should not be set for TCP services.
                      The policy will be ignored.
                    items:
                      format: string
                      type: string
                    type: array
                  methods:
                    description: Optional. A list of HTTP methods (e.g., "GET", "POST").
                      If not specified or specified as "*", it matches to any methods.
                      This field should not be set for TCP services. The policy will
                      be ignored. For gRPC services, only `POST` is allowed; other
                      methods will result in denying services.
                    items:
                      format: string
                      type: string
                    type: array
                  notHosts:
                    description: Optional. A list of HTTP hosts that must not be matched.
                    items:
                      format: string
                      type: string
                    type: array
                  notMethods:
                    description: 'Optional. A list of HTTP methods that must not be
                      matched. Note: It''s an error to set methods and not_methods
                      at the same time.'
                    items:
                      format: string
                      type: string
                    type: array
                  notPaths:
                    description: Optional. A list of HTTP paths or gRPC methods that
                      must not be matched.
                    items:
                      format: string
                      type: string
                    type: array
                  notPorts:
                    description: 'Optional. A list of port numbers that must not be
                      matched. Note: It''s an error to set ports and not_ports at
                      the same time.'
                    items:
                      format: int32
                      type: integer
                    type: array
                  paths:
                    description: Optional. A list of HTTP paths or gRPC methods. gRPC
                      methods must be presented as fully-qualified name in the form
                      of "/packageName.serviceName/methodName" and are case sensitive.
                      Exact match, prefix match, and suffix match are supported. For
                      example, the path "/books/review" matches "/books/review" (exact
                      match), or "/books/*" (prefix match), or "*/review" (suffix
                      match). If not specified, it matches to any path. This field
                      should not be set for TCP services. The policy will be ignored.
                    items:
                      format: string
                      type: string
                    type: array
                  ports:
                    description: 'Optional. A list of port numbers of the request.
                      If not specified, it matches to any port number. Note: It''s
                      an error to set ports and not_ports at the same time.'
                    items:
                      format: int32
                      type: integer
                    type: array
                  services:
                    description: Required. A list of service names. Exact match, prefix
                      match, and suffix match are supported for service names. For
                      example, the service name "bookstore.mtv.cluster.local" matches
                      "bookstore.mtv.cluster.local" (exact match), or "bookstore*"
                      (prefix match), or "*.mtv.cluster.local" (suffix match). If
                      set to ["*"], it refers to all services in the namespace.
                    items:
                      format: string
                      type: string
                    type: array
                type: object
              type: array
          type: object
      type: object
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-pilot
    chart: istio
    heritage: Tiller
    release: istio
  name: sidecars.networking.istio.io
spec:
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: Sidecar
    plural: sidecars
    singular: sidecar
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            egress:
              description: REQUIRED. Egress specifies the configuration of the sidecar
                for processing outbound traffic from the attached workload instance
                to other services in the mesh.
              items:
                properties:
                  bind:
                    description: 'The ip or the Unix domain socket to which the listener
                      should be bound to. Port MUST be specified if bind is not empty.
                      Format: `x.x.x.x` or `unix:///path/to/uds` or `unix://@foobar`
                      (Linux abstract namespace). If omitted, Istio will automatically
                      configure the defaults based on imported services, the workload
                      instances to which this configuration is applied to and the
                      captureMode. If captureMode is NONE, bind will default to 127.0.0.1.'
                    format: string
                    type: string
                  captureMode:
                    description: When the bind address is an IP, the captureMode option
                      dictates how traffic to the listener is expected to be captured
                      (or not). captureMode must be DEFAULT or NONE for Unix domain
                      socket binds.
                    enum:
                    - DEFAULT
                    - IPTABLES
                    - NONE
                    type: string
                  hosts:
                    description: 'REQUIRED: One or more service hosts exposed by the
                      listener in `namespace/dnsName` format. Services in the specified
                      namespace matching `dnsName` will be exposed. The corresponding
                      service can be a service in the service registry (e.g., a Kubernetes
                      or cloud foundry service) or a service specified using a `ServiceEntry`
                      or `VirtualService` configuration. Any associated `DestinationRule`
                      in the same namespace will also be used.'
                    items:
                      format: string
                      type: string
                    type: array
                  port:
                    description: The port associated with the listener. If using Unix
                      domain socket, use 0 as the port number, with a valid protocol.
                      The port if specified, will be used as the default destination
                      port associated with the imported hosts. If the port is omitted,
                      Istio will infer the listener ports based on the imported hosts.
                      Note that when multiple egress listeners are specified, where
                      one or more listeners have specific ports while others have
                      no port, the hosts exposed on a listener port will be based
                      on the listener with the most specific port.
                    properties:
                      name:
                        description: Label assigned to the port.
                        format: string
                        type: string
                      number:
                        description: 'REQUIRED: A valid non-negative integer port
                          number.'
                        type: integer
                      protocol:
                        description: 'REQUIRED: The protocol exposed on the port.
                          MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS. TLS
                          implies the connection will be routed based on the SNI header
                          to the destination without terminating the TLS connection.'
                        format: string
                        type: string
                    type: object
                type: object
              type: array
            ingress:
              description: Ingress specifies the configuration of the sidecar for
                processing inbound traffic to the attached workload instance. If omitted,
                Istio will automatically configure the sidecar based on the information
                about the workload obtained from the orchestration platform (e.g.,
                exposed ports, services, etc.). If specified, inbound ports are configured
                if and only if the workload instance is associated with a service.
              items:
                properties:
                  bind:
                    description: The ip to which the listener should be bound. Must
                      be in the format `x.x.x.x`. Unix domain socket addresses are
                      not allowed in the bind field for ingress listeners. If omitted,
                      Istio will automatically configure the defaults based on imported
                      services and the workload instances to which this configuration
                      is applied to.
                    format: string
                    type: string
                  captureMode:
                    description: The captureMode option dictates how traffic to the
                      listener is expected to be captured (or not).
                    enum:
                    - DEFAULT
                    - IPTABLES
                    - NONE
                    type: string
                  defaultEndpoint:
                    description: 'REQUIRED: The loopback IP endpoint or Unix domain
                      socket to which traffic should be forwarded to. This configuration
                      can be used to redirect traffic arriving at the bind IP:Port
                      on the sidecar to a localhost:port or Unix domain socket where
                      the application workload instance is listening for connections.
                      Format should be 127.0.0.1:PORT or `unix:///path/to/socket`'
                    format: string
                    type: string
                  port:
                    description: REQUIRED. The port associated with the listener.
                    properties:
                      name:
                        description: Label assigned to the port.
                        format: string
                        type: string
                      number:
                        description: 'REQUIRED: A valid non-negative integer port
                          number.'
                        type: integer
                      protocol:
                        description: 'REQUIRED: The protocol exposed on the port.
                          MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS. TLS
                          implies the connection will be routed based on the SNI header
                          to the destination without terminating the TLS connection.'
                        format: string
                        type: string
                    type: object
                type: object
              type: array
            outboundTrafficPolicy:
              description: This allows to configure the outbound traffic policy. If
                your application uses one or more external services that are not known
                apriori, setting the policy to ALLOW_ANY will cause the sidecars to
                route any unknown traffic originating from the application to its
                requested destination.
              properties:
                mode:
                  enum:
                  - REGISTRY_ONLY
                  - ALLOW_ANY
                  type: string
              type: object
            workloadSelector:
              description: Criteria used to select the specific set of pods/VMs on
                which this sidecar configuration should be applied. If omitted, the
                sidecar configuration will be applied to all workload instances in
                the same namespace.
              properties:
                labels:
                  additionalProperties:
                    format: string
                    type: string
                  description: 'REQUIRED: One or more labels that indicate a specific
                    set of pods/VMs on which this sidecar configuration should be
                    applied. The scope of label search is restricted to the configuration
                    namespace in which the the resource is present.'
                  type: object
              required:
              - labels
              type: object
          type: object
      type: object
  versions:
  - name: v1alpha3
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  creationTimestamp: null
  labels:
    app: istio-pilot
    chart: istio
    heritage: Tiller
    release: istio
  name: virtualservices.networking.istio.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.gateways
    description: The names of gateways and sidecars that should apply these routes
    name: Gateways
    type: string
  - JSONPath: .spec.hosts
    description: The destination hosts to which traffic is being sent
    name: Hosts
    type: string
  - JSONPath: .metadata.creationTimestamp
    description: |-
      CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
      Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    name: Age
    type: date
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: VirtualService
    listKind: VirtualServiceList
    plural: virtualservices
    shortNames:
    - vs
    singular: virtualservice
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            exportTo:
              description: A list of namespaces to which this virtual service is exported.
                Exporting a virtual service allows it to be used by sidecars and gateways
                defined in other namespaces. This feature provides a mechanism for
                service owners and mesh administrators to control the visibility of
                virtual services across namespace boundaries.
              items:
                format: string
                type: string
              type: array
            gateways:
              description: The names of gateways and sidecars that should apply these
                routes. A single VirtualService is used for sidecars inside the mesh
                as well as for one or more gateways. The selection condition imposed
                by this field can be overridden using the source field in the match
                conditions of protocol-specific routes. The reserved word `mesh` is
                used to imply all the sidecars in the mesh. When this field is omitted,
                the default gateway (`mesh`) will be used, which would apply the rule
                to all sidecars in the mesh. If a list of gateway names is provided,
                the rules will apply only to the gateways. To apply the rules to both
                gateways and sidecars, specify `mesh` as one of the gateway names.
              items:
                format: string
                type: string
              type: array
            hosts:
              description: REQUIRED. The destination hosts to which traffic is being
                sent. Could be a DNS name with wildcard prefix or an IP address. Depending
                on the platform, short-names can also be used instead of a FQDN (i.e.
                has no dots in the name). In such a scenario, the FQDN of the host
                would be derived based on the underlying platform.
              items:
                format: string
                type: string
              type: array
            http:
              description: An ordered list of route rules for HTTP traffic. HTTP routes
                will be applied to platform service ports named 'http-*'/'http2-*'/'grpc-*',
                gateway ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS
                and service entry ports using HTTP/HTTP2/GRPC protocols. The first
                rule matching an incoming request is used.
              items:
                properties:
                  appendHeaders:
                    additionalProperties:
                      format: string
                      type: string
                    type: object
                  appendRequestHeaders:
                    additionalProperties:
                      format: string
                      type: string
                    type: object
                  appendResponseHeaders:
                    additionalProperties:
                      format: string
                      type: string
                    type: object
                  corsPolicy:
                    description: Cross-Origin Resource Sharing policy (CORS). Refer
                      to [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
                      for further details about cross origin resource sharing.
                    properties:
                      allowCredentials:
                        description: Indicates whether the caller is allowed to send
                          the actual request (not the preflight) using credentials.
                          Translates to `Access-Control-Allow-Credentials` header.
                        nullable: true
                        type: boolean
                      allowHeaders:
                        description: List of HTTP headers that can be used when requesting
                          the resource. Serialized to Access-Control-Allow-Headers
                          header.
                        items:
                          format: string
                          type: string
                        type: array
                      allowMethods:
                        description: List of HTTP methods allowed to access the resource.
                          The content will be serialized into the Access-Control-Allow-Methods
                          header.
                        items:
                          format: string
                          type: string
                        type: array
                      allowOrigin:
                        description: The list of origins that are allowed to perform
                          CORS requests. The content will be serialized into the Access-Control-Allow-Origin
                          header. Wildcard * will allow all origins.
                        items:
                          format: string
                          type: string
                        type: array
                      exposeHeaders:
                        description: A white list of HTTP headers that the browsers
                          are allowed to access. Serialized into Access-Control-Expose-Headers
                          header.
                        items:
                          format: string
                          type: string
                        type: array
                      maxAge:
                        description: Specifies how long the results of a preflight
                          request can be cached. Translates to the `Access-Control-Max-Age`
                          header.
                        type: string
                    type: object
                  fault:
                    description: Fault injection policy to apply on HTTP traffic at
                      the client side. Note that timeouts or retries will not be enabled
                      when faults are enabled on the client side.
                    properties:
                      abort:
                        description: Abort Http request attempts and return error
                          codes back to downstream service, giving the impression
                          that the upstream service is faulty.
                        oneOf:
                        - required:
                          - httpStatus
                        - required:
                          - grpcStatus
                        - required:
                          - http2Error
                        properties:
                          grpcStatus:
                            format: string
                            type: string
                          http2Error:
                            format: string
                            type: string
                          httpStatus:
                            description: REQUIRED. HTTP status code to use to abort
                              the Http request.
                            format: int32
                            type: integer
                          percent:
                            description: Percentage of requests to be aborted with
                              the error code provided (0-100). Use of integer `percent`
                              value is deprecated. Use the double `percentage` field
                              instead.
                            format: int32
                            type: integer
                          percentage:
                            description: Percentage of requests to be aborted with
                              the error code provided.
                            properties:
                              value:
                                format: double
                                type: number
                            type: object
                        type: object
                      delay:
                        description: Delay requests before forwarding, emulating various
                          failures such as network issues, overloaded upstream service,
                          etc.
                        oneOf:
                        - required:
                          - fixedDelay
                        - required:
                          - exponentialDelay
                        properties:
                          exponentialDelay:
                            type: string
                          fixedDelay:
                            description: 'REQUIRED. Add a fixed delay before forwarding
                              the request. Format: 1h/1m/1s/1ms. MUST be >=1ms.'
                            type: string
                          percent:
                            description: Percentage of requests on which the delay
                              will be injected (0-100). Use of integer `percent` value
                              is deprecated. Use the double `percentage` field instead.
                            format: int32
                            type: integer
                          percentage:
                            description: Percentage of requests on which the delay
                              will be injected.
                            properties:
                              value:
                                format: double
                                type: number
                            type: object
                        type: object
                    type: object
                  headers:
                    description: Header manipulation rules
                    properties:
                      request:
                        description: Header manipulation rules to apply before forwarding
                          a request to the destination service
                        properties:
                          add:
                            additionalProperties:
                              format: string
                              type: string
                            description: Append the given values to the headers specified
                              by keys (will create a comma-separated list of values)
                            type: object
                          remove:
                            description: Remove a the specified headers
                            items:
                              format: string
                              type: string
                            type: array
                          set:
                            additionalProperties:
                              format: string
                              type: string
                            description: Overwrite the headers specified by key with
                              the given values
                            type: object
                        required:
                        - set
                        - add
                        type: object
                      response:
                        description: Header manipulation rules to apply before returning
                          a response to the caller
                        properties:
                          add:
                            additionalProperties:
                              format: string
                              type: string
                            description: Append the given values to the headers specified
                              by keys (will create a comma-separated list of values)
                            type: object
                          remove:
                            description: Remove a the specified headers
                            items:
                              format: string
                              type: string
                            type: array
                          set:
                            additionalProperties:
                              format: string
                              type: string
                            description: Overwrite the headers specified by key with
                              the given values
                            type: object
                        required:
                        - set
                        - add
                        type: object
                    type: object
                  match:
                    description: Match conditions to be satisfied for the rule to
                      be activated. All conditions inside a single match block have
                      AND semantics, while the list of match blocks have OR semantics.
                      The rule is matched if any one of the match blocks succeed.
                    items:
                      properties:
                        authority:
                          description: 'HTTP Authority values are case-sensitive and
                            formatted as follows: - `exact: "value"` for exact string
                            match'
                          oneOf:
                          - required:
                            - exact
                          - required:
                            - prefix
                          - required:
                            - regex
                          properties:
                            exact:
                              description: exact string match
                              format: string
                              type: string
                            prefix:
                              description: prefix-based match
                              format: string
                              type: string
                            regex:
                              description: ECMAscript style regex-based match
                              format: string
                              type: string
                          type: object
                        gateways:
                          items:
                            format: string
                            type: string
                          type: array
                        headers:
                          additionalProperties:
                            oneOf:
                            - required:
                              - exact
                            - required:
                              - prefix
                            - required:
                              - regex
                            properties:
                              exact:
                                description: exact string match
                                format: string
                                type: string
                              prefix:
                                description: prefix-based match
                                format: string
                                type: string
                              regex:
                                description: ECMAscript style regex-based match
                                format: string
                                type: string
                            type: object
                          description: The header keys must be lowercase and use hyphen
                            as the separator, e.g. _x-request-id_.
                          type: object
                        ignoreUriCase:
                          description: Flag to specify whether the URI matching should
                            be case-insensitive.
                          type: boolean
                        method:
                          description: 'HTTP Method values are case-sensitive and
                            formatted as follows: - `exact: "value"` for exact string
                            match'
                          oneOf:
                          - required:
                            - exact
                          - required:
                            - prefix
                          - required:
                            - regex
                          properties:
                            exact:
                              description: exact string match
                              format: string
                              type: string
                            prefix:
                              description: prefix-based match
                              format: string
                              type: string
                            regex:
                              description: ECMAscript style regex-based match
                              format: string
                              type: string
                          type: object
                        name:
                          description: The name assigned to a match. The match's name
                            will be concatenated with the parent route's name and
                            will be logged in the access logs for requests matching
                            this route.
                          format: string
                          type: string
                        port:
                          description: Specifies the ports on the host that is being
                            addressed. Many services only expose a single port or
                            label ports with the protocols they support, in these
                            cases it is not required to explicitly select the port.
                          type: integer
                        queryParams:
                          additionalProperties:
                            oneOf:
                            - required:
                              - exact
                            - required:
                              - prefix
                            - required:
                              - regex
                            properties:
                              exact:
                                description: exact string match
                                format: string
                                type: string
                              prefix:
                                description: prefix-based match
                                format: string
                                type: string
                              regex:
                                description: ECMAscript style regex-based match
                                format: string
                                type: string
                            type: object
                          description: Query parameters for matching.
                          type: object
                        scheme:
                          description: 'URI Scheme values are case-sensitive and formatted
                            as follows: - `exact: "value"` for exact string match'
                          oneOf:
                          - required:
                            - exact
                          - required:
                            - prefix
                          - required:
                            - regex
                          properties:
                            exact:
                              description: exact string match
                              format: string
                              type: string
                            prefix:
                              description: prefix-based match
                              format: string
                              type: string
                            regex:
                              description: ECMAscript style regex-based match
                              format: string
                              type: string
                          type: object
                        sourceLabels:
                          additionalProperties:
                            format: string
                            type: string
                          type: object
                        uri:
                          description: 'URI to match values are case-sensitive and
                            formatted as follows: - `exact: "value"` for exact string
                            match'
                          oneOf:
                          - required:
                            - exact
                          - required:
                            - prefix
                          - required:
                            - regex
                          properties:
                            exact:
                              description: exact string match
                              format: string
                              type: string
                            prefix:
                              description: prefix-based match
                              format: string
                              type: string
                            regex:
                              description: ECMAscript style regex-based match
                              format: string
                              type: string
                          type: object
                      required:
                      - headers
                      - sourceLabels
                      - queryParams
                      type: object
                    type: array
                  mirror:
                    description: Mirror HTTP traffic to a another destination in addition
                      to forwarding the requests to the intended destination. Mirrored
                      traffic is on a best effort basis where the sidecar/gateway
                      will not wait for the mirrored cluster to respond before returning
                      the response from the original destination. Statistics will
                      be generated for the mirrored destination.
                    properties:
                      host:
                        description: REQUIRED. The name of a service from the service
                          registry. Service names are looked up from the platform's
                          service registry (e.g., Kubernetes services, Consul services,
                          etc.) and from the hosts declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/v1alpha3/service-entry/#ServiceEntry).
                          Traffic forwarded to destinations that are not found in
                          either of the two, will be dropped.
                        format: string
                        type: string
                      port:
                        description: Specifies the port on the host that is being
                          addressed. If a service exposes only a single port it is
                          not required to explicitly select the port.
                        oneOf:
                        - required:
                          - number
                        - required:
                          - name
                        properties:
                          name:
                            format: string
                            type: string
                          number:
                            description: Valid port number
                            type: integer
                        type: object
                      subset:
                        description: The name of a subset within the service. Applicable
                          only to services within the mesh. The subset must be defined
                          in a corresponding DestinationRule.
                        format: string
                        type: string
                    type: object
                  name:
                    description: The name assigned to the route for debugging purposes.
                      The route's name will be concatenated with the match's name
                      and will be logged in the access logs for requests matching
                      this route/match.
                    format: string
                    type: string
                  redirect:
                    description: A http rule can either redirect or forward (default)
                      traffic. If traffic passthrough option is specified in the rule,
                      route/redirect will be ignored. The redirect primitive can be
                      used to send a HTTP 301 redirect to a different URI or Authority.
                    properties:
                      authority:
                        description: On a redirect, overwrite the Authority/Host portion
                          of the URL with this value.
                        format: string
                        type: string
                      redirectCode:
                        description: On a redirect, Specifies the HTTP status code
                          to use in the redirect response. The default response code
                          is MOVED_PERMANENTLY (301).
                        type: integer
                      uri:
                        description: On a redirect, overwrite the Path portion of
                          the URL with this value. Note that the entire path will
                          be replaced, irrespective of the request URI being matched
                          as an exact path or prefix.
                        format: string
                        type: string
                    type: object
                  removeRequestHeaders:
                    items:
                      format: string
                      type: string
                    type: array
                  removeResponseHeaders:
                    items:
                      format: string
                      type: string
                    type: array
                  retries:
                    description: Retry policy for HTTP requests.
                    properties:
                      attempts:
                        description: REQUIRED. Number of retries for a given request.
                          The interval between retries will be determined automatically
                          (25ms+). Actual number of retries attempted depends on the
                          httpReqTimeout.
                        format: int32
                        type: integer
                      perTryTimeout:
                        description: 'Timeout per retry attempt for a given request.
                          format: 1h/1m/1s/1ms. MUST BE >=1ms.'
                        type: string
                      retryOn:
                        description: Specifies the conditions under which retry takes
                          place. One or more policies can be specified using a ‘,’
                          delimited list. See the [supported policies](https://www.envoyproxy.io/docs/envoy/latest/configuration/http_filters/router_filter#x-envoy-retry-on)
                          and [here](https://www.envoyproxy.io/docs/envoy/latest/configuration/http_filters/router_filter#x-envoy-retry-grpc-on)
                          for more details.
                        format: string
                        type: string
                    type: object
                  rewrite:
                    description: Rewrite HTTP URIs and Authority headers. Rewrite
                      cannot be used with Redirect primitive. Rewrite will be performed
                      before forwarding.
                    properties:
                      authority:
                        description: rewrite the Authority/Host header with this value.
                        format: string
                        type: string
                      uri:
                        description: rewrite the path (or the prefix) portion of the
                          URI with this value. If the original URI was matched based
                          on prefix, the value provided in this field will replace
                          the corresponding matched prefix.
                        format: string
                        type: string
                    type: object
                  route:
                    description: A http rule can either redirect or forward (default)
                      traffic. The forwarding target can be one of several versions
                      of a service (see glossary in beginning of document). Weights
                      associated with the service version determine the proportion
                      of traffic it receives.
                    items:
                      properties:
                        appendRequestHeaders:
                          additionalProperties:
                            format: string
                            type: string
                          description: Use of `append_request_headers` is deprecated.
                            Use the `headers` field instead.
                          type: object
                        appendResponseHeaders:
                          additionalProperties:
                            format: string
                            type: string
                          description: Use of `append_response_headers` is deprecated.
                            Use the `headers` field instead.
                          type: object
                        destination:
                          description: REQUIRED. Destination uniquely identifies the
                            instances of a service to which the request/connection
                            should be forwarded to.
                          properties:
                            host:
                              description: REQUIRED. The name of a service from the
                                service registry. Service names are looked up from
                                the platform's service registry (e.g., Kubernetes
                                services, Consul services, etc.) and from the hosts
                                declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/v1alpha3/service-entry/#ServiceEntry).
                                Traffic forwarded to destinations that are not found
                                in either of the two, will be dropped.
                              format: string
                              type: string
                            port:
                              description: Specifies the port on the host that is
                                being addressed. If a service exposes only a single
                                port it is not required to explicitly select the port.
                              oneOf:
                              - required:
                                - number
                              - required:
                                - name
                              properties:
                                name:
                                  format: string
                                  type: string
                                number:
                                  description: Valid port number
                                  type: integer
                              type: object
                            subset:
                              description: The name of a subset within the service.
                                Applicable only to services within the mesh. The subset
                                must be defined in a corresponding DestinationRule.
                              format: string
                              type: string
                          type: object
                        headers:
                          description: Header manipulation rules
                          properties:
                            request:
                              description: Header manipulation rules to apply before
                                forwarding a request to the destination service
                              properties:
                                add:
                                  additionalProperties:
                                    format: string
                                    type: string
                                  description: Append the given values to the headers
                                    specified by keys (will create a comma-separated
                                    list of values)
                                  type: object
                                remove:
                                  description: Remove a the specified headers
                                  items:
                                    format: string
                                    type: string
                                  type: array
                                set:
                                  additionalProperties:
                                    format: string
                                    type: string
                                  description: Overwrite the headers specified by
                                    key with the given values
                                  type: object
                              required:
                              - set
                              - add
                              type: object
                            response:
                              description: Header manipulation rules to apply before
                                returning a response to the caller
                              properties:
                                add:
                                  additionalProperties:
                                    format: string
                                    type: string
                                  description: Append the given values to the headers
                                    specified by keys (will create a comma-separated
                                    list of values)
                                  type: object
                                remove:
                                  description: Remove a the specified headers
                                  items:
                                    format: string
                                    type: string
                                  type: array
                                set:
                                  additionalProperties:
                                    format: string
                                    type: string
                                  description: Overwrite the headers specified by
                                    key with the given values
                                  type: object
                              required:
                              - set
                              - add
                              type: object
                          type: object
                        removeRequestHeaders:
                          description: Use of `remove_request_headers` is deprecated.
                            Use the `headers` field instead.
                          items:
                            format: string
                            type: string
                          type: array
                        removeResponseHeaders:
                          description: Use of `remove_response_header` is deprecated.
                            Use the `headers` field instead.
                          items:
                            format: string
                            type: string
                          type: array
                        weight:
                          description: REQUIRED. The proportion of traffic to be forwarded
                            to the service version. (0-100). Sum of weights across
                            destinations SHOULD BE == 100. If there is only one destination
                            in a rule, the weight value is assumed to be 100.
                          format: int32
                          type: integer
                      required:
                      - appendResponseHeaders
                      - appendRequestHeaders
                      type: object
                    type: array
                  timeout:
                    description: Timeout for HTTP requests.
                    type: string
                  websocketUpgrade:
                    description: Deprecated. Websocket upgrades are done automatically
                      starting from Istio 1.0. $hide_from_docs
                    type: boolean
                required:
                - appendHeaders
                - appendResponseHeaders
                - appendRequestHeaders
                type: object
              type: array
            tcp:
              description: An ordered list of route rules for opaque TCP traffic.
                TCP routes will be applied to any port that is not a HTTP or TLS port.
                The first rule matching an incoming request is used.
              items:
                properties:
                  match:
                    description: Match conditions to be satisfied for the rule to
                      be activated. All conditions inside a single match block have
                      AND semantics, while the list of match blocks have OR semantics.
                      The rule is matched if any one of the match blocks succeed.
                    items:
                      properties:
                        destinationSubnets:
                          description: IPv4 or IPv6 ip addresses of destination with
                            optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d.
                          items:
                            format: string
                            type: string
                          type: array
                        gateways:
                          description: Names of gateways where the rule should be
                            applied to. Gateway names at the top of the VirtualService
                            (if any) are overridden. The gateway match is independent
                            of sourceLabels.
                          items:
                            format: string
                            type: string
                          type: array
                        port:
                          description: Specifies the port on the host that is being
                            addressed. Many services only expose a single port or
                            label ports with the protocols they support, in these
                            cases it is not required to explicitly select the port.
                          type: integer
                        sourceLabels:
                          additionalProperties:
                            format: string
                            type: string
                          description: One or more labels that constrain the applicability
                            of a rule to workloads with the given labels. If the VirtualService
                            has a list of gateways specified at the top, it should
                            include the reserved gateway `mesh` in order for this
                            field to be applicable.
                          type: object
                        sourceSubnet:
                          description: IPv4 or IPv6 ip address of source with optional
                            subnet. E.g., a.b.c.d/xx form or just a.b.c.d $hide_from_docs
                          format: string
                          type: string
                      required:
                      - sourceLabels
                      type: object
                    type: array
                  route:
                    description: The destination to which the connection should be
                      forwarded to.
                    items:
                      properties:
                        destination:
                          description: REQUIRED. Destination uniquely identifies the
                            instances of a service to which the request/connection
                            should be forwarded to.
                          properties:
                            host:
                              description: REQUIRED. The name of a service from the
                                service registry. Service names are looked up from
                                the platform's service registry (e.g., Kubernetes
                                services, Consul services, etc.) and from the hosts
                                declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/v1alpha3/service-entry/#ServiceEntry).
                                Traffic forwarded to destinations that are not found
                                in either of the two, will be dropped.
                              format: string
                              type: string
                            port:
                              description: Specifies the port on the host that is
                                being addressed. If a service exposes only a single
                                port it is not required to explicitly select the port.
                              oneOf:
                              - required:
                                - number
                              - required:
                                - name
                              properties:
                                name:
                                  format: string
                                  type: string
                                number:
                                  description: Valid port number
                                  type: integer
                              type: object
                            subset:
                              description: The name of a subset within the service.
                                Applicable only to services within the mesh. The subset
                                must be defined in a corresponding DestinationRule.
                              format: string
                              type: string
                          type: object
                        weight:
                          description: REQUIRED. The proportion of traffic to be forwarded
                            to the service version. If there is only one destination
                            in a rule, all traffic will be routed to it irrespective
                            of the weight.
                          format: int32
                          type: integer
                      type: object
                    type: array
                type: object
              type: array
            tls:
              description: 'An ordered list of route rule for non-terminated TLS &
                HTTPS traffic. Routing is typically performed using the SNI value
                presented by the ClientHello message. TLS routes will be applied to
                platform service ports named ''https-*'', ''tls-*'', unterminated
                gateway ports using HTTPS/TLS protocols (i.e. with "passthrough" TLS
                mode) and service entry ports using HTTPS/TLS protocols. The first
                rule matching an incoming request is used. NOTE: Traffic ''https-*''
                or ''tls-*'' ports without associated virtual service will be treated
                as opaque TCP traffic.'
              items:
                properties:
                  match:
                    description: REQUIRED. Match conditions to be satisfied for the
                      rule to be activated. All conditions inside a single match block
                      have AND semantics, while the list of match blocks have OR semantics.
                      The rule is matched if any one of the match blocks succeed.
                    items:
                      properties:
                        destinationSubnets:
                          description: IPv4 or IPv6 ip addresses of destination with
                            optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d.
                          items:
                            format: string
                            type: string
                          type: array
                        gateways:
                          description: Names of gateways where the rule should be
                            applied to. Gateway names at the top of the VirtualService
                            (if any) are overridden. The gateway match is independent
                            of sourceLabels.
                          items:
                            format: string
                            type: string
                          type: array
                        port:
                          description: Specifies the port on the host that is being
                            addressed. Many services only expose a single port or
                            label ports with the protocols they support, in these
                            cases it is not required to explicitly select the port.
                          type: integer
                        sniHosts:
                          description: REQUIRED. SNI (server name indicator) to match
                            on. Wildcard prefixes can be used in the SNI value, e.g.,
                            *.com will match foo.example.com as well as example.com.
                            An SNI value must be a subset (i.e., fall within the domain)
                            of the corresponding virtual serivce's hosts.
                          items:
                            format: string
                            type: string
                          type: array
                        sourceLabels:
                          additionalProperties:
                            format: string
                            type: string
                          description: One or more labels that constrain the applicability
                            of a rule to workloads with the given labels. If the VirtualService
                            has a list of gateways specified at the top, it should
                            include the reserved gateway `mesh` in order for this
                            field to be applicable.
                          type: object
                        sourceSubnet:
                          description: IPv4 or IPv6 ip address of source with optional
                            subnet. E.g., a.b.c.d/xx form or just a.b.c.d $hide_from_docs
                          format: string
                          type: string
                      required:
                      - sourceLabels
                      type: object
                    type: array
                  route:
                    description: The destination to which the connection should be
                      forwarded to.
                    items:
                      properties:
                        destination:
                          description: REQUIRED. Destination uniquely identifies the
                            instances of a service to which the request/connection
                            should be forwarded to.
                          properties:
                            host:
                              description: REQUIRED. The name of a service from the
                                service registry. Service names are looked up from
                                the platform's service registry (e.g., Kubernetes
                                services, Consul services, etc.) and from the hosts
                                declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/v1alpha3/service-entry/#ServiceEntry).
                                Traffic forwarded to destinations that are not found
                                in either of the two, will be dropped.
                              format: string
                              type: string
                            port:
                              description: Specifies the port on the host that is
                                being addressed. If a service exposes only a single
                                port it is not required to explicitly select the port.
                              oneOf:
                              - required:
                                - number
                              - required:
                                - name
                              properties:
                                name:
                                  format: string
                                  type: string
                                number:
                                  description: Valid port number
                                  type: integer
                              type: object
                            subset:
                              description: The name of a subset within the service.
                                Applicable only to services within the mesh. The subset
                                must be defined in a corresponding DestinationRule.
                              format: string
                              type: string
                          type: object
                        weight:
                          description: REQUIRED. The proportion of traffic to be forwarded
                            to the service version. If there is only one destination
                            in a rule, all traffic will be routed to it irrespective
                            of the weight.
                          format: int32
                          type: integer
                      type: object
                    type: array
                type: object
              type: array
          type: object
      type: object
  versions:
  - name: v1alpha3
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
