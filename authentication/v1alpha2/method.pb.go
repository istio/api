// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authentication/v1alpha2/method.proto

package v1alpha2

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// AuthenticationMethod describes the authentication method to be enforced. This specification is
// used for both peer and origin authentication (see more in `AuthentiationRule`), though there is
// restriction what method can be used for each type of authentication. For example, as of speaking,
// origin  authentication can use only JWT. This logic will be enforced by validation. System will
// also properly ignore the invalid ones.
type AuthenticationMethod struct {
	// Types that are valid to be assigned to Params:
	//	*AuthenticationMethod_Mtls
	//	*AuthenticationMethod_Jwt
	Params               isAuthenticationMethod_Params `protobuf_oneof:"params"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AuthenticationMethod) Reset()         { *m = AuthenticationMethod{} }
func (m *AuthenticationMethod) String() string { return proto.CompactTextString(m) }
func (*AuthenticationMethod) ProtoMessage()    {}
func (*AuthenticationMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_3768fa00d692a84a, []int{0}
}
func (m *AuthenticationMethod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticationMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthenticationMethod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthenticationMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticationMethod.Merge(m, src)
}
func (m *AuthenticationMethod) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticationMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticationMethod.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticationMethod proto.InternalMessageInfo

type isAuthenticationMethod_Params interface {
	isAuthenticationMethod_Params()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AuthenticationMethod_Mtls struct {
	Mtls *MutualTls `protobuf:"bytes,1,opt,name=mtls,proto3,oneof"`
}
type AuthenticationMethod_Jwt struct {
	Jwt *Jwt `protobuf:"bytes,2,opt,name=jwt,proto3,oneof"`
}

func (*AuthenticationMethod_Mtls) isAuthenticationMethod_Params() {}
func (*AuthenticationMethod_Jwt) isAuthenticationMethod_Params()  {}

func (m *AuthenticationMethod) GetParams() isAuthenticationMethod_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *AuthenticationMethod) GetMtls() *MutualTls {
	if x, ok := m.GetParams().(*AuthenticationMethod_Mtls); ok {
		return x.Mtls
	}
	return nil
}

func (m *AuthenticationMethod) GetJwt() *Jwt {
	if x, ok := m.GetParams().(*AuthenticationMethod_Jwt); ok {
		return x.Jwt
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AuthenticationMethod) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AuthenticationMethod_OneofMarshaler, _AuthenticationMethod_OneofUnmarshaler, _AuthenticationMethod_OneofSizer, []interface{}{
		(*AuthenticationMethod_Mtls)(nil),
		(*AuthenticationMethod_Jwt)(nil),
	}
}

func _AuthenticationMethod_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AuthenticationMethod)
	// params
	switch x := m.Params.(type) {
	case *AuthenticationMethod_Mtls:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mtls); err != nil {
			return err
		}
	case *AuthenticationMethod_Jwt:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Jwt); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AuthenticationMethod.Params has unexpected type %T", x)
	}
	return nil
}

func _AuthenticationMethod_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AuthenticationMethod)
	switch tag {
	case 1: // params.mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MutualTls)
		err := b.DecodeMessage(msg)
		m.Params = &AuthenticationMethod_Mtls{msg}
		return true, err
	case 2: // params.jwt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Jwt)
		err := b.DecodeMessage(msg)
		m.Params = &AuthenticationMethod_Jwt{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AuthenticationMethod_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AuthenticationMethod)
	// params
	switch x := m.Params.(type) {
	case *AuthenticationMethod_Mtls:
		s := proto.Size(x.Mtls)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthenticationMethod_Jwt:
		s := proto.Size(x.Jwt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*AuthenticationMethod)(nil), "istio.authentication.v1alpha2.AuthenticationMethod")
}

func init() {
	proto.RegisterFile("authentication/v1alpha2/method.proto", fileDescriptor_3768fa00d692a84a)
}

var fileDescriptor_3768fa00d692a84a = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0x2c, 0x2d, 0xc9,
	0x48, 0xcd, 0x2b, 0xc9, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0x33, 0x4c, 0xcc, 0x29,
	0xc8, 0x48, 0x34, 0xd2, 0xcf, 0x4d, 0x2d, 0xc9, 0xc8, 0x4f, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x92, 0xcd, 0x2c, 0x2e, 0xc9, 0xcc, 0xd7, 0x43, 0x55, 0xab, 0x07, 0x53, 0x2b, 0xa5, 0x89,
	0xd3, 0x90, 0x92, 0x9c, 0xe2, 0x78, 0x64, 0x93, 0xa4, 0x34, 0x70, 0x29, 0xcd, 0x2a, 0x2f, 0x41,
	0x51, 0xa9, 0x34, 0x83, 0x91, 0x4b, 0xc4, 0x11, 0x45, 0xb1, 0x2f, 0x58, 0x5a, 0xc8, 0x8e, 0x8b,
	0x05, 0x64, 0xae, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x86, 0x1e, 0x5e, 0xb7, 0xe9, 0xf9,
	0x96, 0x96, 0x94, 0x26, 0xe6, 0x84, 0xe4, 0x14, 0x7b, 0x30, 0x04, 0x81, 0xf5, 0x09, 0x99, 0x71,
	0x31, 0x67, 0x95, 0x97, 0x48, 0x30, 0x81, 0xb5, 0x2b, 0x11, 0xd0, 0xee, 0x55, 0x5e, 0xe2, 0xc1,
	0x10, 0x04, 0xd2, 0xe0, 0xc4, 0xc1, 0xc5, 0x56, 0x90, 0x58, 0x94, 0x98, 0x5b, 0xec, 0x64, 0x74,
	0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x46, 0xa9, 0x40, 0x4c,
	0xc8, 0xcc, 0xd7, 0x4f, 0x2c, 0xc8, 0xd4, 0xc7, 0xe1, 0xbf, 0x24, 0x36, 0xb0, 0xaf, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xaa, 0xb3, 0x6f, 0x71, 0x01, 0x00, 0x00,
}

func (m *AuthenticationMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationMethod) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		nn1, err1 := m.Params.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AuthenticationMethod_Mtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Mtls != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMethod(dAtA, i, uint64(m.Mtls.Size()))
		n2, err2 := m.Mtls.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}
func (m *AuthenticationMethod_Jwt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Jwt != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMethod(dAtA, i, uint64(m.Jwt.Size()))
		n3, err3 := m.Jwt.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func encodeVarintMethod(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AuthenticationMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		n += m.Params.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthenticationMethod_Mtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mtls != nil {
		l = m.Mtls.Size()
		n += 1 + l + sovMethod(uint64(l))
	}
	return n
}
func (m *AuthenticationMethod_Jwt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Jwt != nil {
		l = m.Jwt.Size()
		n += 1 + l + sovMethod(uint64(l))
	}
	return n
}

func sovMethod(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMethod(x uint64) (n int) {
	return sovMethod(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthenticationMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMethod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMethod
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMethod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MutualTls{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Params = &AuthenticationMethod_Mtls{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMethod
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMethod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Jwt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Params = &AuthenticationMethod_Jwt{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMethod(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMethod
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMethod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMethod(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMethod
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMethod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMethod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMethod
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMethod
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMethod
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMethod(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMethod
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMethod = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMethod   = fmt.Errorf("proto: integer overflow")
)
