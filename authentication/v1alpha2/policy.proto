// Copyright 2019 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "authentication/v1alpha2/credential.proto";
import "common/v1beta1/selector.proto";
import "common/v1beta1/match.proto";

// $title: Authentication Policy v1alpha2
// $description: Authentication policy for Istio services.
// $location: https://istio.io/docs/reference/config/istio.authentication.v1alpha2.html

// This package defines user-facing authentication policy.
package istio.authentication.v1alpha2;

option go_package = "istio.io/api/authentication/v1alpha2";

// $hide_from_docs
// AuthenticationPolicy describes authentication requirements for the workload(s) it is attached to.
// Example of a simple policy that enable mTLS for all workloads in the namespace scope of the
// policy. Note that `istio.mtls` is a name of the pre-define `Credential` for Istio
// mutual TLS.
//
// ```
// spec:
//   rules:
//   - require:
//       credential: "istio.mtls"
// ```
//
// This example sets end-user authentication for workloads that match label `app=foo`, using JWT
// The JWT authentication details are defined directly in the policy (`inline`).
// ```
// spec:
//   workloadSelector:
//     app: foo
//   rules:
//   - require:
//     - credential: "none"
//       override:
//         jwt:
//           issuer: "https://securetoken.google.com"
//           audiences:
//           - "productpage"
//           jwksUri: "https://www.googleapis.com/oauth2/v1/certs"
// ```
//
// This example sets policy for workload `app=foo`, requires mTLS for all traffic, and JWT for
// (HTTP) request with path start with `/set`
// ```
// spec:
//   workloadSelector:
//     app: foo
//   rules:
//   - require:
//     - credential: "istio.mtls"
//   - match:
//       paths:
//         prefix: '/set'
//     require:
//     - credential: "my-jwt"
// ```
// This example requires mTLS *or* JWT for port 9090, and mTLS (only) else where.
// ```
// spec:
//   workloadSelector:
//     app: foo
//   rules:
//   - match:
//       ports: [9090]
//     require:
//     - credential: "istio.mtls"
//     - credential: "my-jwt"
//   - require:
//     - credential: "istio.mtls"
//
// This last example shows a policy to set peer authentication with mTLS for all requests, and
// end-user authentication if requests have "/create" or "/update" prefix. For all other paths,
// end-user authentication is not required (though peer mTLS still needed)
// ```
// spec:
//   workloadSelector:
//     app: bar
//   rules:
//   - require:
//     - credential: "istio.mtls"
//   - match:
//       paths:
//       - prefix: "/create"
//       - prefix: "/update"
//     require:
//     - credential: "my-jwt"
// ```
message AuthenticationPolicy {
  // Criteria used to select the specific set of pods/VMs on which this
  // authentication policy should be applied. If omitted, the authentication policy
  // be applied to all workload instances in the same namespace.
  istio.common.v1beta1.WorkloadSelector workload_selector = 1;

  // Rules specify what credential(s) can be used to authenticate with the service. Each rule
  // contains (match) conditions. The first one that meets the conditions will be applied, i.e
  // the corresponding credentials must be provided and and valid. If the list is empty, or no
  // rule is activated, authentication is not required.
  repeated CredentialRule rules = 2;
}

// $hide_from_docs
// CredentialRule specifies the conditions, if any, and the credential(s) required in that case.
// Examples:
// - Rule to require mTLS for all:
// ```
// require:
//   credential: "istio.mtls"
// ```
// - Rule to require mTLS *or* JWT
// ```
// require:
//   credential: "istio.mtls"
//   credential: "my-jwt"
// ```
// - Rule to require mTLS only on port 9090
// ```
// require:
//   match:
//     ports: [9090]
//   require:
//     credential: "istio.mtls"
// ```
message CredentialRule {
  // Defines the conditions that require the credentials below.
  repeated Match match = 1;

  // If the `match` conditions are satisfied, all of these credential requirement must be
  // provided (ANDed).
  repeated CredentialRequirement require = 2;
}

// $hide_from_docs
// CredentialRequirement defines the credential(s) to be provided. The credential is referred by name,
// and can be defined/overriden inline.
// Example (see AuthenticationPolicy for the use of this in the full context)
// - Require "istio.mtls" credential:
// ```
// credential: "istio.mtls"
// ```
// - Require JWT-type credential, defining inline:
// ```
// credential: "none" # or leave empty
// override:
//   jwt:
//     issuer: "secret@example.com"
// ```
// - Require JWT-type credential, based on "foo-jwt", with specific `audience` require.
// ```
// credential: "foo-jwt"
// override:
//   jwt:
//     aud: "my-service"
// ```
message CredentialRequirement{
  // Name of the required credential. This is one of `Credential` CRs, or Istio pre-defined one, such as
  // `none`, `istio.mtls` etc. If not set, it will be treated as `none`.
  string credential = 1;

  // Override credential definition. The override credential must be the same type as the one
  // defined by the `credential` (name) above, unless the base credential is `none`.
  Credential override = 2;
}

// $hide_from_docs
// Match specifies a set of criterion to be met in order for the rule to be applied.
// For example, the following restricts mTLS being applied only on port 8080, and JWT
// authentication if the request path starts with /get.
//
// ```
// spec:
//   policy:
//     peers:
//     - match
//         ports:
//         - 8080
//       method: istio.mtls
//     origins:
//     - match:
//         paths:
//         - prefix: "/get"
//       method: example-jwt
// ```
message Match {
  // Ports to match. If not specified, it matches to any port number.
  // Note: these are workload ports, not service ports.
  repeated uint32 ports = 1;

  // Request path to match. Available for `L7` authentication method only (e.g JWT). If not
  // specified, it matches to any paths.
  // Values are case-sensitive and formatted as follows:
  //
  // - `exact: "value"` for exact string match
  //
  // - `prefix: "value"` for prefix-based match
  //
  // - `regex: "value"` for ECMAscript style regex-based match
  repeated istio.common.v1beta1.StringMatch paths = 2;
}
