// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authentication/v1alpha2/credential.proto

package v1alpha2

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// $hide_from_docs
// Credential TODO: add comments.
type Credential struct {
	// Types that are valid to be assigned to Type:
	//	*Credential_Mtls
	//	*Credential_EucToken
	//	*Credential_RcToken
	Type                 isCredential_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Credential) Reset()         { *m = Credential{} }
func (m *Credential) String() string { return proto.CompactTextString(m) }
func (*Credential) ProtoMessage()    {}
func (*Credential) Descriptor() ([]byte, []int) {
	return fileDescriptor_685c54a9e66379a8, []int{0}
}
func (m *Credential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Credential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Credential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Credential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credential.Merge(m, src)
}
func (m *Credential) XXX_Size() int {
	return m.Size()
}
func (m *Credential) XXX_DiscardUnknown() {
	xxx_messageInfo_Credential.DiscardUnknown(m)
}

var xxx_messageInfo_Credential proto.InternalMessageInfo

type isCredential_Type interface {
	isCredential_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Credential_Mtls struct {
	Mtls *MutualTls `protobuf:"bytes,1,opt,name=mtls,proto3,oneof"`
}
type Credential_EucToken struct {
	EucToken *Jwt `protobuf:"bytes,2,opt,name=euc_token,json=eucToken,proto3,oneof"`
}
type Credential_RcToken struct {
	RcToken *Jwt `protobuf:"bytes,3,opt,name=rc_token,json=rcToken,proto3,oneof"`
}

func (*Credential_Mtls) isCredential_Type()     {}
func (*Credential_EucToken) isCredential_Type() {}
func (*Credential_RcToken) isCredential_Type()  {}

func (m *Credential) GetType() isCredential_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Credential) GetMtls() *MutualTls {
	if x, ok := m.GetType().(*Credential_Mtls); ok {
		return x.Mtls
	}
	return nil
}

func (m *Credential) GetEucToken() *Jwt {
	if x, ok := m.GetType().(*Credential_EucToken); ok {
		return x.EucToken
	}
	return nil
}

func (m *Credential) GetRcToken() *Jwt {
	if x, ok := m.GetType().(*Credential_RcToken); ok {
		return x.RcToken
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Credential) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Credential_OneofMarshaler, _Credential_OneofUnmarshaler, _Credential_OneofSizer, []interface{}{
		(*Credential_Mtls)(nil),
		(*Credential_EucToken)(nil),
		(*Credential_RcToken)(nil),
	}
}

func _Credential_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Credential)
	// type
	switch x := m.Type.(type) {
	case *Credential_Mtls:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mtls); err != nil {
			return err
		}
	case *Credential_EucToken:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EucToken); err != nil {
			return err
		}
	case *Credential_RcToken:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RcToken); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Credential.Type has unexpected type %T", x)
	}
	return nil
}

func _Credential_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Credential)
	switch tag {
	case 1: // type.mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MutualTls)
		err := b.DecodeMessage(msg)
		m.Type = &Credential_Mtls{msg}
		return true, err
	case 2: // type.euc_token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Jwt)
		err := b.DecodeMessage(msg)
		m.Type = &Credential_EucToken{msg}
		return true, err
	case 3: // type.rc_token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Jwt)
		err := b.DecodeMessage(msg)
		m.Type = &Credential_RcToken{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Credential_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Credential)
	// type
	switch x := m.Type.(type) {
	case *Credential_Mtls:
		s := proto.Size(x.Mtls)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Credential_EucToken:
		s := proto.Size(x.EucToken)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Credential_RcToken:
		s := proto.Size(x.RcToken)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Credential)(nil), "istio.authentication.v1alpha2.Credential")
}

func init() {
	proto.RegisterFile("authentication/v1alpha2/credential.proto", fileDescriptor_685c54a9e66379a8)
}

var fileDescriptor_685c54a9e66379a8 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0x2c, 0x2d, 0xc9,
	0x48, 0xcd, 0x2b, 0xc9, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0x33, 0x4c, 0xcc, 0x29,
	0xc8, 0x48, 0x34, 0xd2, 0x4f, 0x2e, 0x4a, 0x4d, 0x01, 0x89, 0x27, 0xe6, 0xe8, 0x15, 0x14, 0xe5,
	0x97, 0xe4, 0x0b, 0xc9, 0x66, 0x16, 0x97, 0x64, 0xe6, 0xeb, 0xa1, 0xaa, 0xd7, 0x83, 0xa9, 0x97,
	0xd2, 0xc4, 0x65, 0x50, 0x6e, 0x49, 0x4e, 0x71, 0x7c, 0x6e, 0x6a, 0x49, 0x46, 0x7e, 0x0a, 0xc4,
	0x24, 0x29, 0x9c, 0x76, 0x66, 0x95, 0x97, 0xa0, 0xa8, 0x54, 0xba, 0xc1, 0xc8, 0xc5, 0xe5, 0x0c,
	0x77, 0x88, 0x90, 0x1d, 0x17, 0x0b, 0xc8, 0x34, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x0d,
	0x3d, 0xbc, 0x2e, 0xd2, 0xf3, 0x2d, 0x2d, 0x29, 0x4d, 0xcc, 0x09, 0xc9, 0x29, 0xf6, 0x60, 0x08,
	0x02, 0xeb, 0x13, 0x72, 0xe4, 0xe2, 0x4c, 0x2d, 0x4d, 0x8e, 0x2f, 0xc9, 0xcf, 0x4e, 0xcd, 0x93,
	0x60, 0x02, 0x1b, 0xa2, 0x44, 0xc0, 0x10, 0xaf, 0xf2, 0x12, 0x0f, 0x86, 0x20, 0x8e, 0xd4, 0xd2,
	0xe4, 0x10, 0x90, 0x2e, 0x21, 0x7b, 0x2e, 0x8e, 0x22, 0x98, 0x09, 0xcc, 0x24, 0x98, 0xc0, 0x5e,
	0x04, 0x31, 0xc0, 0x89, 0x8d, 0x8b, 0xa5, 0xa4, 0xb2, 0x20, 0xd5, 0xc9, 0xe8, 0xc4, 0x23, 0x39,
	0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x8c, 0x52, 0x81, 0x98, 0x91, 0x99, 0xaf,
	0x9f, 0x58, 0x90, 0xa9, 0x8f, 0x23, 0x7c, 0x92, 0xd8, 0xc0, 0xa1, 0x62, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x03, 0x2f, 0xdb, 0x9a, 0xb5, 0x01, 0x00, 0x00,
}

func (m *Credential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credential) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		nn1, err1 := m.Type.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Credential_Mtls) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Mtls != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCredential(dAtA, i, uint64(m.Mtls.Size()))
		n2, err2 := m.Mtls.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}
func (m *Credential_EucToken) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EucToken != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCredential(dAtA, i, uint64(m.EucToken.Size()))
		n3, err3 := m.EucToken.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func (m *Credential_RcToken) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RcToken != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCredential(dAtA, i, uint64(m.RcToken.Size()))
		n4, err4 := m.RcToken.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}
func encodeVarintCredential(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Credential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Credential_Mtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mtls != nil {
		l = m.Mtls.Size()
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}
func (m *Credential_EucToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EucToken != nil {
		l = m.EucToken.Size()
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}
func (m *Credential_RcToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RcToken != nil {
		l = m.RcToken.Size()
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}

func sovCredential(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCredential(x uint64) (n int) {
	return sovCredential(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Credential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MutualTls{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Credential_Mtls{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EucToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Jwt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Credential_EucToken{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Jwt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Credential_RcToken{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCredential(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCredential
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCredential
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCredential
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCredential(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCredential
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCredential = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCredential   = fmt.Errorf("proto: integer overflow")
)
