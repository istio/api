// Code generated by protoc-gen-go. DO NOT EDIT.
// source: authentication/v1alpha1/policy.proto

/*
Package v1alpha1 is a generated protocol buffer package.

It is generated from these files:
	authentication/v1alpha1/policy.proto

It has these top-level messages:
	MutualTLS
	JWT
	AuthenticationMechanism
	AuthenticationPolicy
*/
package v1alpha1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "gogoproto"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import istio_routing_v1alpha2 "istio.io/api/routing/v1alpha2"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Placer holder for mTLS authentication params.
type MutualTLS struct {
}

func (m *MutualTLS) Reset()                    { *m = MutualTLS{} }
func (m *MutualTLS) String() string            { return proto.CompactTextString(m) }
func (*MutualTLS) ProtoMessage()               {}
func (*MutualTLS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// JSON Web Token (JWT) token format for authentication as defined by
// https://tools.ietf.org/html/rfc7519. See [OAuth
// 2.0](https://tools.ietf.org/html/rfc6749) and [OIDC
// 1.0](http://openid.net/connect) for how this is used in the whole
// authentication flow.
//
// Example,
//
//     issuer: https://example.com
//     audiences:
//     - bookstore_android.apps.googleusercontent.com
//       bookstore_web.apps.googleusercontent.com
//     jwks_uri: https://example.com/.well-known/jwks.json
//
type JWT struct {
	// Identifies the principal that issued the JWT. See
	// https://tools.ietf.org/html/rfc7519#section-4.1.1
	// Usually a URL or an email address.
	//
	// Example: https://securetoken.google.com
	// Example: 1234567-compute@developer.gserviceaccount.com
	//
	Issuer string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	// The list of JWT
	// [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3).
	// that are allowed to access. A JWT containing any of these
	// audiences will be accepted.
	//
	// The service name will be accepted if audiences is empty.
	//
	// Example:
	//
	//     audiences:
	//     - bookstore_android.apps.googleusercontent.com
	//       bookstore_web.apps.googleusercontent.com
	//
	Audiences []string `protobuf:"bytes,2,rep,name=audiences" json:"audiences,omitempty"`
	// URL of the provider's public key set to validate signature of the
	// JWT. See [OpenID
	// Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
	//
	// Optional if the key set document can either (a) be retrieved from
	// [OpenID
	// Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of
	// the issuer or (b) inferred from the email domain of the issuer (e.g. a
	// Google service account).
	//
	// Example: https://www.googleapis.com/oauth2/v1/certs
	JwksUri   string          `protobuf:"bytes,3,opt,name=jwks_uri,json=jwksUri" json:"jwks_uri,omitempty"`
	Locations []*JWT_Location `protobuf:"bytes,6,rep,name=locations" json:"locations,omitempty"`
}

func (m *JWT) Reset()                    { *m = JWT{} }
func (m *JWT) String() string            { return proto.CompactTextString(m) }
func (*JWT) ProtoMessage()               {}
func (*JWT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JWT) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *JWT) GetAudiences() []string {
	if m != nil {
		return m.Audiences
	}
	return nil
}

func (m *JWT) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

func (m *JWT) GetLocations() []*JWT_Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

// Defines where to extract the JWT from an HTTP request.
//
// If no explicit location is specified the following default
// locations are tried in order:
//
//     1) The Authorization header using the Bearer schema,
//        e.g. Authorization: Bearer <token>. (see
//        https://tools.ietf.org/html/rfc6750#section-2.1)
//
//     2) `access_token` query parameter (see
//     https://tools.ietf.org/html/rfc6750#section-2.3)
//
type JWT_Location struct {
	// Types that are valid to be assigned to Scheme:
	//	*JWT_Location_Header
	//	*JWT_Location_Query
	Scheme isJWT_Location_Scheme `protobuf_oneof:"scheme"`
}

func (m *JWT_Location) Reset()                    { *m = JWT_Location{} }
func (m *JWT_Location) String() string            { return proto.CompactTextString(m) }
func (*JWT_Location) ProtoMessage()               {}
func (*JWT_Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type isJWT_Location_Scheme interface{ isJWT_Location_Scheme() }

type JWT_Location_Header struct {
	Header string `protobuf:"bytes,1,opt,name=header,oneof"`
}
type JWT_Location_Query struct {
	Query string `protobuf:"bytes,2,opt,name=query,oneof"`
}

func (*JWT_Location_Header) isJWT_Location_Scheme() {}
func (*JWT_Location_Query) isJWT_Location_Scheme()  {}

func (m *JWT_Location) GetScheme() isJWT_Location_Scheme {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (m *JWT_Location) GetHeader() string {
	if x, ok := m.GetScheme().(*JWT_Location_Header); ok {
		return x.Header
	}
	return ""
}

func (m *JWT_Location) GetQuery() string {
	if x, ok := m.GetScheme().(*JWT_Location_Query); ok {
		return x.Query
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*JWT_Location) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _JWT_Location_OneofMarshaler, _JWT_Location_OneofUnmarshaler, _JWT_Location_OneofSizer, []interface{}{
		(*JWT_Location_Header)(nil),
		(*JWT_Location_Query)(nil),
	}
}

func _JWT_Location_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*JWT_Location)
	// scheme
	switch x := m.Scheme.(type) {
	case *JWT_Location_Header:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Header)
	case *JWT_Location_Query:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Query)
	case nil:
	default:
		return fmt.Errorf("JWT_Location.Scheme has unexpected type %T", x)
	}
	return nil
}

func _JWT_Location_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*JWT_Location)
	switch tag {
	case 1: // scheme.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Scheme = &JWT_Location_Header{x}
		return true, err
	case 2: // scheme.query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Scheme = &JWT_Location_Query{x}
		return true, err
	default:
		return false, nil
	}
}

func _JWT_Location_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*JWT_Location)
	// scheme
	switch x := m.Scheme.(type) {
	case *JWT_Location_Header:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Header)))
		n += len(x.Header)
	case *JWT_Location_Query:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Query)))
		n += len(x.Query)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// AuthenticaitonMechanism defines one particular type of authentication (i.e
// mutual TLS, JWT etc). The type can be progammatically determine by checking
// the type of the "params" field.
type AuthenticationMechanism struct {
	// Types that are valid to be assigned to Params:
	//	*AuthenticationMechanism_None
	//	*AuthenticationMechanism_Mtls
	//	*AuthenticationMechanism_Jwt
	Params isAuthenticationMechanism_Params `protobuf_oneof:"params"`
}

func (m *AuthenticationMechanism) Reset()                    { *m = AuthenticationMechanism{} }
func (m *AuthenticationMechanism) String() string            { return proto.CompactTextString(m) }
func (*AuthenticationMechanism) ProtoMessage()               {}
func (*AuthenticationMechanism) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isAuthenticationMechanism_Params interface{ isAuthenticationMechanism_Params() }

type AuthenticationMechanism_None struct {
	None *google_protobuf1.Empty `protobuf:"bytes,1,opt,name=none,oneof"`
}
type AuthenticationMechanism_Mtls struct {
	Mtls *MutualTLS `protobuf:"bytes,2,opt,name=mtls,oneof"`
}
type AuthenticationMechanism_Jwt struct {
	Jwt *JWT `protobuf:"bytes,3,opt,name=jwt,oneof"`
}

func (*AuthenticationMechanism_None) isAuthenticationMechanism_Params() {}
func (*AuthenticationMechanism_Mtls) isAuthenticationMechanism_Params() {}
func (*AuthenticationMechanism_Jwt) isAuthenticationMechanism_Params()  {}

func (m *AuthenticationMechanism) GetParams() isAuthenticationMechanism_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *AuthenticationMechanism) GetNone() *google_protobuf1.Empty {
	if x, ok := m.GetParams().(*AuthenticationMechanism_None); ok {
		return x.None
	}
	return nil
}

func (m *AuthenticationMechanism) GetMtls() *MutualTLS {
	if x, ok := m.GetParams().(*AuthenticationMechanism_Mtls); ok {
		return x.Mtls
	}
	return nil
}

func (m *AuthenticationMechanism) GetJwt() *JWT {
	if x, ok := m.GetParams().(*AuthenticationMechanism_Jwt); ok {
		return x.Jwt
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AuthenticationMechanism) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AuthenticationMechanism_OneofMarshaler, _AuthenticationMechanism_OneofUnmarshaler, _AuthenticationMechanism_OneofSizer, []interface{}{
		(*AuthenticationMechanism_None)(nil),
		(*AuthenticationMechanism_Mtls)(nil),
		(*AuthenticationMechanism_Jwt)(nil),
	}
}

func _AuthenticationMechanism_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AuthenticationMechanism)
	// params
	switch x := m.Params.(type) {
	case *AuthenticationMechanism_None:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.None); err != nil {
			return err
		}
	case *AuthenticationMechanism_Mtls:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mtls); err != nil {
			return err
		}
	case *AuthenticationMechanism_Jwt:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Jwt); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AuthenticationMechanism.Params has unexpected type %T", x)
	}
	return nil
}

func _AuthenticationMechanism_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AuthenticationMechanism)
	switch tag {
	case 1: // params.none
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Empty)
		err := b.DecodeMessage(msg)
		m.Params = &AuthenticationMechanism_None{msg}
		return true, err
	case 2: // params.mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MutualTLS)
		err := b.DecodeMessage(msg)
		m.Params = &AuthenticationMechanism_Mtls{msg}
		return true, err
	case 3: // params.jwt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JWT)
		err := b.DecodeMessage(msg)
		m.Params = &AuthenticationMechanism_Jwt{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AuthenticationMechanism_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AuthenticationMechanism)
	// params
	switch x := m.Params.(type) {
	case *AuthenticationMechanism_None:
		s := proto.Size(x.None)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthenticationMechanism_Mtls:
		s := proto.Size(x.Mtls)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthenticationMechanism_Jwt:
		s := proto.Size(x.Jwt)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// AuthenticationPolicy binds credentials to workload(s).
// Authentication policy is composed of 2-part authentication:
// - peer: verify caller service credentials.
// - end_user: verify end-user credentials.
// For each part, if it's not empty, at least one of those listed credential
// must be provided and  (successfully) verified for the authentication to pass.
//
// Examples:
// Policy to enable mTLS for all services in namespace frod
//
//     apiVersion: config.istio.io/v1alpha1
//     kind: AuthenticationPolicy
//     metadata:
//       name: mTLS-enable
//       namespace: frod
//     spec:
//       match:
//       peers:
//       - mtls: {}
//
// Policy to enable mTLS, and use JWT for productpage:9000
//
//     apiVersion: config.istio.io/v1alpha1
//     kind: AuthenticationPolicy
//     metadata:
//       name: mTLS-enable
//       namespace: frod
//     spec:
//       match:
//       - name: productpage
//         port:
//           number: 9000
//       peers:
//       - mtls:
//       endUsers:
//       - jwt:
//           issuer: "https://securetoken.google.com"
//           audiences:
//           - "productpage"
//           jwksUri: "https://www.googleapis.com/oauth2/v1/certs"
//           locations:
//           - header: x-goog-iap-jwt-assertion
type AuthenticationPolicy struct {
	// List of destinations (workloads) that the policy should be applied on.
	// If empty, policy will be used on all destinations in the same namespace.
	Match []*istio_routing_v1alpha2.Destination `protobuf:"bytes,1,rep,name=match" json:"match,omitempty"`
	// List of credential that should be checked by peer authentication. They
	// will be validated in sequence, until the first one satisfied. If none of
	// the specified mechanism valid, the whole authentication should fail.
	// On the other hand, the first valid credential will be used to extract
	// peer identity (i.e the source.user attribute in the request to mixer).
	Peers []*AuthenticationMechanism `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
	// Similar to above, but for end_user authentication, which will extract
	// request.auth.principal/audiences/presenter if authentication succeed.
	EndUsers []*AuthenticationMechanism `protobuf:"bytes,3,rep,name=end_users,json=endUsers" json:"end_users,omitempty"`
}

func (m *AuthenticationPolicy) Reset()                    { *m = AuthenticationPolicy{} }
func (m *AuthenticationPolicy) String() string            { return proto.CompactTextString(m) }
func (*AuthenticationPolicy) ProtoMessage()               {}
func (*AuthenticationPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthenticationPolicy) GetMatch() []*istio_routing_v1alpha2.Destination {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *AuthenticationPolicy) GetPeers() []*AuthenticationMechanism {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *AuthenticationPolicy) GetEndUsers() []*AuthenticationMechanism {
	if m != nil {
		return m.EndUsers
	}
	return nil
}

func init() {
	proto.RegisterType((*MutualTLS)(nil), "istio.authentication.v1alpha1.MutualTLS")
	proto.RegisterType((*JWT)(nil), "istio.authentication.v1alpha1.JWT")
	proto.RegisterType((*JWT_Location)(nil), "istio.authentication.v1alpha1.JWT.Location")
	proto.RegisterType((*AuthenticationMechanism)(nil), "istio.authentication.v1alpha1.AuthenticationMechanism")
	proto.RegisterType((*AuthenticationPolicy)(nil), "istio.authentication.v1alpha1.AuthenticationPolicy")
}

func init() { proto.RegisterFile("authentication/v1alpha1/policy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x41, 0x6f, 0xd3, 0x3e,
	0x1c, 0x4d, 0x96, 0x35, 0xff, 0xc6, 0xb9, 0x59, 0x53, 0xff, 0xa1, 0x40, 0x55, 0xc2, 0x0e, 0x95,
	0x40, 0x8e, 0x16, 0xa4, 0x49, 0x5c, 0x90, 0x98, 0x00, 0x95, 0xa9, 0x93, 0x50, 0xd6, 0x69, 0x12,
	0x97, 0xca, 0x4b, 0x4d, 0xe2, 0x91, 0xd8, 0x21, 0xb6, 0x99, 0xf6, 0x8d, 0xf8, 0x28, 0xf0, 0x31,
	0xc6, 0x8d, 0x1b, 0x07, 0x3e, 0x00, 0xb2, 0x9d, 0x30, 0xf5, 0x30, 0x7a, 0xe0, 0xd6, 0xf7, 0xeb,
	0x7b, 0xef, 0xe7, 0xf7, 0xec, 0x80, 0x7d, 0xac, 0x64, 0x49, 0x98, 0xa4, 0x39, 0x96, 0x94, 0xb3,
	0xe4, 0xf3, 0x01, 0xae, 0x9a, 0x12, 0x1f, 0x24, 0x0d, 0xaf, 0x68, 0x7e, 0x8d, 0x9a, 0x96, 0x4b,
	0x0e, 0x1f, 0x52, 0x21, 0x29, 0x47, 0x9b, 0x5c, 0xd4, 0x73, 0xc7, 0x7b, 0x05, 0x2f, 0xb8, 0x61,
	0x26, 0xfa, 0x97, 0x15, 0x8d, 0xef, 0x17, 0x9c, 0x17, 0x15, 0x49, 0x0c, 0xba, 0x50, 0x1f, 0x12,
	0x52, 0x37, 0xb2, 0x73, 0x1c, 0x3f, 0x6a, 0xb9, 0x92, 0x94, 0x15, 0xfd, 0xc2, 0x34, 0xd1, 0x03,
	0xb2, 0x6a, 0x55, 0x45, 0x2c, 0x25, 0x0e, 0x41, 0x70, 0xa2, 0xa4, 0xc2, 0xd5, 0x72, 0x71, 0x1a,
	0xff, 0x70, 0x81, 0x77, 0x7c, 0xbe, 0x84, 0x23, 0xe0, 0x53, 0x21, 0x14, 0x69, 0x23, 0x77, 0xea,
	0xce, 0x82, 0xac, 0x43, 0xf0, 0x01, 0x08, 0xb0, 0x5a, 0x53, 0xc2, 0x72, 0x22, 0xa2, 0x9d, 0xa9,
	0x37, 0x0b, 0xb2, 0xdb, 0x01, 0xbc, 0x07, 0x86, 0x97, 0x57, 0x1f, 0xc5, 0x4a, 0xb5, 0x34, 0xf2,
	0x8c, 0xee, 0x3f, 0x8d, 0xcf, 0x5a, 0x0a, 0xdf, 0x82, 0xa0, 0xe2, 0x36, 0x90, 0x88, 0xfc, 0xa9,
	0x37, 0x0b, 0xd3, 0x27, 0xe8, 0xaf, 0x71, 0xd1, 0xf1, 0xf9, 0x12, 0x2d, 0x3a, 0x4d, 0x76, 0xab,
	0x1e, 0xbf, 0x01, 0xc3, 0x7e, 0x0c, 0x23, 0xe0, 0x97, 0x04, 0xaf, 0xfb, 0x73, 0xce, 0x9d, 0xac,
	0xc3, 0x70, 0x04, 0x06, 0x9f, 0x14, 0x69, 0xaf, 0xa3, 0x9d, 0xee, 0x0f, 0x0b, 0x8f, 0x86, 0xc0,
	0x17, 0x79, 0x49, 0x6a, 0x12, 0x7f, 0x73, 0xc1, 0xff, 0x2f, 0x37, 0x76, 0x9f, 0x90, 0xbc, 0xc4,
	0x8c, 0x8a, 0x1a, 0x3e, 0x05, 0xbb, 0x8c, 0x33, 0x62, 0x5c, 0xc3, 0x74, 0x84, 0x6c, 0xc7, 0xa8,
	0xef, 0x18, 0xbd, 0xd6, 0x1d, 0xcf, 0x9d, 0xcc, 0xb0, 0xe0, 0x0b, 0xb0, 0x5b, 0xcb, 0x4a, 0x98,
	0x55, 0x61, 0x3a, 0xdb, 0x92, 0xeb, 0x4f, 0xdb, 0x5a, 0xaf, 0x75, 0xf0, 0x10, 0x78, 0x97, 0x57,
	0xd2, 0x54, 0x16, 0xa6, 0xf1, 0xf6, 0x5a, 0xe6, 0x4e, 0xa6, 0x05, 0x3a, 0x4b, 0x83, 0x5b, 0x5c,
	0x8b, 0xf8, 0x97, 0x0b, 0xf6, 0x36, 0xb3, 0xbc, 0x33, 0x0f, 0x0b, 0x3e, 0x07, 0x83, 0x1a, 0xcb,
	0xbc, 0x8c, 0x5c, 0xd3, 0xf9, 0xe3, 0xce, 0xbc, 0x7b, 0x16, 0xbd, 0x6b, 0x8a, 0x5e, 0x11, 0x21,
	0x29, 0xb3, 0x5d, 0x5b, 0x05, 0x5c, 0x80, 0x41, 0x43, 0x48, 0x6b, 0xef, 0x39, 0x4c, 0x0f, 0xb7,
	0x9c, 0xeb, 0x8e, 0x2a, 0x33, 0x6b, 0x02, 0x4f, 0x41, 0x40, 0xd8, 0x7a, 0xa5, 0x84, 0x76, 0xf4,
	0xfe, 0xc9, 0x71, 0x48, 0xd8, 0xfa, 0x4c, 0xfb, 0x1c, 0xa5, 0x5f, 0x6f, 0x26, 0xce, 0xcf, 0x9b,
	0x89, 0xf3, 0xe5, 0xfb, 0xc4, 0x79, 0xbf, 0x6f, 0xed, 0x28, 0x4f, 0x70, 0x43, 0x93, 0x3b, 0xbe,
	0xb8, 0x0b, 0xdf, 0x5c, 0xe2, 0xb3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x44, 0x94, 0x6c,
	0x93, 0x03, 0x00, 0x00,
}
