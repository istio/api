// Code generated by protoc-gen-go. DO NOT EDIT.
// source: authentication/v1alpha1/policy.proto

/*
Package v1alpha1 is a generated protocol buffer package.

This package defines user-facing authentication policy as well as configs
that the sidecar proxy uses to perform authentication.

It is generated from these files:
	authentication/v1alpha1/policy.proto

It has these top-level messages:
	None
	MutualTls
	Jwt
	PeerAuthenticationMethod
	OriginAuthenticationMethod
	CredentialRule
	Policy
*/
package v1alpha1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import istio_networking_v1alpha3 "istio.io/api/networking/v1alpha3"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Associates authentication with request principal.
type CredentialRule_Binding int32

const (
	// Principal will be set to the identity from peer authentication.
	CredentialRule_USE_PEER CredentialRule_Binding = 0
	// Principal will be set to the identity from origin authentication.
	CredentialRule_USE_ORIGIN CredentialRule_Binding = 1
)

var CredentialRule_Binding_name = map[int32]string{
	0: "USE_PEER",
	1: "USE_ORIGIN",
}
var CredentialRule_Binding_value = map[string]int32{
	"USE_PEER":   0,
	"USE_ORIGIN": 1,
}

func (x CredentialRule_Binding) String() string {
	return proto.EnumName(CredentialRule_Binding_name, int32(x))
}
func (CredentialRule_Binding) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

// Placeholder for None authentication params.
type None struct {
}

func (m *None) Reset()                    { *m = None{} }
func (m *None) String() string            { return proto.CompactTextString(m) }
func (*None) ProtoMessage()               {}
func (*None) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Placeholder for mTLS authentication params.
type MutualTls struct {
}

func (m *MutualTls) Reset()                    { *m = MutualTls{} }
func (m *MutualTls) String() string            { return proto.CompactTextString(m) }
func (*MutualTls) ProtoMessage()               {}
func (*MutualTls) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// JSON Web Token (JWT) token format for authentication as defined by
// https://tools.ietf.org/html/rfc7519. See [OAuth
// 2.0](https://tools.ietf.org/html/rfc6749) and [OIDC
// 1.0](http://openid.net/connect) for how this is used in the whole
// authentication flow.
//
// Example,
//
// ```yaml
// issuer: https://example.com
// audiences:
// - bookstore_android.apps.googleusercontent.com
//   bookstore_web.apps.googleusercontent.com
// jwksUri: https://example.com/.well-known/jwks.json
// ```
type Jwt struct {
	// Identifies the issuer that issued the JWT. See
	// [issuer](https://tools.ietf.org/html/rfc7519#section-4.1.1)
	// Usually a URL or an email address.
	//
	// Example: https://securetoken.google.com
	// Example: 1234567-compute@developer.gserviceaccount.com
	Issuer string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	// The list of JWT
	// [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3).
	// that are allowed to access. A JWT containing any of these
	// audiences will be accepted.
	//
	// The service name will be accepted if audiences is empty.
	//
	// Example:
	//
	// ```yaml
	// audiences:
	// - bookstore_android.apps.googleusercontent.com
	//   bookstore_web.apps.googleusercontent.com
	// ```
	Audiences []string `protobuf:"bytes,2,rep,name=audiences" json:"audiences,omitempty"`
	// URL of the provider's public key set to validate signature of the
	// JWT. See [OpenID
	// Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
	//
	// Optional if the key set document can either (a) be retrieved from
	// [OpenID
	// Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of
	// the issuer or (b) inferred from the email domain of the issuer (e.g. a
	// Google service account).
	//
	// Example: https://www.googleapis.com/oauth2/v1/certs
	JwksUri string `protobuf:"bytes,3,opt,name=jwks_uri,json=jwksUri" json:"jwks_uri,omitempty"`
	// JWT is sent in a request header. `header` represents the
	// header name.
	//
	// For example, if `header=x-goog-iap-jwt-assertion`, the header
	// format will be x-goog-iap-jwt-assertion: <JWT>.
	JwtHeaders []string `protobuf:"bytes,6,rep,name=jwt_headers,json=jwtHeaders" json:"jwt_headers,omitempty"`
	// JWT is sent in a query parameter. `query` represents the
	// query parameter name.
	//
	// For example, `query=jwt_token`.
	JwtParams []string `protobuf:"bytes,7,rep,name=jwt_params,json=jwtParams" json:"jwt_params,omitempty"`
}

func (m *Jwt) Reset()                    { *m = Jwt{} }
func (m *Jwt) String() string            { return proto.CompactTextString(m) }
func (*Jwt) ProtoMessage()               {}
func (*Jwt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Jwt) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Jwt) GetAudiences() []string {
	if m != nil {
		return m.Audiences
	}
	return nil
}

func (m *Jwt) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

func (m *Jwt) GetJwtHeaders() []string {
	if m != nil {
		return m.JwtHeaders
	}
	return nil
}

func (m *Jwt) GetJwtParams() []string {
	if m != nil {
		return m.JwtParams
	}
	return nil
}

// PeerAuthenticationMethod defines one particular type of authentication, e.g
// mutual TLS, JWT etc, (no authentication is one type by itself) that can
// be used for peer authentication.
// The type can be progammatically determine by checking the type of the
// "params" field.
type PeerAuthenticationMethod struct {
	// Types that are valid to be assigned to Params:
	//	*PeerAuthenticationMethod_None
	//	*PeerAuthenticationMethod_Mtls
	//	*PeerAuthenticationMethod_Jwt
	Params isPeerAuthenticationMethod_Params `protobuf_oneof:"params"`
}

func (m *PeerAuthenticationMethod) Reset()                    { *m = PeerAuthenticationMethod{} }
func (m *PeerAuthenticationMethod) String() string            { return proto.CompactTextString(m) }
func (*PeerAuthenticationMethod) ProtoMessage()               {}
func (*PeerAuthenticationMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isPeerAuthenticationMethod_Params interface {
	isPeerAuthenticationMethod_Params()
}

type PeerAuthenticationMethod_None struct {
	None *None `protobuf:"bytes,1,opt,name=none,oneof"`
}
type PeerAuthenticationMethod_Mtls struct {
	Mtls *MutualTls `protobuf:"bytes,2,opt,name=mtls,oneof"`
}
type PeerAuthenticationMethod_Jwt struct {
	Jwt *Jwt `protobuf:"bytes,3,opt,name=jwt,oneof"`
}

func (*PeerAuthenticationMethod_None) isPeerAuthenticationMethod_Params() {}
func (*PeerAuthenticationMethod_Mtls) isPeerAuthenticationMethod_Params() {}
func (*PeerAuthenticationMethod_Jwt) isPeerAuthenticationMethod_Params()  {}

func (m *PeerAuthenticationMethod) GetParams() isPeerAuthenticationMethod_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *PeerAuthenticationMethod) GetNone() *None {
	if x, ok := m.GetParams().(*PeerAuthenticationMethod_None); ok {
		return x.None
	}
	return nil
}

func (m *PeerAuthenticationMethod) GetMtls() *MutualTls {
	if x, ok := m.GetParams().(*PeerAuthenticationMethod_Mtls); ok {
		return x.Mtls
	}
	return nil
}

func (m *PeerAuthenticationMethod) GetJwt() *Jwt {
	if x, ok := m.GetParams().(*PeerAuthenticationMethod_Jwt); ok {
		return x.Jwt
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PeerAuthenticationMethod) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PeerAuthenticationMethod_OneofMarshaler, _PeerAuthenticationMethod_OneofUnmarshaler, _PeerAuthenticationMethod_OneofSizer, []interface{}{
		(*PeerAuthenticationMethod_None)(nil),
		(*PeerAuthenticationMethod_Mtls)(nil),
		(*PeerAuthenticationMethod_Jwt)(nil),
	}
}

func _PeerAuthenticationMethod_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PeerAuthenticationMethod)
	// params
	switch x := m.Params.(type) {
	case *PeerAuthenticationMethod_None:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.None); err != nil {
			return err
		}
	case *PeerAuthenticationMethod_Mtls:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mtls); err != nil {
			return err
		}
	case *PeerAuthenticationMethod_Jwt:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Jwt); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PeerAuthenticationMethod.Params has unexpected type %T", x)
	}
	return nil
}

func _PeerAuthenticationMethod_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PeerAuthenticationMethod)
	switch tag {
	case 1: // params.none
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(None)
		err := b.DecodeMessage(msg)
		m.Params = &PeerAuthenticationMethod_None{msg}
		return true, err
	case 2: // params.mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MutualTls)
		err := b.DecodeMessage(msg)
		m.Params = &PeerAuthenticationMethod_Mtls{msg}
		return true, err
	case 3: // params.jwt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Jwt)
		err := b.DecodeMessage(msg)
		m.Params = &PeerAuthenticationMethod_Jwt{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PeerAuthenticationMethod_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PeerAuthenticationMethod)
	// params
	switch x := m.Params.(type) {
	case *PeerAuthenticationMethod_None:
		s := proto.Size(x.None)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PeerAuthenticationMethod_Mtls:
		s := proto.Size(x.Mtls)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PeerAuthenticationMethod_Jwt:
		s := proto.Size(x.Jwt)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// OriginAuthenticationMethod defines authentication method/params for origin
// authentication. Origin could be end-user, device, delegate service etc.
// Method should have unique name so they can be referred later in credential
// rules. Currently, only JWT is supported for origin authentication.
type OriginAuthenticationMethod struct {
	// Jwt params for the method.
	Jwt *Jwt `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *OriginAuthenticationMethod) Reset()                    { *m = OriginAuthenticationMethod{} }
func (m *OriginAuthenticationMethod) String() string            { return proto.CompactTextString(m) }
func (*OriginAuthenticationMethod) ProtoMessage()               {}
func (*OriginAuthenticationMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OriginAuthenticationMethod) GetJwt() *Jwt {
	if m != nil {
		return m.Jwt
	}
	return nil
}

// CredentialRule defines which identity (e.g from peer or end-user
// authentication) will be used as request principal. The rule can be activated
// conditionally, based on matching condition (currently use only peer identity)
type CredentialRule struct {
	// Defines which authentication (peer vs origin) will be binded to
	// request principal.
	Binding CredentialRule_Binding `protobuf:"varint,1,opt,name=binding,enum=istio.authentication.v1alpha1.CredentialRule_Binding" json:"binding,omitempty"`
	// This list of origin authentication methods that should be
	// considered for the rule.
	// At run time, each method will be evaluated in order, until the first valid
	// (if none success, request should be rejected).
	// If binding is USE_ORIGIN, request.auth.principal attribute will be set to
	// the identity extracted from that valid certificate.
	Origins []*OriginAuthenticationMethod `protobuf:"bytes,2,rep,name=origins" json:"origins,omitempty"`
	// Condition to activate the rule. If not empty, the rule will be activated
	// if the request comes from one of these peers (identity).
	// Leave blank to activate the rule unconditionally.
	MatchingPeers []string `protobuf:"bytes,3,rep,name=matching_peers,json=matchingPeers" json:"matching_peers,omitempty"`
}

func (m *CredentialRule) Reset()                    { *m = CredentialRule{} }
func (m *CredentialRule) String() string            { return proto.CompactTextString(m) }
func (*CredentialRule) ProtoMessage()               {}
func (*CredentialRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CredentialRule) GetBinding() CredentialRule_Binding {
	if m != nil {
		return m.Binding
	}
	return CredentialRule_USE_PEER
}

func (m *CredentialRule) GetOrigins() []*OriginAuthenticationMethod {
	if m != nil {
		return m.Origins
	}
	return nil
}

func (m *CredentialRule) GetMatchingPeers() []string {
	if m != nil {
		return m.MatchingPeers
	}
	return nil
}

// Policy defines what authentication methods can be accepted on workload(s),
// and if authenticated, which method/certificate will set the request principal
// (i.e request.auth.principal attribute).
//
// Authentication policy is composed of 2-part authentication:
// - peer: verify caller service credentials. This part will set source.user
// (peer identity).
// - origin: verify the origin credentials. This part will set request.auth.user
// (origin identity), as well as other attributes like request.auth.presenter,
// request.auth.audiences and raw claims. Note that the identity could be
// end-user, service account, device etc.
//
// request.auth.principal will be assigned follow the credential rules. The
// rule also dictates which origin authentication method(s) should run, based
// on peer identity.
//
// Examples:
// Policy to enable mTLS for all services in namespace frod
//
// ```yaml
// apiVersion: authentication.istio.io/v1alpha1
// kind: Policy
// metadata:
//   name: mTLS_enable
//   namespace: frod
// spec:
//   destinations:
//   peers:
//   - mtls: null
// ```
// Policy to disable mTLS for "productpage" service
//
// ```yaml
// apiVersion: authentication.istio.io/v1alpha1
// kind: Policy
// metadata:
//   name: mTLS_disable
//   namespace: frod
// spec:
//   destinations:
//   - name: productpage
//   peers:
// ```
// Policy to enable mTLS, and use JWT for productpage:9000.
//
// ```yaml
// apiVersion: authentication.istio.io/v1alpha1
// kind: Policy
// metadata:
//   name: mTLS_enable
//   namespace: frod
// spec:
//   destinations:
//   - name: productpage
//     port:
//       number: 9000
//   peers:
//   - mtls: null
//   credentialRules:
//   - binding: USE_ORIGIN
//     origins:
//       jwt:
//         issuer: "https://securetoken.google.com"
//         audiences:
//         - "productpage"
//         jwksUri: "https://www.googleapis.com/oauth2/v1/certs"
//         locations:
//         - header: x-goog-iap-jwt-assertion
// ```
//
// Policy to enable mTLS, and use JWT for productpage:9000 only when caller is
// frontend.serviceaccount.
//
// ```yaml
// apiVersion: authentication.istio.io/v1alpha1
// kind: Policy
// metadata:
//   name: mTLS_enable
//   namespace: frod
// spec:
//   destinations:
//   - name: productpage
//     port:
//       number: 9000
//   peers:
//   - mtls: null
//   credentialRules:
//   - binding: USE_ORIGIN
//     matchingSources:
//     - frontend.serviceaccount
//     origins:
//     - jwt:
//         issuer: "https://securetoken.google.com"
//         audiences:
//         - "productpage"
//         jwksUri: "https://www.googleapis.com/oauth2/v1/certs"
//         locations:
//         - header: x-goog-iap-jwt-assertion
// ```
//
// Note that a credential rule that unconditional-use-peer (identity)  is
// implicitly check if no rule match, so the above credentialRules is the same
// as this:
//
// ```
// credentialRules:
// - binding: USE_ORIGIN
//   selectedOriginMethods:
//   - google_jwt
//   matchingSources:
//   - productpage.serviceaccount
//   origins:
//   - jwt:
//     ...
// - binding: USE_PEER
// ```
//
// Policy that enable mTLS, requires google JWT if caller is
// frontend.serviceaccount, no JWT (i.e peer authentication only) if caller
// is admin, and istio JWT in all other cases.
//
// ```yaml
// apiVersion: authentication.istio.io/v1alpha1
// kind: Policy
// metadata:
//   name: mTLS_enable
//   namespace: frod
// spec:
//   destinations:
//   - name: productpage
//     port:
//       number: 9000
//   peers:
//   - mtls: null
//   origins:
//   - name: google_jwt
//   - name: istio_jwt
//   credentialRules:
//   - binding: USE_ORIGIN
//     orgins:
//     - jwt:
//         issuer: "https://securetoken.google.com"
//         audiences:
//         - "productpage"
//         jwksUri: "https://www.googleapis.com/oauth2/v1/certs"
//         locations:
//         - header: x-goog-iap-jwt-assertion
//     matchingSources:
//     - productpage.serviceaccount
//   - binding: USE_PEER
//     matchingSource:
//     - admin
//   - binding: USE_ORIGIN
//     origins:
//     - jwt:
//         issuer: "https://securetoken.istio.io"
//         locations:
//         - header: x-istio-jwt-assertion
// ```
type Policy struct {
	// List of destinations (workloads) that the policy should be applied on.
	// If empty, policy will be used on all destinations in the same namespace.
	Destinations []*istio_networking_v1alpha3.Destination `protobuf:"bytes,1,rep,name=destinations" json:"destinations,omitempty"`
	// List of authentication methods that can be used for peer authentication.
	// They will be evaluated in order, until the first one satisfied; peer
	// identity is then extracted from the associated certificate. On the other
	// hand, if none of these methods pass, request should be rejected with
	// authentication failed error (401).
	// Leave the list empty if no peer authentication is required, or have single
	// entry of method 'None'. The source.user attribute will not be set in that
	// case.
	Peers []*PeerAuthenticationMethod `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
	// Rules to define how request principal will be set. Each rule can have
	// conditions that determine if the rule should be applied or not. The rule
	// will be checked for matching conditions at runtime, in order, and stop at
	// the first match. If there are no rule matching condtion, peer identity
	// will be used as principal (in other words, the credential rule with
	// USE_PEER with no matching condition is implicitly added to the end
	// of the list.)
	CredentialRules []*CredentialRule `protobuf:"bytes,4,rep,name=credential_rules,json=credentialRules" json:"credential_rules,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Policy) GetDestinations() []*istio_networking_v1alpha3.Destination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *Policy) GetPeers() []*PeerAuthenticationMethod {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *Policy) GetCredentialRules() []*CredentialRule {
	if m != nil {
		return m.CredentialRules
	}
	return nil
}

func init() {
	proto.RegisterType((*None)(nil), "istio.authentication.v1alpha1.None")
	proto.RegisterType((*MutualTls)(nil), "istio.authentication.v1alpha1.MutualTls")
	proto.RegisterType((*Jwt)(nil), "istio.authentication.v1alpha1.Jwt")
	proto.RegisterType((*PeerAuthenticationMethod)(nil), "istio.authentication.v1alpha1.PeerAuthenticationMethod")
	proto.RegisterType((*OriginAuthenticationMethod)(nil), "istio.authentication.v1alpha1.OriginAuthenticationMethod")
	proto.RegisterType((*CredentialRule)(nil), "istio.authentication.v1alpha1.CredentialRule")
	proto.RegisterType((*Policy)(nil), "istio.authentication.v1alpha1.Policy")
	proto.RegisterEnum("istio.authentication.v1alpha1.CredentialRule_Binding", CredentialRule_Binding_name, CredentialRule_Binding_value)
}

func init() { proto.RegisterFile("authentication/v1alpha1/policy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdf, 0x6e, 0x12, 0x41,
	0x14, 0xc6, 0xbb, 0x05, 0x17, 0x38, 0x54, 0x24, 0x73, 0x61, 0xd6, 0xc6, 0xc6, 0x66, 0xad, 0x15,
	0x2f, 0x5c, 0x52, 0xf0, 0x4f, 0x7a, 0x63, 0x22, 0x4a, 0xa4, 0x24, 0x14, 0x32, 0xb5, 0x89, 0xf1,
	0x66, 0x33, 0xdd, 0x9d, 0xc0, 0xd0, 0x65, 0x76, 0x33, 0x33, 0xcb, 0xc6, 0x17, 0xf0, 0x11, 0x7c,
	0x35, 0x9f, 0xc6, 0xc4, 0xcc, 0x2c, 0x5b, 0x42, 0x22, 0xa2, 0x97, 0xe7, 0x70, 0xbe, 0x1f, 0xdf,
	0x37, 0x7b, 0x66, 0xe0, 0x84, 0xa4, 0x6a, 0x46, 0xb9, 0x62, 0x01, 0x51, 0x2c, 0xe6, 0xed, 0xe5,
	0x19, 0x89, 0x92, 0x19, 0x39, 0x6b, 0x27, 0x71, 0xc4, 0x82, 0x6f, 0x5e, 0x22, 0x62, 0x15, 0xa3,
	0x23, 0x26, 0x15, 0x8b, 0xbd, 0xcd, 0x59, 0xaf, 0x98, 0x3d, 0x7c, 0xc1, 0xa9, 0xca, 0x62, 0x71,
	0xcb, 0xf8, 0xb4, 0x00, 0x74, 0xdb, 0x4b, 0x26, 0x54, 0x4a, 0x22, 0x5f, 0x52, 0xb1, 0x64, 0x01,
	0xcd, 0x49, 0xae, 0x0d, 0xe5, 0xcb, 0x98, 0x53, 0xb7, 0x0e, 0xb5, 0x51, 0xaa, 0x7f, 0xff, 0x1c,
	0x49, 0xf7, 0x87, 0x05, 0xa5, 0x61, 0xa6, 0xd0, 0x43, 0xb0, 0x99, 0x94, 0x29, 0x15, 0x8e, 0x75,
	0x6c, 0xb5, 0x6a, 0x78, 0x55, 0xa1, 0xc7, 0x50, 0x23, 0x69, 0xc8, 0x28, 0x0f, 0xa8, 0x74, 0xf6,
	0x8f, 0x4b, 0xad, 0x1a, 0x5e, 0x37, 0xd0, 0x23, 0xa8, 0xce, 0xb3, 0x5b, 0xe9, 0xa7, 0x82, 0x39,
	0x25, 0xa3, 0xab, 0xe8, 0xfa, 0x5a, 0x30, 0xf4, 0x04, 0xea, 0xf3, 0x4c, 0xf9, 0x33, 0x4a, 0x42,
	0x2a, 0xa4, 0x63, 0x1b, 0x29, 0xcc, 0x33, 0x35, 0xc8, 0x3b, 0xe8, 0x08, 0x74, 0xe5, 0x27, 0x44,
	0x90, 0x85, 0x74, 0x2a, 0x39, 0x7a, 0x9e, 0xa9, 0x89, 0x69, 0xb8, 0x3f, 0x2d, 0x70, 0x26, 0x94,
	0x8a, 0xf7, 0x1b, 0xc1, 0x47, 0x54, 0xcd, 0xe2, 0x10, 0x9d, 0x43, 0x99, 0xc7, 0x9c, 0x1a, 0xaf,
	0xf5, 0xce, 0x53, 0xef, 0xaf, 0x67, 0xe4, 0xe9, 0xd4, 0x83, 0x3d, 0x6c, 0x24, 0xe8, 0x1d, 0x94,
	0x17, 0x2a, 0xd2, 0x59, 0xb4, 0xb4, 0xb5, 0x43, 0x7a, 0x77, 0x50, 0x5a, 0xaf, 0x75, 0xe8, 0x0d,
	0x94, 0xe6, 0x99, 0x32, 0x69, 0xeb, 0x1d, 0x77, 0x87, 0x7c, 0x98, 0xa9, 0xc1, 0x1e, 0xd6, 0x82,
	0x5e, 0x15, 0xec, 0x3c, 0xaa, 0x8b, 0xe1, 0x70, 0x2c, 0xd8, 0x94, 0xf1, 0x3f, 0x46, 0x7b, 0x95,
	0xf3, 0xad, 0x7f, 0xe5, 0x1b, 0xba, 0xfb, 0x7d, 0x1f, 0x1a, 0x1f, 0x04, 0x0d, 0xf5, 0x10, 0x89,
	0x70, 0x1a, 0x51, 0x34, 0x86, 0xca, 0x0d, 0xe3, 0x21, 0xe3, 0x53, 0x03, 0x6b, 0x74, 0x5e, 0xef,
	0x80, 0x6d, 0xea, 0xbd, 0x5e, 0x2e, 0xc6, 0x05, 0x05, 0x5d, 0x41, 0x25, 0x36, 0xbe, 0xf3, 0x45,
	0xa8, 0x77, 0xce, 0x77, 0x00, 0xb7, 0xa7, 0xc4, 0x05, 0x09, 0x3d, 0x83, 0xc6, 0x82, 0xa8, 0x60,
	0xc6, 0xf8, 0xd4, 0x4f, 0xa8, 0xde, 0x94, 0x92, 0xd9, 0x84, 0xfb, 0x45, 0x57, 0xef, 0x80, 0x74,
	0x9f, 0x43, 0x65, 0xe5, 0x07, 0x1d, 0x40, 0xf5, 0xfa, 0xaa, 0xef, 0x4f, 0xfa, 0x7d, 0xdc, 0xdc,
	0x43, 0x0d, 0x00, 0x5d, 0x8d, 0xf1, 0xc5, 0xa7, 0x8b, 0xcb, 0xa6, 0xe5, 0xfe, 0xb2, 0xc0, 0x9e,
	0x98, 0xfb, 0x83, 0x86, 0x70, 0x10, 0x52, 0xa9, 0x18, 0x37, 0x7f, 0x2c, 0x1d, 0xcb, 0x98, 0x3e,
	0x5d, 0x99, 0x5e, 0xdf, 0x9b, 0xc2, 0x70, 0xd7, 0xfb, 0xb8, 0x1e, 0xc7, 0x1b, 0x5a, 0x34, 0x82,
	0x7b, 0xb9, 0xbb, 0x3c, 0xf9, 0xdb, 0x1d, 0xc9, 0xb7, 0x2d, 0x2e, 0xce, 0x29, 0xe8, 0x0b, 0x34,
	0x83, 0xbb, 0xd3, 0xf6, 0x45, 0x1a, 0x51, 0xe9, 0x94, 0x0d, 0xf9, 0xe5, 0x7f, 0x7d, 0x24, 0xfc,
	0x20, 0xd8, 0xa8, 0x65, 0xef, 0xf4, 0xeb, 0x49, 0x0e, 0x60, 0x71, 0x9b, 0x24, 0xac, 0xbd, 0xe5,
	0x8d, 0xb9, 0xb1, 0xcd, 0x9b, 0xd0, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xac, 0x59, 0x29, 0xc6,
	0x85, 0x04, 0x00, 0x00,
}
