// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authentication/v1alpha1/policy.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on StringMatch with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringMatch) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MatchType.(type) {

	case *StringMatch_Exact:
		// no validation rules for Exact

	case *StringMatch_Prefix:
		// no validation rules for Prefix

	case *StringMatch_Suffix:
		// no validation rules for Suffix

	case *StringMatch_Regex:
		// no validation rules for Regex

	}

	return nil
}

// StringMatchValidationError is the validation error returned by
// StringMatch.Validate if the designated constraints aren't met.
type StringMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringMatchValidationError) ErrorName() string { return "StringMatchValidationError" }

// Error satisfies the builtin error interface
func (e StringMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringMatchValidationError{}

// Validate checks the field values on MutualTls with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MutualTls) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AllowTls

	// no validation rules for Mode

	return nil
}

// MutualTlsValidationError is the validation error returned by
// MutualTls.Validate if the designated constraints aren't met.
type MutualTlsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MutualTlsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MutualTlsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MutualTlsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MutualTlsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MutualTlsValidationError) ErrorName() string { return "MutualTlsValidationError" }

// Error satisfies the builtin error interface
func (e MutualTlsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMutualTls.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MutualTlsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MutualTlsValidationError{}

// Validate checks the field values on Jwt with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Jwt) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Issuer

	// no validation rules for JwksUri

	for idx, item := range m.GetTriggerRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return JwtValidationError{
					field:  fmt.Sprintf("TriggerRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// JwtValidationError is the validation error returned by Jwt.Validate if the
// designated constraints aren't met.
type JwtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwtValidationError) ErrorName() string { return "JwtValidationError" }

// Error satisfies the builtin error interface
func (e JwtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwtValidationError{}

// Validate checks the field values on PeerAuthenticationMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PeerAuthenticationMethod) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Params.(type) {

	case *PeerAuthenticationMethod_Mtls:

		if v, ok := interface{}(m.GetMtls()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return PeerAuthenticationMethodValidationError{
					field:  "Mtls",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PeerAuthenticationMethod_Jwt:

		if v, ok := interface{}(m.GetJwt()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return PeerAuthenticationMethodValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PeerAuthenticationMethodValidationError is the validation error returned by
// PeerAuthenticationMethod.Validate if the designated constraints aren't met.
type PeerAuthenticationMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerAuthenticationMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerAuthenticationMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerAuthenticationMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerAuthenticationMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerAuthenticationMethodValidationError) ErrorName() string {
	return "PeerAuthenticationMethodValidationError"
}

// Error satisfies the builtin error interface
func (e PeerAuthenticationMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeerAuthenticationMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerAuthenticationMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerAuthenticationMethodValidationError{}

// Validate checks the field values on OriginAuthenticationMethod with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OriginAuthenticationMethod) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetJwt()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return OriginAuthenticationMethodValidationError{
				field:  "Jwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OriginAuthenticationMethodValidationError is the validation error returned
// by OriginAuthenticationMethod.Validate if the designated constraints aren't met.
type OriginAuthenticationMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OriginAuthenticationMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OriginAuthenticationMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OriginAuthenticationMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OriginAuthenticationMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OriginAuthenticationMethodValidationError) ErrorName() string {
	return "OriginAuthenticationMethodValidationError"
}

// Error satisfies the builtin error interface
func (e OriginAuthenticationMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOriginAuthenticationMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OriginAuthenticationMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OriginAuthenticationMethodValidationError{}

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Policy) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTargets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					field:  fmt.Sprintf("Targets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PeerIsOptional

	for idx, item := range m.GetOrigins() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					field:  fmt.Sprintf("Origins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OriginIsOptional

	// no validation rules for PrincipalBinding

	return nil
}

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

// Validate checks the field values on TargetSelector with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TargetSelector) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return TargetSelectorValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TargetSelectorValidationError is the validation error returned by
// TargetSelector.Validate if the designated constraints aren't met.
type TargetSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetSelectorValidationError) ErrorName() string { return "TargetSelectorValidationError" }

// Error satisfies the builtin error interface
func (e TargetSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetSelectorValidationError{}

// Validate checks the field values on PortSelector with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PortSelector) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Port.(type) {

	case *PortSelector_Number:
		// no validation rules for Number

	case *PortSelector_Name:
		// no validation rules for Name

	}

	return nil
}

// PortSelectorValidationError is the validation error returned by
// PortSelector.Validate if the designated constraints aren't met.
type PortSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortSelectorValidationError) ErrorName() string { return "PortSelectorValidationError" }

// Error satisfies the builtin error interface
func (e PortSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortSelectorValidationError{}

// Validate checks the field values on Jwt_TriggerRule with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Jwt_TriggerRule) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetExcludedPaths() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return Jwt_TriggerRuleValidationError{
					field:  fmt.Sprintf("ExcludedPaths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetIncludedPaths() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return Jwt_TriggerRuleValidationError{
					field:  fmt.Sprintf("IncludedPaths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// Jwt_TriggerRuleValidationError is the validation error returned by
// Jwt_TriggerRule.Validate if the designated constraints aren't met.
type Jwt_TriggerRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Jwt_TriggerRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Jwt_TriggerRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Jwt_TriggerRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Jwt_TriggerRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Jwt_TriggerRuleValidationError) ErrorName() string { return "Jwt_TriggerRuleValidationError" }

// Error satisfies the builtin error interface
func (e Jwt_TriggerRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwt_TriggerRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Jwt_TriggerRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Jwt_TriggerRuleValidationError{}
