{
  "openapi": "3.0.1",
  "info": {
    "title": "Authentication policy for Istio services.",
    "version": "v1alpha1"
  },
  "components": {
    "schemas": {
      "istio.authentication.v1alpha1.Jwt": {
        "description": "JSON Web Token (JWT) token format for authentication as defined by [RFC 7519](https://tools.ietf.org/html/rfc7519). See [OAuth 2.0](https://tools.ietf.org/html/rfc6749) and [OIDC 1.0](http://openid.net/connect) for how this is used in the whole authentication flow.",
        "properties": {
          "audiences": {
            "description": "The list of JWT [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuer": {
            "description": "Identifies the issuer that issued the JWT. See [issuer](https://tools.ietf.org/html/rfc7519#section-4.1.1) Usually a URL or an email address.",
            "type": "string"
          },
          "jwks": {
            "description": "JSON Web Key Set of public keys to validate signature of the JWT. See https://auth0.com/docs/jwks.",
            "type": "string"
          },
          "jwks_uri": {
            "description": "URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).",
            "type": "string"
          },
          "jwt_headers": {
            "description": "JWT is sent in a request header. `header` represents the header name.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "jwt_params": {
            "description": "JWT is sent in a query parameter. `query` represents the query parameter name.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trigger_rules": {
            "description": "List of trigger rules to decide if this JWT should be used to validate the request. The JWT validation happens if any one of the rules matched. If the list is not empty and none of the rules matched, authentication will skip the JWT validation. Leave this empty to always trigger the JWT validation.",
            "items": {
              "description": "Trigger rule to match against a request. The trigger rule is satisfied if and only if both rules, excluded_paths and include_paths are satisfied.",
              "properties": {
                "excluded_paths": {
                  "$ref": "#/components/schemas/istio.authentication.v1alpha1.StringMatch"
                },
                "included_paths": {
                  "$ref": "#/components/schemas/istio.authentication.v1alpha1.StringMatch"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "istio.authentication.v1alpha1.MutualTls": {
        "description": "TLS authentication params.",
        "properties": {
          "allow_tls": {
            "description": "WILL BE DEPRECATED, if set, will translates to `TLS_PERMISSIVE` mode. Set this flag to true to allow regular TLS (i.e without client x509 certificate). If request carries client certificate, identity will be extracted and used (set to peer identity). Otherwise, peer identity will be left unset. When the flag is false (default), request must have client certificate.",
            "type": "boolean"
          },
          "mode": {
            "description": "Defines the mode of mTLS authentication.",
            "enum": [
              [
                "STRICT",
                "PERMISSIVE"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.authentication.v1alpha1.OriginAuthenticationMethod": {
        "description": "OriginAuthenticationMethod defines authentication method/params for origin authentication. Origin could be end-user, device, delegate service etc. Currently, only JWT is supported for origin authentication.",
        "properties": {
          "jwt": {
            "$ref": "#/components/schemas/istio.authentication.v1alpha1.Jwt"
          }
        },
        "type": "object"
      },
      "istio.authentication.v1alpha1.PeerAuthenticationMethod": {
        "description": "PeerAuthenticationMethod defines one particular type of authentication, e.g mutual TLS, JWT etc, (no authentication is one type by itself) that can be used for peer authentication. The type can be progammatically determine by checking the type of the \"params\" field.",
        "properties": {
          "params": {
            "oneOf": [
              {
                "description": "Set if mTLS is used.",
                "properties": {
                  "allow_tls": {
                    "description": "WILL BE DEPRECATED, if set, will translates to `TLS_PERMISSIVE` mode. Set this flag to true to allow regular TLS (i.e without client x509 certificate). If request carries client certificate, identity will be extracted and used (set to peer identity). Otherwise, peer identity will be left unset. When the flag is false (default), request must have client certificate.",
                    "type": "boolean"
                  },
                  "mode": {
                    "description": "Defines the mode of mTLS authentication.",
                    "enum": [
                      [
                        "STRICT",
                        "PERMISSIVE"
                      ]
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "audiences": {
                    "description": "The list of JWT [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "issuer": {
                    "description": "Identifies the issuer that issued the JWT. See [issuer](https://tools.ietf.org/html/rfc7519#section-4.1.1) Usually a URL or an email address.",
                    "type": "string"
                  },
                  "jwks": {
                    "description": "JSON Web Key Set of public keys to validate signature of the JWT. See https://auth0.com/docs/jwks.",
                    "type": "string"
                  },
                  "jwks_uri": {
                    "description": "URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).",
                    "type": "string"
                  },
                  "jwt_headers": {
                    "description": "JWT is sent in a request header. `header` represents the header name.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "jwt_params": {
                    "description": "JWT is sent in a query parameter. `query` represents the query parameter name.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "trigger_rules": {
                    "description": "List of trigger rules to decide if this JWT should be used to validate the request. The JWT validation happens if any one of the rules matched. If the list is not empty and none of the rules matched, authentication will skip the JWT validation. Leave this empty to always trigger the JWT validation.",
                    "items": {
                      "description": "Trigger rule to match against a request. The trigger rule is satisfied if and only if both rules, excluded_paths and include_paths are satisfied.",
                      "properties": {
                        "excluded_paths": {
                          "$ref": "#/components/schemas/istio.authentication.v1alpha1.StringMatch"
                        },
                        "included_paths": {
                          "$ref": "#/components/schemas/istio.authentication.v1alpha1.StringMatch"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "istio.authentication.v1alpha1.Policy": {
        "description": "Policy defines what authentication methods can be accepted on workload(s), and if authenticated, which method/certificate will set the request principal (i.e request.auth.principal attribute).",
        "properties": {
          "origin_is_optional": {
            "description": "Set this flag to true to accept request (for origin authentication perspective), even when none of the origin authentication methods defined above satisfied. Typically, this is used to delay the rejection decision to next layer (e.g authorization). This flag is ignored if no authentication defined for origin (origins field is empty).",
            "type": "boolean"
          },
          "origins": {
            "$ref": "#/components/schemas/istio.authentication.v1alpha1.OriginAuthenticationMethod"
          },
          "peer_is_optional": {
            "description": "Set this flag to true to accept request (for peer authentication perspective), even when none of the peer authentication methods defined above satisfied. Typically, this is used to delay the rejection decision to next layer (e.g authorization). This flag is ignored if no authentication defined for peer (peers field is empty).",
            "type": "boolean"
          },
          "peers": {
            "$ref": "#/components/schemas/istio.authentication.v1alpha1.PeerAuthenticationMethod"
          },
          "principal_binding": {
            "description": "Define whether peer or origin identity should be use for principal. Default value is USE_PEER. If peer (or origin) identity is not available, either because of peer/origin authentication is not defined, or failed, principal will be left unset. In other words, binding rule does not affect the decision to accept or reject request.",
            "enum": [
              [
                "USE_PEER",
                "USE_ORIGIN"
              ]
            ],
            "type": "string"
          },
          "targets": {
            "$ref": "#/components/schemas/istio.authentication.v1alpha1.TargetSelector"
          }
        },
        "type": "object"
      },
      "istio.authentication.v1alpha1.PortSelector": {
        "description": "PortSelector specifies the name or number of a port to be used for matching targets for authentication policy. This is copied from networking API to avoid dependency.",
        "properties": {
          "port": {
            "oneOf": [
              {
                "description": "Valid port number",
                "format": "int32",
                "type": "integer"
              },
              {
                "description": "Port name",
                "type": "string"
              }
            ]
          }
        },
        "type": "object"
      },
      "istio.authentication.v1alpha1.PrincipalBinding": {
        "description": "Associates authentication with request principal.",
        "enum": [
          [
            "USE_PEER",
            "USE_ORIGIN"
          ]
        ],
        "type": "string"
      },
      "istio.authentication.v1alpha1.StringMatch": {
        "description": "Describes how to match a given string. Match is case-sensitive.",
        "properties": {
          "match_type": {
            "oneOf": [
              {
                "description": "exact string match.",
                "type": "string"
              },
              {
                "description": "prefix-based match.",
                "type": "string"
              },
              {
                "description": "suffix-based match.",
                "type": "string"
              },
              {
                "description": "ECMAscript style regex-based match as defined by [EDCA-262]( http://en.cppreference.com/w/cpp/regex/ecmascript). Example: \"^/pets/(.*?)?\"",
                "type": "string"
              }
            ]
          }
        },
        "type": "object"
      },
      "istio.authentication.v1alpha1.TargetSelector": {
        "description": "TargetSelector defines a matching rule to a workload. A workload is selected if it is associated with the service name and service port(s) specified in the selector rule.",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "description": "REQUIRED. The name must be a short name from the service registry. The fully qualified domain name will be resolved in a platform specific manner.",
            "type": "string"
          },
          "ports": {
            "$ref": "#/components/schemas/istio.authentication.v1alpha1.PortSelector"
          }
        },
        "type": "object"
      }
    }
  }
}