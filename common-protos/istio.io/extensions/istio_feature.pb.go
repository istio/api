// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: istio.io/extensions/istio_feature.proto

package extensions

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FeatureStatus int32

const (
	FeatureStatus_ALPHA        FeatureStatus = 0
	FeatureStatus_BETA         FeatureStatus = 1
	FeatureStatus_STABLE       FeatureStatus = 2
	FeatureStatus_EXPERIMENTAL FeatureStatus = 3
)

var FeatureStatus_name = map[int32]string{
	0: "ALPHA",
	1: "BETA",
	2: "STABLE",
	3: "EXPERIMENTAL",
}

var FeatureStatus_value = map[string]int32{
	"ALPHA":        0,
	"BETA":         1,
	"STABLE":       2,
	"EXPERIMENTAL": 3,
}

func (x FeatureStatus) String() string {
	return proto.EnumName(FeatureStatus_name, int32(x))
}

func (FeatureStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8bcfce038daeb906, []int{0}
}

// These options should be used during schema definition, applying them to some of the fields in protobuf
// Below are 1 related repo and 1 PR for this repo:
// Repo: https://github.com/istio/enhancements
// Repo PR: https://github.com/istio/enhancements/pull/88
type IstioFeature struct {
	// Types that are valid to be assigned to XStatus:
	//	*IstioFeature_Status
	XStatus isIstioFeature_XStatus `protobuf_oneof:"_status"`
	// Types that are valid to be assigned to XId:
	//	*IstioFeature_Id
	XId                  isIstioFeature_XId `protobuf_oneof:"_id"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *IstioFeature) Reset()         { *m = IstioFeature{} }
func (m *IstioFeature) String() string { return proto.CompactTextString(m) }
func (*IstioFeature) ProtoMessage()    {}
func (*IstioFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bcfce038daeb906, []int{0}
}
func (m *IstioFeature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IstioFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IstioFeature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IstioFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioFeature.Merge(m, src)
}
func (m *IstioFeature) XXX_Size() int {
	return m.Size()
}
func (m *IstioFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioFeature.DiscardUnknown(m)
}

var xxx_messageInfo_IstioFeature proto.InternalMessageInfo

type isIstioFeature_XStatus interface {
	isIstioFeature_XStatus()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isIstioFeature_XId interface {
	isIstioFeature_XId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IstioFeature_Status struct {
	Status FeatureStatus `protobuf:"varint,1,opt,name=status,proto3,enum=istio.extensions.FeatureStatus,oneof" json:"status,omitempty"`
}
type IstioFeature_Id struct {
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (*IstioFeature_Status) isIstioFeature_XStatus() {}
func (*IstioFeature_Id) isIstioFeature_XId()         {}

func (m *IstioFeature) GetXStatus() isIstioFeature_XStatus {
	if m != nil {
		return m.XStatus
	}
	return nil
}
func (m *IstioFeature) GetXId() isIstioFeature_XId {
	if m != nil {
		return m.XId
	}
	return nil
}

func (m *IstioFeature) GetStatus() FeatureStatus {
	if x, ok := m.GetXStatus().(*IstioFeature_Status); ok {
		return x.Status
	}
	return FeatureStatus_ALPHA
}

func (m *IstioFeature) GetId() string {
	if x, ok := m.GetXId().(*IstioFeature_Id); ok {
		return x.Id
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IstioFeature) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IstioFeature_Status)(nil),
		(*IstioFeature_Id)(nil),
	}
}

var E_Feature = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*IstioFeature)(nil),
	Field:         1300,
	Name:          "istio.extensions.feature",
	Tag:           "bytes,1300,opt,name=feature",
	Filename:      "istio.io/extensions/istio_feature.proto",
}

func init() {
	proto.RegisterEnum("istio.extensions.FeatureStatus", FeatureStatus_name, FeatureStatus_value)
	proto.RegisterType((*IstioFeature)(nil), "istio.extensions.IstioFeature")
	proto.RegisterExtension(E_Feature)
}

func init() {
	proto.RegisterFile("istio.io/extensions/istio_feature.proto", fileDescriptor_8bcfce038daeb906)
}

var fileDescriptor_8bcfce038daeb906 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0x6a, 0xf2, 0x40,
	0x14, 0x86, 0x3d, 0xf1, 0x53, 0x3f, 0x4f, 0x6d, 0x19, 0xa6, 0x1b, 0x29, 0x34, 0x0d, 0xdd, 0x54,
	0xba, 0x98, 0x80, 0xdd, 0x95, 0x6e, 0x32, 0x10, 0x51, 0xb0, 0xad, 0x44, 0x17, 0xd2, 0x4d, 0x88,
	0xcd, 0x28, 0x03, 0xe2, 0x84, 0xcc, 0x04, 0x7a, 0x09, 0x5e, 0x40, 0x2f, 0xaa, 0xcb, 0x5e, 0x42,
	0xc9, 0x95, 0x14, 0x93, 0xd8, 0xff, 0xed, 0xcc, 0xf3, 0xbe, 0x33, 0xcf, 0x39, 0x78, 0x21, 0xb5,
	0x91, 0x8a, 0x49, 0xe5, 0x8a, 0x27, 0x23, 0x36, 0x5a, 0xaa, 0x8d, 0x76, 0x8b, 0xb3, 0x70, 0x29,
	0x22, 0x93, 0xa5, 0x82, 0x25, 0xa9, 0x32, 0x8a, 0x92, 0x12, 0xfc, 0xa4, 0x4e, 0x9c, 0x95, 0x52,
	0xab, 0xb5, 0x70, 0x8b, 0xfb, 0x45, 0xb6, 0x74, 0x63, 0xa1, 0x1f, 0x53, 0x99, 0x18, 0x95, 0x96,
	0x99, 0x73, 0x8d, 0x9d, 0xd1, 0x2e, 0x35, 0x28, 0x9b, 0xe8, 0x0d, 0x36, 0xb5, 0x89, 0x4c, 0xa6,
	0xbb, 0xe0, 0x40, 0xef, 0xa8, 0x7f, 0xc6, 0x7e, 0x96, 0xb2, 0x0a, 0x9d, 0x16, 0xd8, 0xb0, 0x16,
	0x54, 0x81, 0x2d, 0x00, 0x3d, 0x46, 0x4b, 0xc6, 0x5d, 0xcb, 0x81, 0x5e, 0x7b, 0x08, 0x81, 0x25,
	0xe3, 0x2d, 0x00, 0x6f, 0x63, 0x2b, 0x2c, 0x11, 0xde, 0xc0, 0x7a, 0x28, 0xe3, 0x4b, 0x8e, 0x87,
	0xdf, 0x4a, 0x68, 0x1b, 0x1b, 0xde, 0x78, 0x32, 0xf4, 0x48, 0x8d, 0xfe, 0xc7, 0x7f, 0xdc, 0x9f,
	0x79, 0x04, 0x28, 0x62, 0x73, 0x3a, 0xf3, 0xf8, 0xd8, 0x27, 0x16, 0x25, 0xd8, 0xf1, 0xe7, 0x13,
	0x3f, 0x18, 0xdd, 0xfa, 0x77, 0x33, 0x6f, 0x4c, 0xea, 0xd7, 0x73, 0x6c, 0x55, 0xf6, 0xf4, 0x94,
	0x95, 0x9a, 0x6c, 0xaf, 0xc9, 0x06, 0x52, 0xac, 0xe3, 0xfb, 0xc4, 0xec, 0xfe, 0xdb, 0x7d, 0x46,
	0x07, 0x7a, 0x07, 0x7d, 0xfb, 0xb7, 0xc9, 0x57, 0xf3, 0x60, 0x5f, 0xc7, 0xd9, 0x4b, 0x6e, 0xc3,
	0x6b, 0x6e, 0xc3, 0x5b, 0x6e, 0xc3, 0x83, 0xf3, 0x31, 0xfd, 0x28, 0x91, 0xee, 0x1f, 0xab, 0x58,
	0x34, 0x8b, 0x67, 0xaf, 0xde, 0x03, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x1a, 0xf5, 0x7e, 0xa8, 0x01,
	0x00, 0x00,
}

func (m *IstioFeature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstioFeature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFeature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.XId != nil {
		{
			size := m.XId.Size()
			i -= size
			if _, err := m.XId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XStatus != nil {
		{
			size := m.XStatus.Size()
			i -= size
			if _, err := m.XStatus.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IstioFeature_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFeature_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintIstioFeature(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *IstioFeature_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFeature_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Id)
	copy(dAtA[i:], m.Id)
	i = encodeVarintIstioFeature(dAtA, i, uint64(len(m.Id)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func encodeVarintIstioFeature(dAtA []byte, offset int, v uint64) int {
	offset -= sovIstioFeature(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IstioFeature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XStatus != nil {
		n += m.XStatus.Size()
	}
	if m.XId != nil {
		n += m.XId.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IstioFeature_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIstioFeature(uint64(m.Status))
	return n
}
func (m *IstioFeature_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovIstioFeature(uint64(l))
	return n
}

func sovIstioFeature(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIstioFeature(x uint64) (n int) {
	return sovIstioFeature(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IstioFeature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIstioFeature
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IstioFeature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IstioFeature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v FeatureStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstioFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= FeatureStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XStatus = &IstioFeature_Status{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIstioFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIstioFeature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIstioFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XId = &IstioFeature_Id{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIstioFeature(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIstioFeature
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIstioFeature(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIstioFeature
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIstioFeature
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIstioFeature
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIstioFeature
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIstioFeature
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIstioFeature
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIstioFeature        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIstioFeature          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIstioFeature = fmt.Errorf("proto: unexpected end of group")
)
