// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mixer/adapter/model/v1beta1/quota.proto

package v1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on QuotaRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QuotaRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Quotas

	return nil
}

// QuotaRequestValidationError is the validation error returned by
// QuotaRequest.Validate if the designated constraints aren't met.
type QuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaRequestValidationError) ErrorName() string { return "QuotaRequestValidationError" }

// Error satisfies the builtin error interface
func (e QuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaRequestValidationError{}

// Validate checks the field values on QuotaResult with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QuotaResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Quotas

	return nil
}

// QuotaResultValidationError is the validation error returned by
// QuotaResult.Validate if the designated constraints aren't met.
type QuotaResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaResultValidationError) ErrorName() string { return "QuotaResultValidationError" }

// Error satisfies the builtin error interface
func (e QuotaResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaResultValidationError{}

// Validate checks the field values on QuotaRequest_QuotaParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QuotaRequest_QuotaParams) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Amount

	// no validation rules for BestEffort

	return nil
}

// QuotaRequest_QuotaParamsValidationError is the validation error returned by
// QuotaRequest_QuotaParams.Validate if the designated constraints aren't met.
type QuotaRequest_QuotaParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaRequest_QuotaParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaRequest_QuotaParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaRequest_QuotaParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaRequest_QuotaParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaRequest_QuotaParamsValidationError) ErrorName() string {
	return "QuotaRequest_QuotaParamsValidationError"
}

// Error satisfies the builtin error interface
func (e QuotaRequest_QuotaParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaRequest_QuotaParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaRequest_QuotaParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaRequest_QuotaParamsValidationError{}

// Validate checks the field values on QuotaResult_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QuotaResult_Result) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValidDuration()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return QuotaResult_ResultValidationError{
				field:  "ValidDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GrantedAmount

	return nil
}

// QuotaResult_ResultValidationError is the validation error returned by
// QuotaResult_Result.Validate if the designated constraints aren't met.
type QuotaResult_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaResult_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaResult_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaResult_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaResult_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaResult_ResultValidationError) ErrorName() string {
	return "QuotaResult_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e QuotaResult_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaResult_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaResult_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaResult_ResultValidationError{}
