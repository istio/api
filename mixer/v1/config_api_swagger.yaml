swagger: '2.0'

# visit http://editor.swagger.io/  and import this document URL to view.
# Check https://docs.google.com/document/d/17Ww_wS72UvGa15WipUibyLetlLNjK3hnqi-DfhkpoMg/edit#
# for details
info:
  version: "0.1.0"
  title: Istio Mixer Configuration API
  description: The mixer configuration API allows users to configure all facets of a mixer deployment.
    The mixer configuration is organized in `scope -> subject -> rule` hierarchy.
    __scope__ and __subject__ are analogous to a `manager > employee` relationship. A __manager__(`scope`)  may configure any direct or indirect __reports__ (`subject`) including self.
    
    
    * __scope__ models a scope of authority. It pertains to the authority that is configuring the system.
      `global`, `namespace:ns1.cluster.local` are examples of scopes. Rules contained in a scope can only affect that scope.
      
      Scopes are hierarchical. 
      Given a fully-qualified Kubernetes-style service name such as `svc1.ns1.cluster.local`, 
      it can be determined that the following scopes apply -
      `service:svc1.ns1.cluster.local`, `namespace:ns1.cluster.local`,  `global`
        
    * __subject__ models the entity (often service) being configured. In order for a `scope` to configure a `subject`, the `scope` must contain the `subject`
     
    
    
    Consider `/scopes/{scope}/subjects/{subject}/rules`, subject must be contained within the scope. 
    
    * `/scopes/namespace:ns1./subjects/service:svc1.ns1./rules` is valid because service svc1 is contained in namespace ns1. Therefore scope `namespace:ns1.` may define policies that affect `service:svc1.ns1.`
    
    * `/scopes/namespace:ns1./subjects/service:svc1.ns2./rules` is __not valid__, because svc1.ns2 __is not__ contained in namespace ns1.
    
    
    __scope__ and __subject__ draw from the same set of values with `scope >= subject`.
   
    
host: localhost:8080    
basePath: /api/v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
  
#TODO Add security section
paths:
  /scopes:
    get:
      operationId: listScopes
      description: |
        Gets `scopes` available in the system.
      responses:
        200:
          description: List of scopes.
          schema:
            type: array
            items:
              type: string

  /scopes/{scope}/subjects/{subject}:
    parameters:
    - name: scope
      in: path
      type: string
      required: true
    - name: subject
      in: path
      type: string
      required: true
    post:
      operationId: createPolicy
      description: |
        Creates a policy.
      parameters:
      - name: policy
        in: body
        required: true
        schema:
          $ref: '#/definitions/policy'
      responses:
        201:
          description: Created the policy for a scope, subject.
        403:
          description: Caller not authorized for scope.
        404:
          description: Scope or subject not found.

  /scopes/{scope}/subjects/{subject}/rules:
    parameters:
    - name: scope
      in: path
      type: string
      required: true
    - name: subject
      in: path
      type: string
      required: true
    get:
      operationId: listRules
      description: |
        Gets `rules` under the given scope, subject.
      parameters:
      - name: selector
        in: query
        type: string
        description: Only return rules that contain the given selector.
        required: false
      responses:
        200:
          description: List of rules.
          schema:
            type: array
            items:
              $ref: '#/definitions/ruleInfo'
    post:
      operationId: createRule
      description: |
        Creates a rule.
      parameters:
      - name: ruleCreate
        in: body
        required: true
        schema:
          type: object
          properties:
            selector:
              type: string
      responses:
        201:
          description: Create a rule for a scope, subject.
          schema:
            $ref: '#/definitions/ruleResponse'
        403:
          description: Caller not authorized for scope.
        404:
          description: Scope, subject, rule or aspect not found.
        409:
          description: A rule with the same selector exists.
          schema:
            $ref: '#/definitions/ruleResponse'
              
  /scopes/{scope}/subjects/{subject}/rules/{ruleid}/aspects/{aspect}:
    put:
      operationId: replaceRules
      description: |
        Creates or replaces a rule's list of aspects.
      parameters:
      - name: scope
        in: path
        type: string
        required: true
      - name: subject
        in: path
        type: string
        required: true
      - name: ruleid
        in: path
        type: string
        required: true
      - name: aspect
        in: path
        type: string
        required: true
      - name: ruleUpdate
        in: body
        required: true
        schema:
          $ref: '#/definitions/replaceRulesRequest'
      responses:
        200:
          description: Replaced the list aspects.
          schema:
            $ref: '#/definitions/ruleResponse'
        403:
          description: Caller not authorized for scope.
        404:
          description: Scope, subject, rule or aspect not found.
        409:
          description: Underlying rule has changed, read the rule before writing.

  /scopes/{scope}/subjects/{subject}/rules/{ruleid}:
    delete:
      operationId: deleteRule
      description: Delete a rule specified by the rule id.
      parameters:
      - name: scope
        in: path
        type: string
        required: true
      - name: subject
        in: path
        type: string
        required: true
      - name: ruleid
        in: path
        type: string
        required: true
      responses:
        204:
          description: OK.
        403:
          description: Caller not authorized for scope.
        404:
          description: Scope, subject or rule not found.
        422:
          description: Subject is not contained within the scope.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/errorResponse'
            
  /scopes/{scope}/adapters/{adapter_name}/{config_name}:
    parameters:
    - name: scope
      in: path
      type: string
      required: true
    - name: adapter_name
      description: Name of the adapter implementation.
      in: path
      type: string
      required: true
    - name: config_name
      description: |
        An adapter implementation can be instantiated with multiple sets of parameters.
        config_name makes a parameter set addressable.
      in: path
      type: string
      required: true
    put:
      operationId: replaceAdapterConfig
      description: |
        Creates or replaces a named adapter configuration.
        To define an adapter configuration of type `stdioLogger` 
        `PUT /adapters/stdioLogger/default` with 
        `{"params": {"logStream": "STDERR"}}`.
      parameters:
      - name: adapter
        in: body
        required: true
        schema:
          $ref: '#/definitions/adapter'
      responses:
        200:
          description: OK.
        403:
          description: Caller not authorized for scope.
        404:
          description: Scope or adapter_name not found.
    
  /scopes/{scope}/descriptors/{descriptor_type}/{descriptor_name}:
    parameters:
    - name: scope
      in: path
      type: string
      required: true
    - name: descriptor_type
      in: path
      type: string
      required: true
    - name: descriptor_name
      in: path
      type: string
      required: true
    get:
      operationId: getDescriptor
      description: |
        Gets a descriptor.
      responses:
        200:
          description: Found descriptor.
        403:
          description: Caller not authorized for scope.
        404:
          description: Scope, descriptor_type or descriptor_name not found.
          
    put:
      operationId: replaceDescriptor
      description: Creates or replaces a descriptor.
      parameters:
      - name: descriptor
        in: body
        required: true
        schema:
          $ref: '#/definitions/descriptor'
      responses:
        200:
          description: Replaced descriptor.
        403:
          description: Caller not authorized for scope.
        404:
          description: Scope or descriptor_type not found.

definitions:
  aspect:
    type: object
    properties:
      kind:
        type: string
      adapter:
        type: string
      inputs:
        type: object
      params:
        type: object
  replaceRulesRequest:
    type: object
    properties:
      scope:
        type: string
      subject:
        type: string
      ruleID:
        type: string
      aspect:
        type: string
      revision:
        type: string
        description: |
                Used for optimistic concurrency. If the revision specified in the request
                does not match the revision on the server, the update is rejected.
      aspects:
        type: array
        items:
          $ref: '#/definitions/aspect'
  ruleResponse:
    type: object
    properties:
      ruleID:
        type: string
      revision:
        type: string
      selector:
        type: string
  ruleInfo:
    type: object
    properties:
      ruleID:
        type: string
      revision:
        type: string
      selector:
        type: string
      aspect:
        $ref: '#/definitions/aspectListMap'
  errorResponse:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  aspectListMap:
    description: "map <aspectKind, aspectList>"
    type: object
  policy:
    description: List of rules.
    type: object
    properties:
      scope:
        type: string
      subject:
        type: string
      revision:
        type: string
      rules:
        type: array
        items:
          $ref: '#/definitions/ruleInfo'
  descriptor:
    description: |
      Payload while creating and fetching descriptors. 
      The contents depend on descriptor_type. 
      See https://github.com/istio/api/tree/master/mixer/v1/config/descriptor for details.
    type: object
  adapter:
    description: Adapter configuration definition.
    type: object
    properties:
      params:
        description: Params schema is specified by the adapter at /api/v1/schema/adapters/adapter_name.
        type: object
