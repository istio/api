// Copyright 2016 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package istio.mixer.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/rpc/status.proto";
import "mixer/v1/attributes.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// Used to get a thumbs-up/thumbs-down before performing an action.
message CheckRequest {
  // parameters for a quota allocation
  message QuotaParams {
    // Amount of quota to allocate
    int64 amount = 1;

    // When true, supports returning less quota than what was requested.
    bool best_effort = 2;
  }

  // The attributes to use for this request.
  //
  // Mixer's configuration determines how these attributes are used to
  // establish the result returned in the response.
  Attributes attributes = 1 [(gogoproto.nullable) = false];

  // The number of words in the global dictionary, used with to populate the attributes.
  // This value is used as a quick way to determine whether the client is using a dictionary that
  // the server understands.
  uint32 global_word_count = 2;

  // Used for deduplicating `Check` calls in the case of failed RPCs and retries. This should be a UUID
  // per call, where the same UUID is used for retries of the same call.
  string deduplication_id = 3;

  // whether Check should validate preconditions
  bool preconditions = 4;

  // The individual quotas to allocate
  map<string, QuotaParams> quotas = 5;
}

message CheckResponse {
  message PreconditionResult {
    // Indicates whether the precondition check passed or failed
    bool pass = 1;

    // The amount of time for which this result can be considered valid.
    google.protobuf.Duration valid_duration = 2 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];

    // The number of uses for which this result can be considered valid.
    int32 valid_use_count = 3;
  }

  message QuotaResult {
    // The amount of time for which this result can be considered valid.
    google.protobuf.Duration valid_duration = 1 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];

    // The amount of granted quota. When `QuotaParams.best_effort` is true, this will be a value between 0 and `QuotaParams.amount`.
    // If `QuotaParams.best_effort` is false, this will be either 0 or a value >= `QuotaParams.amount`.
    int64 granted_amount = 3;
  }

  // The thumbs-up/thumbs-down decision for the overall condition check.
  //
  // A status code of OK indicates all conditions were satisfied. Any other code indicates not
  // all conditions were satisfied.
  google.rpc.Status status = 1 [(gogoproto.nullable) = false];

  // The attributes returned by Mixer.
  //
  // The exact set of attributes returned is determined by the set of
  // adapters Mixer is configured with. These attributes are used to
  // ferry new attributes that Mixer derived based on the input set of
  // attributes and its configuration.
  Attributes attributes = 2 [(gogoproto.nullable) = false];

  // The precondition check results, when precondition checking was requested.
  PreconditionResult precondition = 3;

  // The resulting quota, one entry per requested quota.
  map<string, QuotaResult> quotas = 4;
}
