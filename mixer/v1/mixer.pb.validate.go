// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mixer/v1/mixer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CheckRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CheckRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAttributes()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CheckRequestValidationError{
				field:  "Attributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GlobalWordCount

	// no validation rules for DeduplicationId

	// no validation rules for Quotas

	return nil
}

// CheckRequestValidationError is the validation error returned by
// CheckRequest.Validate if the designated constraints aren't met.
type CheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRequestValidationError) ErrorName() string { return "CheckRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRequestValidationError{}

// Validate checks the field values on CheckResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CheckResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPrecondition()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CheckResponseValidationError{
				field:  "Precondition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Quotas

	return nil
}

// CheckResponseValidationError is the validation error returned by
// CheckResponse.Validate if the designated constraints aren't met.
type CheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponseValidationError) ErrorName() string { return "CheckResponseValidationError" }

// Error satisfies the builtin error interface
func (e CheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponseValidationError{}

// Validate checks the field values on ReferencedAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReferencedAttributes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAttributeMatches() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ReferencedAttributesValidationError{
					field:  fmt.Sprintf("AttributeMatches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ReferencedAttributesValidationError is the validation error returned by
// ReferencedAttributes.Validate if the designated constraints aren't met.
type ReferencedAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferencedAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferencedAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferencedAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferencedAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferencedAttributesValidationError) ErrorName() string {
	return "ReferencedAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ReferencedAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReferencedAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferencedAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferencedAttributesValidationError{}

// Validate checks the field values on HeaderOperation with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HeaderOperation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Value

	// no validation rules for Operation

	return nil
}

// HeaderOperationValidationError is the validation error returned by
// HeaderOperation.Validate if the designated constraints aren't met.
type HeaderOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderOperationValidationError) ErrorName() string { return "HeaderOperationValidationError" }

// Error satisfies the builtin error interface
func (e HeaderOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaderOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderOperationValidationError{}

// Validate checks the field values on RouteDirective with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RouteDirective) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRequestHeaderOperations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return RouteDirectiveValidationError{
					field:  fmt.Sprintf("RequestHeaderOperations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResponseHeaderOperations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return RouteDirectiveValidationError{
					field:  fmt.Sprintf("ResponseHeaderOperations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DirectResponseCode

	// no validation rules for DirectResponseBody

	return nil
}

// RouteDirectiveValidationError is the validation error returned by
// RouteDirective.Validate if the designated constraints aren't met.
type RouteDirectiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteDirectiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteDirectiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteDirectiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteDirectiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteDirectiveValidationError) ErrorName() string { return "RouteDirectiveValidationError" }

// Error satisfies the builtin error interface
func (e RouteDirectiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteDirective.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteDirectiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteDirectiveValidationError{}

// Validate checks the field values on ReportRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ReportRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ReportRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GlobalWordCount

	return nil
}

// ReportRequestValidationError is the validation error returned by
// ReportRequest.Validate if the designated constraints aren't met.
type ReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportRequestValidationError) ErrorName() string { return "ReportRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportRequestValidationError{}

// Validate checks the field values on ReportResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ReportResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ReportResponseValidationError is the validation error returned by
// ReportResponse.Validate if the designated constraints aren't met.
type ReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportResponseValidationError) ErrorName() string { return "ReportResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportResponseValidationError{}

// Validate checks the field values on CheckRequest_QuotaParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckRequest_QuotaParams) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Amount

	// no validation rules for BestEffort

	return nil
}

// CheckRequest_QuotaParamsValidationError is the validation error returned by
// CheckRequest_QuotaParams.Validate if the designated constraints aren't met.
type CheckRequest_QuotaParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRequest_QuotaParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRequest_QuotaParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRequest_QuotaParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRequest_QuotaParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRequest_QuotaParamsValidationError) ErrorName() string {
	return "CheckRequest_QuotaParamsValidationError"
}

// Error satisfies the builtin error interface
func (e CheckRequest_QuotaParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRequest_QuotaParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRequest_QuotaParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRequest_QuotaParamsValidationError{}

// Validate checks the field values on CheckResponse_PreconditionResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CheckResponse_PreconditionResult) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CheckResponse_PreconditionResultValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetValidDuration()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CheckResponse_PreconditionResultValidationError{
				field:  "ValidDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ValidUseCount

	if v, ok := interface{}(m.GetReferencedAttributes()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CheckResponse_PreconditionResultValidationError{
				field:  "ReferencedAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRouteDirective()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CheckResponse_PreconditionResultValidationError{
				field:  "RouteDirective",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CheckResponse_PreconditionResultValidationError is the validation error
// returned by CheckResponse_PreconditionResult.Validate if the designated
// constraints aren't met.
type CheckResponse_PreconditionResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponse_PreconditionResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponse_PreconditionResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponse_PreconditionResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponse_PreconditionResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponse_PreconditionResultValidationError) ErrorName() string {
	return "CheckResponse_PreconditionResultValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResponse_PreconditionResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse_PreconditionResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponse_PreconditionResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponse_PreconditionResultValidationError{}

// Validate checks the field values on CheckResponse_QuotaResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckResponse_QuotaResult) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValidDuration()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CheckResponse_QuotaResultValidationError{
				field:  "ValidDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GrantedAmount

	if v, ok := interface{}(m.GetReferencedAttributes()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CheckResponse_QuotaResultValidationError{
				field:  "ReferencedAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CheckResponse_QuotaResultValidationError is the validation error returned by
// CheckResponse_QuotaResult.Validate if the designated constraints aren't met.
type CheckResponse_QuotaResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponse_QuotaResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponse_QuotaResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponse_QuotaResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponse_QuotaResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponse_QuotaResultValidationError) ErrorName() string {
	return "CheckResponse_QuotaResultValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResponse_QuotaResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse_QuotaResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponse_QuotaResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponse_QuotaResultValidationError{}

// Validate checks the field values on ReferencedAttributes_AttributeMatch with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ReferencedAttributes_AttributeMatch) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Condition

	// no validation rules for Regex

	// no validation rules for MapKey

	return nil
}

// ReferencedAttributes_AttributeMatchValidationError is the validation error
// returned by ReferencedAttributes_AttributeMatch.Validate if the designated
// constraints aren't met.
type ReferencedAttributes_AttributeMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferencedAttributes_AttributeMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferencedAttributes_AttributeMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferencedAttributes_AttributeMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferencedAttributes_AttributeMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferencedAttributes_AttributeMatchValidationError) ErrorName() string {
	return "ReferencedAttributes_AttributeMatchValidationError"
}

// Error satisfies the builtin error interface
func (e ReferencedAttributes_AttributeMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReferencedAttributes_AttributeMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferencedAttributes_AttributeMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferencedAttributes_AttributeMatchValidationError{}
