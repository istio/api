// Code generated by protoc-gen-gogo. DO NOT EDIT.
// mixer/v1/mixer.proto is a deprecated file.

// This package defines the Mixer API that the sidecar proxy uses to perform
// precondition checks, manage quotas, and report telemetry.

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	rpc "istio.io/gogo-genproto/googleapis/google/rpc"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// How an attribute's value was matched
type ReferencedAttributes_Condition int32

const (
	CONDITION_UNSPECIFIED ReferencedAttributes_Condition = 0
	ABSENCE               ReferencedAttributes_Condition = 1
	EXACT                 ReferencedAttributes_Condition = 2
	REGEX                 ReferencedAttributes_Condition = 3
)

var ReferencedAttributes_Condition_name = map[int32]string{
	0: "CONDITION_UNSPECIFIED",
	1: "ABSENCE",
	2: "EXACT",
	3: "REGEX",
}

var ReferencedAttributes_Condition_value = map[string]int32{
	"CONDITION_UNSPECIFIED": 0,
	"ABSENCE":               1,
	"EXACT":                 2,
	"REGEX":                 3,
}

func (ReferencedAttributes_Condition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{2, 0}
}

// Operation type.
type HeaderOperation_Operation int32

const (
	REPLACE HeaderOperation_Operation = 0
	REMOVE  HeaderOperation_Operation = 1
	APPEND  HeaderOperation_Operation = 2
)

var HeaderOperation_Operation_name = map[int32]string{
	0: "REPLACE",
	1: "REMOVE",
	2: "APPEND",
}

var HeaderOperation_Operation_value = map[string]int32{
	"REPLACE": 0,
	"REMOVE":  1,
	"APPEND":  2,
}

func (HeaderOperation_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{3, 0}
}

// Used to signal how the sets of compressed attributes should be reconstituted server-side.
type ReportRequest_RepeatedAttributesSemantics int32

const (
	// Use delta encoding between sets of compressed attributes to reduce the overall on-wire
	// request size. Each individual set of attributes is used to modify the previous set.
	// NOTE: There is no way with this encoding to specify attribute value deletion. This
	// option should be used with extreme caution.
	DELTA_ENCODING ReportRequest_RepeatedAttributesSemantics = 0
	// Treat each set of compressed attributes as complete - independent from other sets
	// in this request. This will result in on-wire duplication of attributes and values, but
	// will allow for proper accounting of absent values in overall encoding.
	INDEPENDENT_ENCODING ReportRequest_RepeatedAttributesSemantics = 1
)

var ReportRequest_RepeatedAttributesSemantics_name = map[int32]string{
	0: "DELTA_ENCODING",
	1: "INDEPENDENT_ENCODING",
}

var ReportRequest_RepeatedAttributesSemantics_value = map[string]int32{
	"DELTA_ENCODING":       0,
	"INDEPENDENT_ENCODING": 1,
}

func (ReportRequest_RepeatedAttributesSemantics) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{5, 0}
}

// Used to get a thumbs-up/thumbs-down before performing an action.
type CheckRequest struct {
	// The attributes to use for this request.
	//
	// Mixer's configuration determines how these attributes are used to
	// establish the result returned in the response.
	Attributes CompressedAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes"`
	// The number of words in the global dictionary, used with to populate the attributes.
	// This value is used as a quick way to determine whether the client is using a dictionary that
	// the server understands.
	GlobalWordCount uint32 `protobuf:"varint,2,opt,name=global_word_count,json=globalWordCount,proto3" json:"global_word_count,omitempty"`
	// Used for deduplicating `Check` calls in the case of failed RPCs and retries. This should be a UUID
	// per call, where the same UUID is used for retries of the same call.
	DeduplicationId string `protobuf:"bytes,3,opt,name=deduplication_id,json=deduplicationId,proto3" json:"deduplication_id,omitempty"`
	// The individual quotas to allocate
	Quotas map[string]CheckRequest_QuotaParams `protobuf:"bytes,4,rep,name=quotas,proto3" json:"quotas" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CheckRequest) Reset()      { *m = CheckRequest{} }
func (*CheckRequest) ProtoMessage() {}
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{0}
}
func (m *CheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckRequest.Merge(m, src)
}
func (m *CheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckRequest proto.InternalMessageInfo

// parameters for a quota allocation
type CheckRequest_QuotaParams struct {
	// Amount of quota to allocate
	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// When true, supports returning less quota than what was requested.
	BestEffort bool `protobuf:"varint,2,opt,name=best_effort,json=bestEffort,proto3" json:"best_effort,omitempty"`
}

func (m *CheckRequest_QuotaParams) Reset()      { *m = CheckRequest_QuotaParams{} }
func (*CheckRequest_QuotaParams) ProtoMessage() {}
func (*CheckRequest_QuotaParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{0, 0}
}
func (m *CheckRequest_QuotaParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckRequest_QuotaParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckRequest_QuotaParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckRequest_QuotaParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckRequest_QuotaParams.Merge(m, src)
}
func (m *CheckRequest_QuotaParams) XXX_Size() int {
	return m.Size()
}
func (m *CheckRequest_QuotaParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckRequest_QuotaParams.DiscardUnknown(m)
}

var xxx_messageInfo_CheckRequest_QuotaParams proto.InternalMessageInfo

// The response generated by the Check method.
type CheckResponse struct {
	// The precondition check results.
	Precondition CheckResponse_PreconditionResult `protobuf:"bytes,2,opt,name=precondition,proto3" json:"precondition"`
	// The resulting quota, one entry per requested quota.
	Quotas map[string]CheckResponse_QuotaResult `protobuf:"bytes,3,rep,name=quotas,proto3" json:"quotas" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CheckResponse) Reset()      { *m = CheckResponse{} }
func (*CheckResponse) ProtoMessage() {}
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{1}
}
func (m *CheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckResponse.Merge(m, src)
}
func (m *CheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckResponse proto.InternalMessageInfo

// Expresses the result of a precondition check.
type CheckResponse_PreconditionResult struct {
	// A status code of OK indicates all preconditions were satisfied. Any other code indicates not
	// all preconditions were satisfied and details describe why.
	Status rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	// The amount of time for which this result can be considered valid.
	ValidDuration time.Duration `protobuf:"bytes,2,opt,name=valid_duration,json=validDuration,proto3,stdduration" json:"valid_duration"`
	// The number of uses for which this result can be considered valid.
	ValidUseCount int32 `protobuf:"varint,3,opt,name=valid_use_count,json=validUseCount,proto3" json:"valid_use_count,omitempty"`
	// The total set of attributes that were used in producing the result
	// along with matching conditions.
	ReferencedAttributes *ReferencedAttributes `protobuf:"bytes,5,opt,name=referenced_attributes,json=referencedAttributes,proto3" json:"referenced_attributes,omitempty"`
	// An optional routing directive, used to manipulate the traffic metadata
	// whenever all preconditions are satisfied.
	RouteDirective *RouteDirective `protobuf:"bytes,6,opt,name=route_directive,json=routeDirective,proto3" json:"route_directive,omitempty"`
}

func (m *CheckResponse_PreconditionResult) Reset()      { *m = CheckResponse_PreconditionResult{} }
func (*CheckResponse_PreconditionResult) ProtoMessage() {}
func (*CheckResponse_PreconditionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{1, 0}
}
func (m *CheckResponse_PreconditionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckResponse_PreconditionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckResponse_PreconditionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckResponse_PreconditionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckResponse_PreconditionResult.Merge(m, src)
}
func (m *CheckResponse_PreconditionResult) XXX_Size() int {
	return m.Size()
}
func (m *CheckResponse_PreconditionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckResponse_PreconditionResult.DiscardUnknown(m)
}

var xxx_messageInfo_CheckResponse_PreconditionResult proto.InternalMessageInfo

// Expresses the result of a quota allocation.
type CheckResponse_QuotaResult struct {
	// The amount of time for which this result can be considered valid.
	ValidDuration time.Duration `protobuf:"bytes,1,opt,name=valid_duration,json=validDuration,proto3,stdduration" json:"valid_duration"`
	// The amount of granted quota. When `QuotaParams.best_effort` is true, this will be >= 0.
	// If `QuotaParams.best_effort` is false, this will be either 0 or >= `QuotaParams.amount`.
	GrantedAmount int64 `protobuf:"varint,2,opt,name=granted_amount,json=grantedAmount,proto3" json:"granted_amount,omitempty"`
	// A status code of OK indicates quota was fetched successfully.
	// Any other code indicates error in fetching quota.
	Status rpc.Status `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
	// The total set of attributes that were used in producing the result
	// along with matching conditions.
	ReferencedAttributes ReferencedAttributes `protobuf:"bytes,5,opt,name=referenced_attributes,json=referencedAttributes,proto3" json:"referenced_attributes"`
}

func (m *CheckResponse_QuotaResult) Reset()      { *m = CheckResponse_QuotaResult{} }
func (*CheckResponse_QuotaResult) ProtoMessage() {}
func (*CheckResponse_QuotaResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{1, 1}
}
func (m *CheckResponse_QuotaResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckResponse_QuotaResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckResponse_QuotaResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckResponse_QuotaResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckResponse_QuotaResult.Merge(m, src)
}
func (m *CheckResponse_QuotaResult) XXX_Size() int {
	return m.Size()
}
func (m *CheckResponse_QuotaResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckResponse_QuotaResult.DiscardUnknown(m)
}

var xxx_messageInfo_CheckResponse_QuotaResult proto.InternalMessageInfo

// Describes the attributes that were used to determine the response.
// This can be used to construct a response cache.
type ReferencedAttributes struct {
	// The message-level dictionary. Refer to [CompressedAttributes][istio.mixer.v1.CompressedAttributes] for information
	// on using dictionaries.
	Words []string `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
	// Describes a set of attributes.
	AttributeMatches []ReferencedAttributes_AttributeMatch `protobuf:"bytes,2,rep,name=attribute_matches,json=attributeMatches,proto3" json:"attribute_matches"`
}

func (m *ReferencedAttributes) Reset()      { *m = ReferencedAttributes{} }
func (*ReferencedAttributes) ProtoMessage() {}
func (*ReferencedAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{2}
}
func (m *ReferencedAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReferencedAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReferencedAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReferencedAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferencedAttributes.Merge(m, src)
}
func (m *ReferencedAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ReferencedAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferencedAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ReferencedAttributes proto.InternalMessageInfo

// Describes a single attribute match.
type ReferencedAttributes_AttributeMatch struct {
	// The name of the attribute. This is a dictionary index encoded in a manner identical
	// to all strings in the [CompressedAttributes][istio.mixer.v1.CompressedAttributes] message.
	Name int32 `protobuf:"zigzag32,1,opt,name=name,proto3" json:"name,omitempty"`
	// The kind of match against the attribute value.
	Condition ReferencedAttributes_Condition `protobuf:"varint,2,opt,name=condition,proto3,enum=istio.mixer.v1.ReferencedAttributes_Condition" json:"condition,omitempty"`
	// If a REGEX condition is provided for a STRING_MAP attribute,
	// clients should use the regex value to match against map keys.
	// RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3" json:"regex,omitempty"`
	// A key in a STRING_MAP. When multiple keys from a STRING_MAP
	// attribute were referenced, there will be multiple AttributeMatch
	// messages with different map_key values. Values for map_key SHOULD
	// be ignored for attributes that are not STRING_MAP.
	//
	// Indices for the keys are used (taken either from the
	// message dictionary from the `words` field or the global dictionary).
	//
	// If no map_key value is provided for a STRING_MAP attribute, the
	// entire STRING_MAP will be used.
	MapKey int32 `protobuf:"zigzag32,4,opt,name=map_key,json=mapKey,proto3" json:"map_key,omitempty"`
}

func (m *ReferencedAttributes_AttributeMatch) Reset()      { *m = ReferencedAttributes_AttributeMatch{} }
func (*ReferencedAttributes_AttributeMatch) ProtoMessage() {}
func (*ReferencedAttributes_AttributeMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{2, 0}
}
func (m *ReferencedAttributes_AttributeMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReferencedAttributes_AttributeMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReferencedAttributes_AttributeMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReferencedAttributes_AttributeMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferencedAttributes_AttributeMatch.Merge(m, src)
}
func (m *ReferencedAttributes_AttributeMatch) XXX_Size() int {
	return m.Size()
}
func (m *ReferencedAttributes_AttributeMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferencedAttributes_AttributeMatch.DiscardUnknown(m)
}

var xxx_messageInfo_ReferencedAttributes_AttributeMatch proto.InternalMessageInfo

// Operation on HTTP headers to replace, append, or remove a header. Header
// names are normalized to lower-case with dashes, e.g.  "x-request-id".
// Pseudo-headers ":path", ":authority", and ":method" are supported to modify
// the request headers.
type HeaderOperation struct {
	// Header name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Header value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Header operation.
	Operation HeaderOperation_Operation `protobuf:"varint,3,opt,name=operation,proto3,enum=istio.mixer.v1.HeaderOperation_Operation" json:"operation,omitempty"`
}

func (m *HeaderOperation) Reset()      { *m = HeaderOperation{} }
func (*HeaderOperation) ProtoMessage() {}
func (*HeaderOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{3}
}
func (m *HeaderOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeaderOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeaderOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeaderOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderOperation.Merge(m, src)
}
func (m *HeaderOperation) XXX_Size() int {
	return m.Size()
}
func (m *HeaderOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderOperation.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderOperation proto.InternalMessageInfo

// Expresses the routing manipulation actions to be performed on behalf of
// Mixer in response to a precondition check.
type RouteDirective struct {
	// Operations on the request headers.
	RequestHeaderOperations []HeaderOperation `protobuf:"bytes,1,rep,name=request_header_operations,json=requestHeaderOperations,proto3" json:"request_header_operations"`
	// Operations on the response headers.
	ResponseHeaderOperations []HeaderOperation `protobuf:"bytes,2,rep,name=response_header_operations,json=responseHeaderOperations,proto3" json:"response_header_operations"`
	// If set, enables a direct response without proxying the request to the routing
	// destination. Required to be a value in the 2xx or 3xx range.
	DirectResponseCode uint32 `protobuf:"varint,3,opt,name=direct_response_code,json=directResponseCode,proto3" json:"direct_response_code,omitempty"`
	// Supplies the response body for the direct response.
	// If this setting is omitted, no body is included in the generated response.
	DirectResponseBody string `protobuf:"bytes,4,opt,name=direct_response_body,json=directResponseBody,proto3" json:"direct_response_body,omitempty"`
}

func (m *RouteDirective) Reset()      { *m = RouteDirective{} }
func (*RouteDirective) ProtoMessage() {}
func (*RouteDirective) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{4}
}
func (m *RouteDirective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteDirective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteDirective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteDirective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteDirective.Merge(m, src)
}
func (m *RouteDirective) XXX_Size() int {
	return m.Size()
}
func (m *RouteDirective) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteDirective.DiscardUnknown(m)
}

var xxx_messageInfo_RouteDirective proto.InternalMessageInfo

// Used to report telemetry after performing one or more actions.
type ReportRequest struct {
	// The attributes to use for this request.
	//
	// Each `Attributes` element represents the state of a single action. Multiple actions
	// can be provided in a single message in order to improve communication efficiency. The
	// client can accumulate a set of actions and send them all in one single message.
	Attributes []CompressedAttributes `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes"`
	// Indicates how to decode the attributes sets in this request.
	RepeatedAttributesSemantics ReportRequest_RepeatedAttributesSemantics `protobuf:"varint,4,opt,name=repeated_attributes_semantics,json=repeatedAttributesSemantics,proto3,enum=istio.mixer.v1.ReportRequest_RepeatedAttributesSemantics" json:"repeated_attributes_semantics,omitempty"`
	// The default message-level dictionary for all the attributes.
	// Individual attribute messages can have their own dictionaries, but if they don't
	// then this set of words, if it is provided, is used instead.
	//
	// This makes it possible to share the same dictionary for all attributes in this
	// request, which can substantially reduce the overall request size.
	DefaultWords []string `protobuf:"bytes,2,rep,name=default_words,json=defaultWords,proto3" json:"default_words,omitempty"`
	// The number of words in the global dictionary.
	// To detect global dictionary out of sync between client and server.
	GlobalWordCount uint32 `protobuf:"varint,3,opt,name=global_word_count,json=globalWordCount,proto3" json:"global_word_count,omitempty"`
}

func (m *ReportRequest) Reset()      { *m = ReportRequest{} }
func (*ReportRequest) ProtoMessage() {}
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{5}
}
func (m *ReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportRequest.Merge(m, src)
}
func (m *ReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportRequest proto.InternalMessageInfo

// Used to carry responses to telemetry reports
type ReportResponse struct {
}

func (m *ReportResponse) Reset()      { *m = ReportResponse{} }
func (*ReportResponse) ProtoMessage() {}
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f59c90bff4c1e2, []int{6}
}
func (m *ReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportResponse.Merge(m, src)
}
func (m *ReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("istio.mixer.v1.ReferencedAttributes_Condition", ReferencedAttributes_Condition_name, ReferencedAttributes_Condition_value)
	proto.RegisterEnum("istio.mixer.v1.HeaderOperation_Operation", HeaderOperation_Operation_name, HeaderOperation_Operation_value)
	proto.RegisterEnum("istio.mixer.v1.ReportRequest_RepeatedAttributesSemantics", ReportRequest_RepeatedAttributesSemantics_name, ReportRequest_RepeatedAttributesSemantics_value)
	proto.RegisterType((*CheckRequest)(nil), "istio.mixer.v1.CheckRequest")
	proto.RegisterMapType((map[string]CheckRequest_QuotaParams)(nil), "istio.mixer.v1.CheckRequest.QuotasEntry")
	proto.RegisterType((*CheckRequest_QuotaParams)(nil), "istio.mixer.v1.CheckRequest.QuotaParams")
	proto.RegisterType((*CheckResponse)(nil), "istio.mixer.v1.CheckResponse")
	proto.RegisterMapType((map[string]CheckResponse_QuotaResult)(nil), "istio.mixer.v1.CheckResponse.QuotasEntry")
	proto.RegisterType((*CheckResponse_PreconditionResult)(nil), "istio.mixer.v1.CheckResponse.PreconditionResult")
	proto.RegisterType((*CheckResponse_QuotaResult)(nil), "istio.mixer.v1.CheckResponse.QuotaResult")
	proto.RegisterType((*ReferencedAttributes)(nil), "istio.mixer.v1.ReferencedAttributes")
	proto.RegisterType((*ReferencedAttributes_AttributeMatch)(nil), "istio.mixer.v1.ReferencedAttributes.AttributeMatch")
	proto.RegisterType((*HeaderOperation)(nil), "istio.mixer.v1.HeaderOperation")
	proto.RegisterType((*RouteDirective)(nil), "istio.mixer.v1.RouteDirective")
	proto.RegisterType((*ReportRequest)(nil), "istio.mixer.v1.ReportRequest")
	proto.RegisterType((*ReportResponse)(nil), "istio.mixer.v1.ReportResponse")
}

func init() { proto.RegisterFile("mixer/v1/mixer.proto", fileDescriptor_f6f59c90bff4c1e2) }

var fileDescriptor_f6f59c90bff4c1e2 = []byte{
	// 1234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x3d, 0x73, 0xdb, 0x46,
	0x13, 0xc6, 0x11, 0x22, 0x65, 0x2e, 0x4d, 0x8a, 0xbe, 0xa1, 0x5f, 0x53, 0xf4, 0x6b, 0x48, 0xc3,
	0x7c, 0x8c, 0x9c, 0x02, 0x94, 0xe5, 0x26, 0x49, 0x91, 0x0c, 0x45, 0xc2, 0x0a, 0x6d, 0x99, 0x52,
	0x20, 0x39, 0x76, 0xdc, 0x60, 0x20, 0xe0, 0x44, 0x63, 0x4c, 0xf2, 0xe0, 0x03, 0xa0, 0x58, 0x45,
	0x66, 0x3c, 0x93, 0x26, 0x65, 0x66, 0x52, 0x24, 0x65, 0xd2, 0x64, 0xf2, 0x0b, 0x32, 0x29, 0xf2,
	0x03, 0x5c, 0xba, 0x74, 0x95, 0x44, 0x74, 0x8a, 0x94, 0x2e, 0x5d, 0x66, 0x70, 0x77, 0x04, 0x49,
	0x91, 0x92, 0x95, 0x8f, 0xee, 0x6e, 0x3f, 0x9e, 0xdd, 0x7d, 0xb0, 0xbb, 0x38, 0x28, 0xf5, 0xbc,
	0xc7, 0x84, 0xd5, 0x0e, 0xae, 0xd5, 0xf8, 0x41, 0xf7, 0x19, 0x0d, 0x29, 0x2e, 0x78, 0x41, 0xe8,
	0x51, 0x5d, 0x88, 0x0e, 0xae, 0x55, 0x4a, 0x1d, 0xda, 0xa1, 0x5c, 0x55, 0x8b, 0x4f, 0xc2, 0xaa,
	0xa2, 0x75, 0x28, 0xed, 0x74, 0x49, 0x8d, 0xdf, 0xf6, 0xa2, 0xfd, 0x9a, 0x1b, 0x31, 0x3b, 0xf4,
	0x68, 0x5f, 0xea, 0x2f, 0x49, 0x3d, 0xf3, 0x9d, 0x5a, 0x10, 0xda, 0x61, 0x14, 0x48, 0xc5, 0x62,
	0x12, 0xd4, 0x0e, 0x43, 0xe6, 0xed, 0x45, 0x21, 0x91, 0xaa, 0xea, 0x0f, 0x2a, 0x9c, 0x6f, 0x3c,
	0x20, 0xce, 0x43, 0x93, 0x3c, 0x8a, 0x48, 0x10, 0xe2, 0x9b, 0x00, 0x23, 0xa3, 0x32, 0x5a, 0x46,
	0x2b, 0xb9, 0xb5, 0x37, 0xf5, 0xc9, 0xfc, 0xf4, 0x06, 0xed, 0xf9, 0x8c, 0x04, 0x01, 0x71, 0xeb,
	0x89, 0xed, 0xfa, 0xdc, 0xd3, 0x5f, 0x97, 0x14, 0x73, 0xcc, 0x1b, 0xbf, 0x03, 0x17, 0x3a, 0x5d,
	0xba, 0x67, 0x77, 0xad, 0xcf, 0x28, 0x73, 0x2d, 0x87, 0x46, 0xfd, 0xb0, 0x9c, 0x5a, 0x46, 0x2b,
	0x79, 0x73, 0x41, 0x28, 0xee, 0x52, 0xe6, 0x36, 0x62, 0x31, 0xbe, 0x0a, 0x45, 0x97, 0xb8, 0x91,
	0xdf, 0xf5, 0x1c, 0x5e, 0x93, 0xe5, 0xb9, 0x65, 0x75, 0x19, 0xad, 0x64, 0xcd, 0x85, 0x09, 0x79,
	0xcb, 0xc5, 0x37, 0x20, 0xf3, 0x28, 0xa2, 0xa1, 0x1d, 0x94, 0xe7, 0x96, 0xd5, 0x95, 0xdc, 0xda,
	0xca, 0x54, 0x7a, 0x63, 0x05, 0xe9, 0x1f, 0x73, 0x53, 0xa3, 0x1f, 0xb2, 0x43, 0x99, 0xa2, 0xf4,
	0xae, 0xdc, 0x80, 0x1c, 0x57, 0x6e, 0xdb, 0xcc, 0xee, 0x05, 0xf8, 0x7f, 0x90, 0xb1, 0x7b, 0x3c,
	0xc5, 0xb8, 0x6a, 0xd5, 0x94, 0x37, 0xbc, 0x04, 0xb9, 0x3d, 0x12, 0x84, 0x16, 0xd9, 0xdf, 0xa7,
	0x4c, 0xe4, 0x7f, 0xce, 0x84, 0x58, 0x64, 0x70, 0x49, 0xc5, 0x91, 0x38, 0x22, 0x08, 0x2e, 0x82,
	0xfa, 0x90, 0x1c, 0x72, 0x90, 0xac, 0x19, 0x1f, 0xf1, 0x07, 0x90, 0x3e, 0xb0, 0xbb, 0x11, 0xe1,
	0xbe, 0x67, 0xca, 0x57, 0xa4, 0x64, 0x0a, 0xb7, 0xf7, 0x53, 0xef, 0xa2, 0xea, 0x37, 0xf3, 0x90,
	0x97, 0x76, 0x81, 0x4f, 0xfb, 0x01, 0xc1, 0xf7, 0xe1, 0xbc, 0xcf, 0x88, 0x43, 0xfb, 0xae, 0x17,
	0x13, 0x23, 0xc1, 0x57, 0x4f, 0x00, 0x17, 0x4e, 0xfa, 0xf6, 0x98, 0x87, 0x49, 0x82, 0xa8, 0x1b,
	0x4a, 0x52, 0x26, 0xb0, 0xf0, 0x46, 0x42, 0xb1, 0xca, 0x29, 0xbe, 0x7a, 0x3a, 0xea, 0xc9, 0x1c,
	0xff, 0x91, 0x02, 0x3c, 0x1d, 0x13, 0xaf, 0x42, 0x46, 0x74, 0xa8, 0xec, 0x30, 0xac, 0x8b, 0xde,
	0xd5, 0x99, 0xef, 0xe8, 0x3b, 0x5c, 0x33, 0x04, 0x12, 0x76, 0xf8, 0x26, 0x14, 0x0e, 0xec, 0xae,
	0xe7, 0x5a, 0xc3, 0xa6, 0x97, 0xf5, 0x2e, 0x0e, 0x3d, 0x87, 0x53, 0xa1, 0x37, 0xa5, 0xc1, 0xfa,
	0xb9, 0x18, 0xe0, 0xdb, 0xdf, 0x96, 0x90, 0x99, 0xe7, 0xae, 0x43, 0x05, 0x7e, 0x1b, 0x16, 0x04,
	0x56, 0x14, 0x10, 0xd9, 0x95, 0x71, 0xab, 0xa5, 0xa5, 0xdd, 0x9d, 0x80, 0x88, 0x9e, 0xfc, 0x14,
	0x2e, 0x32, 0xb2, 0x4f, 0x18, 0xe9, 0x3b, 0xc4, 0xb5, 0xc6, 0xc6, 0x22, 0x3d, 0x7b, 0x2c, 0xcc,
	0xc4, 0x78, 0x34, 0x16, 0x66, 0x89, 0xcd, 0x90, 0xe2, 0x0d, 0x58, 0x60, 0x34, 0x0a, 0x89, 0xe5,
	0x7a, 0x8c, 0x38, 0xa1, 0x77, 0x40, 0xca, 0x19, 0x0e, 0xaa, 0x4d, 0x81, 0xc6, 0x66, 0xcd, 0xa1,
	0x95, 0x59, 0x60, 0x13, 0xf7, 0x9b, 0x73, 0xe7, 0xe6, 0x8a, 0xe9, 0xca, 0xd7, 0x29, 0xd9, 0x83,
	0x92, 0xdf, 0x69, 0xb6, 0xd0, 0x3f, 0x66, 0xeb, 0x2d, 0x28, 0x74, 0x98, 0xdd, 0x0f, 0x63, 0x0a,
	0x7a, 0xc9, 0x08, 0xab, 0x66, 0x5e, 0x4a, 0xeb, 0x62, 0x4c, 0x46, 0x9f, 0x34, 0x73, 0xc6, 0x4f,
	0x6a, 0xfd, 0x07, 0xf4, 0x4a, 0xc8, 0x99, 0x24, 0x57, 0xdc, 0xd7, 0x0d, 0xe6, 0x87, 0x93, 0x83,
	0x79, 0x96, 0x2e, 0x17, 0x04, 0x8f, 0x4f, 0xe6, 0x17, 0x2a, 0x94, 0x66, 0xa5, 0x86, 0x4b, 0x90,
	0x8e, 0xf7, 0x5e, 0xdc, 0xe3, 0xea, 0x4a, 0xd6, 0x14, 0x17, 0xbc, 0x0f, 0x17, 0x92, 0x52, 0xad,
	0x9e, 0x1d, 0x3a, 0x0f, 0x48, 0x50, 0x4e, 0xf1, 0x29, 0xbb, 0x7e, 0x96, 0x8a, 0xf5, 0xe4, 0x78,
	0x3b, 0x76, 0x96, 0x04, 0x14, 0xed, 0x09, 0x29, 0x09, 0x2a, 0xdf, 0x23, 0x28, 0x4c, 0x9a, 0x62,
	0x0c, 0x73, 0x7d, 0xbb, 0x47, 0x38, 0x03, 0x17, 0x4c, 0x7e, 0xc6, 0x9b, 0x90, 0x9d, 0x5c, 0x21,
	0x85, 0x35, 0xfd, 0x4c, 0x69, 0x34, 0x92, 0x91, 0x1e, 0x01, 0xc4, 0x25, 0x33, 0xd2, 0x21, 0x8f,
	0xe5, 0xea, 0x16, 0x17, 0x7c, 0x09, 0xe6, 0x7b, 0xb6, 0x6f, 0xc5, 0xe4, 0xcf, 0xf1, 0xd0, 0x99,
	0x9e, 0xed, 0xdf, 0x22, 0x87, 0xd5, 0x16, 0x64, 0x13, 0x18, 0xbc, 0x08, 0x17, 0x1b, 0x5b, 0xed,
	0x66, 0x6b, 0xb7, 0xb5, 0xd5, 0xb6, 0xee, 0xb4, 0x77, 0xb6, 0x8d, 0x46, 0xeb, 0x46, 0xcb, 0x68,
	0x16, 0x15, 0x9c, 0x83, 0xf9, 0xfa, 0xfa, 0x8e, 0xd1, 0x6e, 0x18, 0x45, 0x84, 0xb3, 0x90, 0x36,
	0xee, 0xd5, 0x1b, 0xbb, 0xc5, 0x54, 0x7c, 0x34, 0x8d, 0x0d, 0xe3, 0x5e, 0x51, 0xad, 0xfe, 0x84,
	0x60, 0xe1, 0x23, 0x62, 0xbb, 0x84, 0x6d, 0xf9, 0x44, 0x76, 0xee, 0x78, 0xbd, 0x59, 0x59, 0x6f,
	0x69, 0xfc, 0x93, 0x67, 0xe5, 0x77, 0xc4, 0x1b, 0x90, 0xa5, 0x43, 0x37, 0x9e, 0x7b, 0x61, 0xba,
	0x19, 0x8e, 0xa1, 0xeb, 0xc9, 0xc9, 0x1c, 0xf9, 0x56, 0x57, 0x21, 0x3b, 0x8a, 0x9f, 0x83, 0x79,
	0xd3, 0xd8, 0xde, 0xac, 0x37, 0x8c, 0xa2, 0x82, 0x01, 0x32, 0xa6, 0x71, 0x7b, 0xeb, 0x93, 0xb8,
	0x04, 0x80, 0x4c, 0x7d, 0x7b, 0xdb, 0x68, 0x37, 0x8b, 0xa9, 0xea, 0x2f, 0x29, 0x28, 0x4c, 0xce,
	0x38, 0xb6, 0x61, 0x91, 0x89, 0xbf, 0x81, 0xf5, 0x80, 0x07, 0xb5, 0x92, 0x00, 0xa2, 0x99, 0x72,
	0x6b, 0x4b, 0xaf, 0xc9, 0x4e, 0xb6, 0xc5, 0x25, 0x89, 0x73, 0x4c, 0x1b, 0x60, 0x07, 0x2a, 0x4c,
	0xf6, 0xf5, 0x8c, 0x18, 0xa9, 0xbf, 0x13, 0xa3, 0x3c, 0x04, 0x9a, 0x0a, 0xb2, 0x0a, 0x25, 0xb1,
	0xde, 0xac, 0x24, 0x96, 0x43, 0x5d, 0xc2, 0x09, 0xce, 0x9b, 0x58, 0xe8, 0x86, 0xe3, 0xd5, 0xa0,
	0x2e, 0x99, 0xe5, 0xb1, 0x47, 0x5d, 0xd1, 0x36, 0xd9, 0xe3, 0x1e, 0xeb, 0xd4, 0x3d, 0xac, 0xbe,
	0x4a, 0x41, 0xde, 0x24, 0x3e, 0x65, 0xe1, 0x49, 0x2f, 0x18, 0xf5, 0x5f, 0xbc, 0x60, 0x3e, 0x87,
	0x2b, 0x8c, 0xf8, 0xc4, 0x0e, 0x27, 0x16, 0x94, 0x15, 0x90, 0x9e, 0xdd, 0x0f, 0x3d, 0x27, 0xe0,
	0x89, 0x15, 0xd6, 0xde, 0x9b, 0x9e, 0x98, 0xb1, 0x8c, 0xe2, 0x1b, 0x87, 0x18, 0x85, 0xda, 0x19,
	0x02, 0x98, 0x97, 0xd9, 0xc9, 0x4a, 0xfc, 0x06, 0xe4, 0x5d, 0xb2, 0x6f, 0x47, 0xdd, 0xd0, 0x12,
	0x9b, 0x24, 0xc5, 0x37, 0xc9, 0x79, 0x29, 0xbc, 0xcb, 0x17, 0xca, 0xcc, 0x57, 0x96, 0x3a, 0xf3,
	0x95, 0x55, 0xbd, 0x05, 0x97, 0x4f, 0x49, 0x06, 0x63, 0x28, 0x34, 0x8d, 0xcd, 0xdd, 0xba, 0x65,
	0xb4, 0x1b, 0x5b, 0xcd, 0x56, 0x7b, 0xa3, 0xa8, 0xe0, 0x32, 0x94, 0x5a, 0xed, 0xa6, 0x11, 0x77,
	0xab, 0xd1, 0xde, 0x1d, 0x69, 0x50, 0xb5, 0x08, 0x85, 0x61, 0x9d, 0xe2, 0x83, 0xac, 0x7d, 0x87,
	0x20, 0x7d, 0x3b, 0xe6, 0x00, 0xb7, 0x20, 0xcd, 0x97, 0x27, 0xfe, 0xff, 0x69, 0x8f, 0x9d, 0xca,
	0x95, 0x53, 0x37, 0x6e, 0x55, 0xfd, 0x32, 0x85, 0xf0, 0x26, 0x64, 0x44, 0x18, 0x7c, 0xe5, 0x54,
	0x9a, 0x2b, 0xda, 0x49, 0xea, 0x31, 0xb4, 0xf5, 0x7b, 0x4f, 0x8f, 0x34, 0xe5, 0xd9, 0x91, 0xa6,
	0x3c, 0x3f, 0xd2, 0x94, 0x97, 0x47, 0x9a, 0xf2, 0x64, 0xa0, 0xa1, 0x1f, 0x07, 0x9a, 0xf2, 0x74,
	0xa0, 0xa1, 0x67, 0x03, 0x0d, 0xfd, 0x3e, 0xd0, 0xd0, 0x9f, 0x03, 0x4d, 0x79, 0x39, 0xd0, 0xd0,
	0x57, 0x2f, 0x34, 0xe5, 0xd9, 0x0b, 0x4d, 0x79, 0xfe, 0x42, 0x53, 0xee, 0x5f, 0x14, 0xe8, 0x1e,
	0xad, 0xd9, 0xbe, 0x57, 0x1b, 0x3e, 0xa9, 0x9f, 0x20, 0xf4, 0x33, 0x42, 0xaf, 0x10, 0xda, 0xcb,
	0xf0, 0x7f, 0xea, 0xf5, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x92, 0xd1, 0xe8, 0xef, 0xe3, 0x0b,
	0x00, 0x00,
}

func (x ReferencedAttributes_Condition) String() string {
	s, ok := ReferencedAttributes_Condition_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x HeaderOperation_Operation) String() string {
	s, ok := HeaderOperation_Operation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ReportRequest_RepeatedAttributesSemantics) String() string {
	s, ok := ReportRequest_RepeatedAttributesSemantics_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MixerClient is the client API for Mixer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MixerClient interface {
	// Checks preconditions and allocate quota before performing an operation.
	// The preconditions enforced depend on the set of supplied attributes and
	// the active configuration.
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	// Reports telemetry, such as logs and metrics.
	// The reported information depends on the set of supplied attributes and the
	// active configuration.
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type mixerClient struct {
	cc *grpc.ClientConn
}

func NewMixerClient(cc *grpc.ClientConn) MixerClient {
	return &mixerClient{cc}
}

// Deprecated: Do not use.
func (c *mixerClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/istio.mixer.v1.Mixer/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *mixerClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/istio.mixer.v1.Mixer/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixerServer is the server API for Mixer service.
type MixerServer interface {
	// Checks preconditions and allocate quota before performing an operation.
	// The preconditions enforced depend on the set of supplied attributes and
	// the active configuration.
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	// Reports telemetry, such as logs and metrics.
	// The reported information depends on the set of supplied attributes and the
	// active configuration.
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
}

// UnimplementedMixerServer can be embedded to have forward compatible implementations.
type UnimplementedMixerServer struct {
}

func (*UnimplementedMixerServer) Check(ctx context.Context, req *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedMixerServer) Report(ctx context.Context, req *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}

func RegisterMixerServer(s *grpc.Server, srv MixerServer) {
	s.RegisterService(&_Mixer_serviceDesc, srv)
}

func _Mixer_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/istio.mixer.v1.Mixer/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mixer_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixerServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/istio.mixer.v1.Mixer/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixerServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mixer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "istio.mixer.v1.Mixer",
	HandlerType: (*MixerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Mixer_Check_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Mixer_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixer/v1/mixer.proto",
}

func (m *CheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Quotas) > 0 {
		for k := range m.Quotas {
			v := m.Quotas[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMixer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMixer(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMixer(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DeduplicationId) > 0 {
		i -= len(m.DeduplicationId)
		copy(dAtA[i:], m.DeduplicationId)
		i = encodeVarintMixer(dAtA, i, uint64(len(m.DeduplicationId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GlobalWordCount != 0 {
		i = encodeVarintMixer(dAtA, i, uint64(m.GlobalWordCount))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Attributes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMixer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CheckRequest_QuotaParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRequest_QuotaParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckRequest_QuotaParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BestEffort {
		i--
		if m.BestEffort {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Amount != 0 {
		i = encodeVarintMixer(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Quotas) > 0 {
		for k := range m.Quotas {
			v := m.Quotas[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMixer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMixer(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMixer(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Precondition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMixer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *CheckResponse_PreconditionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckResponse_PreconditionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckResponse_PreconditionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RouteDirective != nil {
		{
			size, err := m.RouteDirective.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMixer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ReferencedAttributes != nil {
		{
			size, err := m.ReferencedAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMixer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ValidUseCount != 0 {
		i = encodeVarintMixer(dAtA, i, uint64(m.ValidUseCount))
		i--
		dAtA[i] = 0x18
	}
	n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ValidDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.ValidDuration):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintMixer(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMixer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CheckResponse_QuotaResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckResponse_QuotaResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckResponse_QuotaResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMixer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.ReferencedAttributes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMixer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.GrantedAmount != 0 {
		i = encodeVarintMixer(dAtA, i, uint64(m.GrantedAmount))
		i--
		dAtA[i] = 0x10
	}
	n11, err11 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ValidDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.ValidDuration):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintMixer(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReferencedAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReferencedAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReferencedAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttributeMatches) > 0 {
		for iNdEx := len(m.AttributeMatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttributeMatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMixer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Words) > 0 {
		for iNdEx := len(m.Words) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Words[iNdEx])
			copy(dAtA[i:], m.Words[iNdEx])
			i = encodeVarintMixer(dAtA, i, uint64(len(m.Words[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReferencedAttributes_AttributeMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReferencedAttributes_AttributeMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReferencedAttributes_AttributeMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapKey != 0 {
		i = encodeVarintMixer(dAtA, i, uint64((uint32(m.MapKey)<<1)^uint32((m.MapKey>>31))))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Regex) > 0 {
		i -= len(m.Regex)
		copy(dAtA[i:], m.Regex)
		i = encodeVarintMixer(dAtA, i, uint64(len(m.Regex)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Condition != 0 {
		i = encodeVarintMixer(dAtA, i, uint64(m.Condition))
		i--
		dAtA[i] = 0x10
	}
	if m.Name != 0 {
		i = encodeVarintMixer(dAtA, i, uint64((uint32(m.Name)<<1)^uint32((m.Name>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeaderOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeaderOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operation != 0 {
		i = encodeVarintMixer(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMixer(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMixer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteDirective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteDirective) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteDirective) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DirectResponseBody) > 0 {
		i -= len(m.DirectResponseBody)
		copy(dAtA[i:], m.DirectResponseBody)
		i = encodeVarintMixer(dAtA, i, uint64(len(m.DirectResponseBody)))
		i--
		dAtA[i] = 0x22
	}
	if m.DirectResponseCode != 0 {
		i = encodeVarintMixer(dAtA, i, uint64(m.DirectResponseCode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ResponseHeaderOperations) > 0 {
		for iNdEx := len(m.ResponseHeaderOperations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseHeaderOperations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMixer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequestHeaderOperations) > 0 {
		for iNdEx := len(m.RequestHeaderOperations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestHeaderOperations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMixer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RepeatedAttributesSemantics != 0 {
		i = encodeVarintMixer(dAtA, i, uint64(m.RepeatedAttributesSemantics))
		i--
		dAtA[i] = 0x20
	}
	if m.GlobalWordCount != 0 {
		i = encodeVarintMixer(dAtA, i, uint64(m.GlobalWordCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DefaultWords) > 0 {
		for iNdEx := len(m.DefaultWords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DefaultWords[iNdEx])
			copy(dAtA[i:], m.DefaultWords[iNdEx])
			i = encodeVarintMixer(dAtA, i, uint64(len(m.DefaultWords[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMixer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMixer(dAtA []byte, offset int, v uint64) int {
	offset -= sovMixer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Attributes.Size()
	n += 1 + l + sovMixer(uint64(l))
	if m.GlobalWordCount != 0 {
		n += 1 + sovMixer(uint64(m.GlobalWordCount))
	}
	l = len(m.DeduplicationId)
	if l > 0 {
		n += 1 + l + sovMixer(uint64(l))
	}
	if len(m.Quotas) > 0 {
		for k, v := range m.Quotas {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovMixer(uint64(len(k))) + 1 + l + sovMixer(uint64(l))
			n += mapEntrySize + 1 + sovMixer(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CheckRequest_QuotaParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovMixer(uint64(m.Amount))
	}
	if m.BestEffort {
		n += 2
	}
	return n
}

func (m *CheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Precondition.Size()
	n += 1 + l + sovMixer(uint64(l))
	if len(m.Quotas) > 0 {
		for k, v := range m.Quotas {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovMixer(uint64(len(k))) + 1 + l + sovMixer(uint64(l))
			n += mapEntrySize + 1 + sovMixer(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CheckResponse_PreconditionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Status.Size()
	n += 1 + l + sovMixer(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ValidDuration)
	n += 1 + l + sovMixer(uint64(l))
	if m.ValidUseCount != 0 {
		n += 1 + sovMixer(uint64(m.ValidUseCount))
	}
	if m.ReferencedAttributes != nil {
		l = m.ReferencedAttributes.Size()
		n += 1 + l + sovMixer(uint64(l))
	}
	if m.RouteDirective != nil {
		l = m.RouteDirective.Size()
		n += 1 + l + sovMixer(uint64(l))
	}
	return n
}

func (m *CheckResponse_QuotaResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ValidDuration)
	n += 1 + l + sovMixer(uint64(l))
	if m.GrantedAmount != 0 {
		n += 1 + sovMixer(uint64(m.GrantedAmount))
	}
	l = m.ReferencedAttributes.Size()
	n += 1 + l + sovMixer(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovMixer(uint64(l))
	return n
}

func (m *ReferencedAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Words) > 0 {
		for _, s := range m.Words {
			l = len(s)
			n += 1 + l + sovMixer(uint64(l))
		}
	}
	if len(m.AttributeMatches) > 0 {
		for _, e := range m.AttributeMatches {
			l = e.Size()
			n += 1 + l + sovMixer(uint64(l))
		}
	}
	return n
}

func (m *ReferencedAttributes_AttributeMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != 0 {
		n += 1 + sozMixer(uint64(m.Name))
	}
	if m.Condition != 0 {
		n += 1 + sovMixer(uint64(m.Condition))
	}
	l = len(m.Regex)
	if l > 0 {
		n += 1 + l + sovMixer(uint64(l))
	}
	if m.MapKey != 0 {
		n += 1 + sozMixer(uint64(m.MapKey))
	}
	return n
}

func (m *HeaderOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMixer(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMixer(uint64(l))
	}
	if m.Operation != 0 {
		n += 1 + sovMixer(uint64(m.Operation))
	}
	return n
}

func (m *RouteDirective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestHeaderOperations) > 0 {
		for _, e := range m.RequestHeaderOperations {
			l = e.Size()
			n += 1 + l + sovMixer(uint64(l))
		}
	}
	if len(m.ResponseHeaderOperations) > 0 {
		for _, e := range m.ResponseHeaderOperations {
			l = e.Size()
			n += 1 + l + sovMixer(uint64(l))
		}
	}
	if m.DirectResponseCode != 0 {
		n += 1 + sovMixer(uint64(m.DirectResponseCode))
	}
	l = len(m.DirectResponseBody)
	if l > 0 {
		n += 1 + l + sovMixer(uint64(l))
	}
	return n
}

func (m *ReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovMixer(uint64(l))
		}
	}
	if len(m.DefaultWords) > 0 {
		for _, s := range m.DefaultWords {
			l = len(s)
			n += 1 + l + sovMixer(uint64(l))
		}
	}
	if m.GlobalWordCount != 0 {
		n += 1 + sovMixer(uint64(m.GlobalWordCount))
	}
	if m.RepeatedAttributesSemantics != 0 {
		n += 1 + sovMixer(uint64(m.RepeatedAttributesSemantics))
	}
	return n
}

func (m *ReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMixer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMixer(x uint64) (n int) {
	return sovMixer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CheckRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForQuotas := make([]string, 0, len(this.Quotas))
	for k, _ := range this.Quotas {
		keysForQuotas = append(keysForQuotas, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQuotas)
	mapStringForQuotas := "map[string]CheckRequest_QuotaParams{"
	for _, k := range keysForQuotas {
		mapStringForQuotas += fmt.Sprintf("%v: %v,", k, this.Quotas[k])
	}
	mapStringForQuotas += "}"
	s := strings.Join([]string{`&CheckRequest{`,
		`Attributes:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Attributes), "CompressedAttributes", "CompressedAttributes", 1), `&`, ``, 1) + `,`,
		`GlobalWordCount:` + fmt.Sprintf("%v", this.GlobalWordCount) + `,`,
		`DeduplicationId:` + fmt.Sprintf("%v", this.DeduplicationId) + `,`,
		`Quotas:` + mapStringForQuotas + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckRequest_QuotaParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckRequest_QuotaParams{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`BestEffort:` + fmt.Sprintf("%v", this.BestEffort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForQuotas := make([]string, 0, len(this.Quotas))
	for k, _ := range this.Quotas {
		keysForQuotas = append(keysForQuotas, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQuotas)
	mapStringForQuotas := "map[string]CheckResponse_QuotaResult{"
	for _, k := range keysForQuotas {
		mapStringForQuotas += fmt.Sprintf("%v: %v,", k, this.Quotas[k])
	}
	mapStringForQuotas += "}"
	s := strings.Join([]string{`&CheckResponse{`,
		`Precondition:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Precondition), "CheckResponse_PreconditionResult", "CheckResponse_PreconditionResult", 1), `&`, ``, 1) + `,`,
		`Quotas:` + mapStringForQuotas + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckResponse_PreconditionResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckResponse_PreconditionResult{`,
		`Status:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "rpc.Status", 1), `&`, ``, 1) + `,`,
		`ValidDuration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ValidDuration), "Duration", "types.Duration", 1), `&`, ``, 1) + `,`,
		`ValidUseCount:` + fmt.Sprintf("%v", this.ValidUseCount) + `,`,
		`ReferencedAttributes:` + strings.Replace(this.ReferencedAttributes.String(), "ReferencedAttributes", "ReferencedAttributes", 1) + `,`,
		`RouteDirective:` + strings.Replace(this.RouteDirective.String(), "RouteDirective", "RouteDirective", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckResponse_QuotaResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckResponse_QuotaResult{`,
		`ValidDuration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ValidDuration), "Duration", "types.Duration", 1), `&`, ``, 1) + `,`,
		`GrantedAmount:` + fmt.Sprintf("%v", this.GrantedAmount) + `,`,
		`ReferencedAttributes:` + strings.Replace(strings.Replace(this.ReferencedAttributes.String(), "ReferencedAttributes", "ReferencedAttributes", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "rpc.Status", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReferencedAttributes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttributeMatches := "[]ReferencedAttributes_AttributeMatch{"
	for _, f := range this.AttributeMatches {
		repeatedStringForAttributeMatches += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForAttributeMatches += "}"
	s := strings.Join([]string{`&ReferencedAttributes{`,
		`Words:` + fmt.Sprintf("%v", this.Words) + `,`,
		`AttributeMatches:` + repeatedStringForAttributeMatches + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReferencedAttributes_AttributeMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReferencedAttributes_AttributeMatch{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Condition:` + fmt.Sprintf("%v", this.Condition) + `,`,
		`Regex:` + fmt.Sprintf("%v", this.Regex) + `,`,
		`MapKey:` + fmt.Sprintf("%v", this.MapKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderOperation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderOperation{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteDirective) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequestHeaderOperations := "[]HeaderOperation{"
	for _, f := range this.RequestHeaderOperations {
		repeatedStringForRequestHeaderOperations += strings.Replace(strings.Replace(f.String(), "HeaderOperation", "HeaderOperation", 1), `&`, ``, 1) + ","
	}
	repeatedStringForRequestHeaderOperations += "}"
	repeatedStringForResponseHeaderOperations := "[]HeaderOperation{"
	for _, f := range this.ResponseHeaderOperations {
		repeatedStringForResponseHeaderOperations += strings.Replace(strings.Replace(f.String(), "HeaderOperation", "HeaderOperation", 1), `&`, ``, 1) + ","
	}
	repeatedStringForResponseHeaderOperations += "}"
	s := strings.Join([]string{`&RouteDirective{`,
		`RequestHeaderOperations:` + repeatedStringForRequestHeaderOperations + `,`,
		`ResponseHeaderOperations:` + repeatedStringForResponseHeaderOperations + `,`,
		`DirectResponseCode:` + fmt.Sprintf("%v", this.DirectResponseCode) + `,`,
		`DirectResponseBody:` + fmt.Sprintf("%v", this.DirectResponseBody) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttributes := "[]CompressedAttributes{"
	for _, f := range this.Attributes {
		repeatedStringForAttributes += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForAttributes += "}"
	s := strings.Join([]string{`&ReportRequest{`,
		`Attributes:` + repeatedStringForAttributes + `,`,
		`DefaultWords:` + fmt.Sprintf("%v", this.DefaultWords) + `,`,
		`GlobalWordCount:` + fmt.Sprintf("%v", this.GlobalWordCount) + `,`,
		`RepeatedAttributesSemantics:` + fmt.Sprintf("%v", this.RepeatedAttributesSemantics) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringMixer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalWordCount", wireType)
			}
			m.GlobalWordCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalWordCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeduplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeduplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quotas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quotas == nil {
				m.Quotas = make(map[string]CheckRequest_QuotaParams)
			}
			var mapkey string
			mapvalue := &CheckRequest_QuotaParams{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMixer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMixer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMixer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMixer
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMixer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMixer
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMixer
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CheckRequest_QuotaParams{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMixer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMixer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Quotas[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckRequest_QuotaParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuotaParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuotaParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestEffort", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BestEffort = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Precondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quotas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quotas == nil {
				m.Quotas = make(map[string]CheckResponse_QuotaResult)
			}
			var mapkey string
			mapvalue := &CheckResponse_QuotaResult{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMixer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMixer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMixer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMixer
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMixer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMixer
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMixer
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CheckResponse_QuotaResult{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMixer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMixer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Quotas[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckResponse_PreconditionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreconditionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreconditionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ValidDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUseCount", wireType)
			}
			m.ValidUseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidUseCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencedAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReferencedAttributes == nil {
				m.ReferencedAttributes = &ReferencedAttributes{}
			}
			if err := m.ReferencedAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteDirective", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteDirective == nil {
				m.RouteDirective = &RouteDirective{}
			}
			if err := m.RouteDirective.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckResponse_QuotaResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuotaResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuotaResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ValidDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantedAmount", wireType)
			}
			m.GrantedAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrantedAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencedAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReferencedAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReferencedAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReferencedAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReferencedAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Words", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Words = append(m.Words, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeMatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeMatches = append(m.AttributeMatches, ReferencedAttributes_AttributeMatch{})
			if err := m.AttributeMatches[len(m.AttributeMatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReferencedAttributes_AttributeMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttributeMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttributeMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Name = v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			m.Condition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Condition |= ReferencedAttributes_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapKey", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MapKey = v
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= HeaderOperation_Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteDirective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteDirective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteDirective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeaderOperations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeaderOperations = append(m.RequestHeaderOperations, HeaderOperation{})
			if err := m.RequestHeaderOperations[len(m.RequestHeaderOperations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeaderOperations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeaderOperations = append(m.ResponseHeaderOperations, HeaderOperation{})
			if err := m.ResponseHeaderOperations[len(m.ResponseHeaderOperations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectResponseCode", wireType)
			}
			m.DirectResponseCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DirectResponseCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectResponseBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectResponseBody = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, CompressedAttributes{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMixer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMixer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultWords = append(m.DefaultWords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalWordCount", wireType)
			}
			m.GlobalWordCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalWordCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedAttributesSemantics", wireType)
			}
			m.RepeatedAttributesSemantics = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepeatedAttributesSemantics |= ReportRequest_RepeatedAttributesSemantics(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMixer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMixer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMixer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMixer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMixer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMixer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMixer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMixer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMixer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMixer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMixer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMixer   = fmt.Errorf("proto: integer overflow")
)
