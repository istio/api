// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mixer/v1/attributes.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Attributes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attributes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Attributes

	return nil
}

// AttributesValidationError is the validation error returned by
// Attributes.Validate if the designated constraints aren't met.
type AttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributesValidationError) ErrorName() string { return "AttributesValidationError" }

// Error satisfies the builtin error interface
func (e AttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributesValidationError{}

// Validate checks the field values on CompressedAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompressedAttributes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Strings

	// no validation rules for Int64S

	// no validation rules for Doubles

	// no validation rules for Bools

	// no validation rules for Timestamps

	// no validation rules for Durations

	// no validation rules for Bytes

	// no validation rules for StringMaps

	return nil
}

// CompressedAttributesValidationError is the validation error returned by
// CompressedAttributes.Validate if the designated constraints aren't met.
type CompressedAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompressedAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompressedAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompressedAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompressedAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompressedAttributesValidationError) ErrorName() string {
	return "CompressedAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e CompressedAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompressedAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompressedAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompressedAttributesValidationError{}

// Validate checks the field values on StringMap with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StringMap) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Entries

	return nil
}

// StringMapValidationError is the validation error returned by
// StringMap.Validate if the designated constraints aren't met.
type StringMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringMapValidationError) ErrorName() string { return "StringMapValidationError" }

// Error satisfies the builtin error interface
func (e StringMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringMapValidationError{}

// Validate checks the field values on Attributes_AttributeValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Attributes_AttributeValue) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Value.(type) {

	case *Attributes_AttributeValue_StringValue:
		// no validation rules for StringValue

	case *Attributes_AttributeValue_Int64Value:
		// no validation rules for Int64Value

	case *Attributes_AttributeValue_DoubleValue:
		// no validation rules for DoubleValue

	case *Attributes_AttributeValue_BoolValue:
		// no validation rules for BoolValue

	case *Attributes_AttributeValue_BytesValue:
		// no validation rules for BytesValue

	case *Attributes_AttributeValue_TimestampValue:

		if v, ok := interface{}(m.GetTimestampValue()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return Attributes_AttributeValueValidationError{
					field:  "TimestampValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Attributes_AttributeValue_DurationValue:

		if v, ok := interface{}(m.GetDurationValue()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return Attributes_AttributeValueValidationError{
					field:  "DurationValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Attributes_AttributeValue_StringMapValue:

		if v, ok := interface{}(m.GetStringMapValue()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return Attributes_AttributeValueValidationError{
					field:  "StringMapValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// Attributes_AttributeValueValidationError is the validation error returned by
// Attributes_AttributeValue.Validate if the designated constraints aren't met.
type Attributes_AttributeValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Attributes_AttributeValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Attributes_AttributeValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Attributes_AttributeValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Attributes_AttributeValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Attributes_AttributeValueValidationError) ErrorName() string {
	return "Attributes_AttributeValueValidationError"
}

// Error satisfies the builtin error interface
func (e Attributes_AttributeValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributes_AttributeValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Attributes_AttributeValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Attributes_AttributeValueValidationError{}

// Validate checks the field values on Attributes_StringMap with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Attributes_StringMap) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Entries

	return nil
}

// Attributes_StringMapValidationError is the validation error returned by
// Attributes_StringMap.Validate if the designated constraints aren't met.
type Attributes_StringMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Attributes_StringMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Attributes_StringMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Attributes_StringMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Attributes_StringMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Attributes_StringMapValidationError) ErrorName() string {
	return "Attributes_StringMapValidationError"
}

// Error satisfies the builtin error interface
func (e Attributes_StringMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributes_StringMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Attributes_StringMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Attributes_StringMapValidationError{}
