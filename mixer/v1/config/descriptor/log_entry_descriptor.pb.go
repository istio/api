// Code generated by protoc-gen-go.
// source: mixer/v1/config/descriptor/log_entry_descriptor.proto
// DO NOT EDIT!

package istio_mixer_v1_config_descriptor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// PayloadFormat details the currently supported logging payload formats.
// TEXT is the default payload format.
type LogEntryDescriptor_PayloadFormat int32

const (
	// Indicates a payload format of raw text.
	LogEntryDescriptor_TEXT LogEntryDescriptor_PayloadFormat = 0
	// Indicates that the payload is a serialized JSON object.
	LogEntryDescriptor_JSON LogEntryDescriptor_PayloadFormat = 1
)

var LogEntryDescriptor_PayloadFormat_name = map[int32]string{
	0: "TEXT",
	1: "JSON",
}
var LogEntryDescriptor_PayloadFormat_value = map[string]int32{
	"TEXT": 0,
	"JSON": 1,
}

func (x LogEntryDescriptor_PayloadFormat) String() string {
	return proto.EnumName(LogEntryDescriptor_PayloadFormat_name, int32(x))
}
func (LogEntryDescriptor_PayloadFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 0}
}

// Defines the format of a single log entry.
type LogEntryDescriptor struct {
	// The name of this descriptor.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// An optional concise name for the log entry type, which can be displayed in user interfaces.
	// Use sentence case without an ending period, for example "Request count".
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// An optional description of the log entry type, which can be used in documentation.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The set of attributes that are necessary to describe a log entry of this type.
	Attributes []string `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
	// The name of the attribute to treat as the payload of the log entry.
	PayloadAttribute string `protobuf:"bytes,5,opt,name=payload_attribute,json=payloadAttribute" json:"payload_attribute,omitempty"`
	// Format of the value of the payload attribute.
	PayloadFormat LogEntryDescriptor_PayloadFormat `protobuf:"varint,6,opt,name=payload_format,json=payloadFormat,enum=istio.mixer.v1.config.descriptor.LogEntryDescriptor_PayloadFormat" json:"payload_format,omitempty"`
}

func (m *LogEntryDescriptor) Reset()                    { *m = LogEntryDescriptor{} }
func (m *LogEntryDescriptor) String() string            { return proto.CompactTextString(m) }
func (*LogEntryDescriptor) ProtoMessage()               {}
func (*LogEntryDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *LogEntryDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LogEntryDescriptor) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LogEntryDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LogEntryDescriptor) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *LogEntryDescriptor) GetPayloadAttribute() string {
	if m != nil {
		return m.PayloadAttribute
	}
	return ""
}

func (m *LogEntryDescriptor) GetPayloadFormat() LogEntryDescriptor_PayloadFormat {
	if m != nil {
		return m.PayloadFormat
	}
	return LogEntryDescriptor_TEXT
}

func init() {
	proto.RegisterType((*LogEntryDescriptor)(nil), "istio.mixer.v1.config.descriptor.LogEntryDescriptor")
	proto.RegisterEnum("istio.mixer.v1.config.descriptor.LogEntryDescriptor_PayloadFormat", LogEntryDescriptor_PayloadFormat_name, LogEntryDescriptor_PayloadFormat_value)
}

func init() {
	proto.RegisterFile("mixer/v1/config/descriptor/log_entry_descriptor.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xed, 0x56, 0x87, 0x7b, 0xe7, 0x46, 0xcd, 0xa9, 0x27, 0x89, 0xf3, 0x52, 0x10, 0x52,
	0xa6, 0xf8, 0x01, 0x14, 0xe7, 0x41, 0x64, 0x4a, 0xdd, 0xc1, 0x5b, 0xc9, 0xd6, 0xac, 0x04, 0xda,
	0xbe, 0x21, 0x8d, 0xc3, 0x7e, 0x45, 0x3f, 0x95, 0x34, 0x6b, 0xd7, 0x89, 0x87, 0xdd, 0xde, 0xfc,
	0x9e, 0x3f, 0xf0, 0x04, 0xee, 0x73, 0xf9, 0x2d, 0x74, 0xb8, 0x9d, 0x85, 0x6b, 0x2c, 0x36, 0x32,
	0x0d, 0x13, 0x51, 0xae, 0xb5, 0x54, 0x06, 0x75, 0x98, 0x61, 0x1a, 0x8b, 0xc2, 0xe8, 0x2a, 0xee,
	0x20, 0x53, 0x1a, 0x0d, 0x12, 0x2a, 0x4b, 0x23, 0x91, 0xd9, 0x30, 0xdb, 0xce, 0xd8, 0x2e, 0xcc,
	0x3a, 0xdf, 0xf4, 0xa7, 0x07, 0xe4, 0x15, 0xd3, 0x79, 0x9d, 0x7f, 0xda, 0x63, 0x42, 0xc0, 0x2d,
	0x78, 0x2e, 0x7c, 0x87, 0x3a, 0xc1, 0x30, 0xb2, 0x37, 0xb9, 0x82, 0xf3, 0x44, 0x96, 0x2a, 0xe3,
	0x55, 0x6c, 0xb5, 0x9e, 0xd5, 0x46, 0x0d, 0x5b, 0xd4, 0x16, 0x0a, 0xa3, 0xb6, 0x5b, 0x62, 0xe1,
	0xf7, 0x1b, 0x47, 0x87, 0xc8, 0x25, 0x00, 0x37, 0x46, 0xcb, 0xd5, 0x97, 0x11, 0xa5, 0xef, 0xd2,
	0x7e, 0x30, 0x8c, 0x0e, 0x08, 0xb9, 0x81, 0x0b, 0xc5, 0xab, 0x0c, 0x79, 0x12, 0xef, 0xa9, 0x7f,
	0x6a, 0x7b, 0xbc, 0x46, 0x78, 0x68, 0x39, 0x91, 0x30, 0x69, 0xcd, 0x1b, 0xd4, 0x39, 0x37, 0xfe,
	0x80, 0x3a, 0xc1, 0xe4, 0xf6, 0x91, 0x1d, 0xdb, 0xcd, 0xfe, 0x6f, 0x66, 0xef, 0xbb, 0xaa, 0x67,
	0xdb, 0x14, 0x8d, 0xd5, 0xe1, 0x73, 0x7a, 0x0d, 0xe3, 0x3f, 0x3a, 0x39, 0x03, 0x77, 0x39, 0xff,
	0x5c, 0x7a, 0x27, 0xf5, 0xf5, 0xf2, 0xf1, 0xb6, 0xf0, 0x9c, 0xd5, 0xc0, 0xfe, 0xfa, 0xdd, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x6a, 0x8b, 0x1e, 0xae, 0x01, 0x00, 0x00,
}
