// Copyright 2016 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package istio.mixer.v1.config.descriptor;

import "mixer/v1/config/descriptor/value_type.proto";

// Defines a metric type and its schema.
//
// A metric is dimensioned by a set of labels whose values are derived at runtime
// from attributes. A given metric holds a unique value for potentially any
// combination of these dimensions.
//
// The following is an example descriptor for a metric capturing the number of
// RPCs served, dimensioned by the method being called and response code returned
// by the server:
//
// ```yaml
// metrics:
//   name: "response_code"
//   kind: COUNTER
//   value: INT64
//   labels:
//     apiMethod: STRING
//     responseCode: INT64
// ```
//
// To actually report metrics at run time a mapping from attributes to a metric's
// labels must be provided. This is provided in the aspect config; using our above
// descriptor we might describe the metric as:
//
// ```yaml
// metric:
//   descriptor: "response_code" # must match metric_descriptor.name
//   value: request.count # expression syntax for the attribute named "request.count"
//   labels:
//     # either the attribute named 'api.method' or the literal string 'unknown'; must eval to a string
//     apiMethod: api.method | "unknown"
//     # either the attribute named 'response.code' or the literal int64 500; must eval to an int64
//     responseCode: response.code | 500
//```
message MetricDescriptor {
  // Required. The name of this descriptor. This is used to refer to this
  // descriptor in other contexts.
  string name = 1;

  // Optional. A concise name for the metric, which can be displayed in user
  // interfaces. Use sentence case without an ending period, for example
  // "Request count".
  string display_name = 2;

  // Optional. A description of the metric, which should be used as the
  // documentation for the metric.
  string description = 3;

  // The kind of measurement. It describes how the data is recorded.
  enum MetricKind {
    // Do not use this default value.
    METRIC_KIND_UNSPECIFIED = 0;

    // An instantaneous measurement of a value. For example, the number of VMs.
    GAUGE = 1;

    // A count of occurrences over an interval, always a positive integer.
    // For example, the number of API requests.
    COUNTER = 2;

    // Summary statistics for a population of values. At the moment, only
    // histograms representing the distribution of those values across a set of
    // buckets are supported (configured via the buckets field).
    //
    // Values for DISTRIBUTIONs will be reported in singular form. It will be up
    // to the mixer adapters and backend systems to transform single reported
    // values into the distribution form as needed (and as supported).
    DISTRIBUTION = 3;
  }
  // Required. Whether the metric records instantaneous values, changes to a
  // value, etc.
  MetricKind kind = 4;

  // Required. The type of data this metric records.
  ValueType value = 5;

  // Labels that dimension the data recorded by this metric. The metric definition
  // allows the user to map attribute expressions to actual values for these
  // labels at run time; the result of the evaluation must be of the type described
  // by the kind for each label.
  map<string, ValueType> labels = 6;

  message BucketsDefinition {
    // Specifies a linear sequence of buckets that all have the same width
    // (except overflow and underflow). Each bucket represents a constant
    // absolute uncertainty on the specific value in the bucket.
    //
    // There are `num_finite_buckets + 2` (= `N`) buckets. The two additional
    // buckets are the underflow and overflow buckets.
    //
    // Bucket `i` has the following boundaries:
    //
    // * Upper bound (`0 <= i < N-1`): `offset + (width * i)`
    // * Lower bound (`1 <= i < N`): `offset + (width * (i - 1))`
    message Linear {
      // Must be greater than 0.
      int32 num_finite_buckets = 1;

      // Must be greater than 0.
      double width = 2;

      // Lower bound of the first bucket.
      double offset = 3;
    }

    // Specifies an exponential sequence of buckets that have a width that is
    // proportional to the value of the lower bound. Each bucket represents a
    // constant relative uncertainty on a specific value in the bucket.
    //
    // There are `num_finite_buckets + 2` (= `N`) buckets. The two additional
    // buckets are the underflow and overflow buckets.
    //
    // Bucket `i` has the following boundaries:
    //
    // * Upper bound (0 <= i < N-1): `scale * (growth_factor ^ i)`
    // * Lower bound (1 <= i < N): `scale * (growth_factor ^ (i - 1))`
    message Exponential {
      // Must be greater than 0.
      int32 num_finite_buckets = 1;

      // Must be greater than 1.
      double growth_factor = 2;

      // Must be greater than 0.
      double scale = 3;
    }

    // Specifies a set of buckets with arbitrary widths.
    //
    // There are `size(bounds) + 1` (= `N`) buckets. Bucket `i` has the following
    // boundaries:
    //
    // * Upper bound (`0 <= i < N-1`): `bounds[i]`
    // * Lower bound (`1 <= i < N`): `bounds[i - 1]`
    //
    // The `bounds` field must contain at least one element. If `bounds` has
    // only one element, then there are no finite buckets, and that single
    // element is the common boundary of the overflow and underflow buckets.
    message Explicit {
      // The values must be monotonically increasing.
      repeated double bounds = 1;
    }

    // Exactly one of these three fields must be set.
    oneof definition {
      // The linear buckets.
      Linear linear_buckets = 1;

      // The exponential buckets.
      Exponential exponential_buckets = 2;

      // The explicit buckets.
      Explicit explicit_buckets = 3;
    }
  }

  // For metrics with a metric kind of DISTRIBUTION, this provides a mechanism
  // for configuring the buckets that will be used to store the aggregated values.
  // This field must be provided for metrics declared to be of type DISTRIBUTION.
  // This field will be ignored for non-distribution metric kinds.
  BucketsDefinition buckets = 7;
}
