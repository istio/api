// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package istio.mixer.v1.config.descriptor;

import "mixer/v1/config/descriptor/label_descriptor.proto";
import "mixer/v1/config/descriptor/value_type.proto";

// Defines a metric type and its schema.
//
// A metric is dimensioned by a set of labels whose values are derived at runtime from attributes.
// A given metric holds a unique value for potentially any combination of these dimensions.
//
// The following is an example descriptor for a metric capturing the number of RPCs served, dimensioned
// by the method being called and response code returned by the server:
//
//    metric_descriptor:
//      name: "response_code"
//      kind: COUNTER
//      value: I64
//      labels:
//        name: api_method
//        value_type: STRING
//      labels:
//        name: response_code
//        value_type: INT64
//
// To actually report metrics at run time a mapping from attributes to a metric's labels must be provided.
// This is provided in the service's config; using our above descriptor we might describe the metric as:
//
//    metric:
//      descriptor: "response_code" # must match metric_descriptor.name
//      value: $requestCount        # Istio expression syntax for the attribute named "request_count"
//      labels:
//        # either the attribute named 'apiMethod' or the literal string 'unknown'; must eval to a string
//        api_method: $apiMethod | "unknown"
//        # either the attribute named 'responseCode' or the literal int64 500; must eval to an int64
//        response_code: $responseCode | 500
//      
message MetricDescriptor {
  // The name of this descriptor. This is used to refer to this descriptor in other contexts.
  string name = 1;

  // An optional concise name for the metric, which can be displayed in user interfaces.
  // Use sentence case without an ending period, for example "Request count".
  string display_name = 2;

  // An optional description of the metric, which should be used as the documentation for the metric.
  string description = 3;

  // The kind of measurement. It describes how the data is recorded.
  enum MetricKind {
    // Do not use this default value.
    METRIC_KIND_UNSPECIFIED = 0;

    // An instantaneous measurement of a value. For example, the number of VMs.
    GAUGE = 1;

    // A count of occurrences over an interval, always a positive integer.
    // For example, the number of API requests.
    COUNTER = 2;
  }
  // Whether the metric records instantaneous values, changes to a value, etc.
  MetricKind kind = 4;

  // The type of data this metric records.
  ValueType value = 5;

  // Labels that dimension the data recorded by this metric. The metric definition allows the user to
  // map attribute expressions to actual values for these labels at run time; the result of the evaluation
  // must be of the type described by the kind for each label.
  repeated LabelDescriptor labels = 6;
}
