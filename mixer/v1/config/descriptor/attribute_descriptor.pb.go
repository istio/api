// Code generated by protoc-gen-go.
// source: mixer/v1/config/descriptor/attribute_descriptor.proto
// DO NOT EDIT!

/*
Package istio_mixer_v1_config_descriptor is a generated protocol buffer package.

It is generated from these files:
	mixer/v1/config/descriptor/attribute_descriptor.proto
	mixer/v1/config/descriptor/label_descriptor.proto
	mixer/v1/config/descriptor/log_entry_descriptor.proto
	mixer/v1/config/descriptor/metric_descriptor.proto
	mixer/v1/config/descriptor/monitored_resource_descriptor.proto
	mixer/v1/config/descriptor/principal_descriptor.proto
	mixer/v1/config/descriptor/quota_descriptor.proto
	mixer/v1/config/descriptor/value_type.proto

It has these top-level messages:
	AttributeDescriptor
	LabelDescriptor
	LogEntryDescriptor
	MetricDescriptor
	MonitoredResourceDescriptor
	PrincipalDescriptor
	QuotaDescriptor
*/
package istio_mixer_v1_config_descriptor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// An `AttributeDescriptor` describes the schema of an Istio attribute type.
//
// ## Istio Attributes
//
// Istio uses `attributes` to describe runtime activities of Istio services.
// An Istio attribute carries a specific piece of information about an activity,
// such as the error code of an API request, the latency of an API request, the
// original IP address of a TCP connection. The attributes are often generated
// and consumed by different services. For example, a frontend service can
// generate an authenticated user attribute and pass it to a backend service for
// access control purpose.
//
// To simplify the system and improve developer experience, Istio uses
// shared attribute definitions across all components. For example, the same
// authenticated user attribute will be used for logging, monitoring, analytics,
// billing, access control, auditing. Many Istio components provide their
// functionality by collecting, generating, and operating on attributes.
// For example, the proxy collects the error code attribute, and the logging
// stores it into a log.
//
// ## Design
//
// Each Istio attribute must conform to an Istio attribute type. The
// `AttributeDescriptor` is used to define attribute types. Each type has a
// globally unique type name, the type of the value, and a detailed description
// that explains the semantics of the attribute type.
//
// The runtime presentation of an attribute is intentionally left out of this
// specification, because passing attribute using JSON, XML, or Protocol Buffers
// does not change the semantics of the attribute. Different implementations
// can choose different representations based on their needs.
//
// ## HTTP Mapping
//
// Because many systems already have REST APIs, it makes sense to define a
// standard HTTP mapping for Istio attributes that are compatible with typical
// REST APIs. The design is to map one attribute to one HTTP header, the
// attribute name and value becomes the HTTP header name and value. The actual
// encoding scheme will be decided later.
type AttributeDescriptor struct {
	// The name of this descriptor, referenced from individual attribute instances and other
	// descriptors.
	//
	// The format of this name is:
	//
	//     Name = IDENT { "." IDENT } ;
	//
	// Where `IDENT` must match the regular expression `[a-z][a-z0-9]+`.
	//
	// Attribute descriptor names must be unique within a single Istio deployment. There is a well
	// known set of attributes which have succinct names. Attributes not on this list should be
	// name with a component-specific suffix such as request_count-my_component
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// An optional human-readable description of the attribute's purpose.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// The type of data carried by attributes
	ValueType ValueType `protobuf:"varint,3,opt,name=value_type,json=valueType,enum=istio.mixer.v1.config.descriptor.ValueType" json:"value_type,omitempty"`
}

func (m *AttributeDescriptor) Reset()                    { *m = AttributeDescriptor{} }
func (m *AttributeDescriptor) String() string            { return proto.CompactTextString(m) }
func (*AttributeDescriptor) ProtoMessage()               {}
func (*AttributeDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AttributeDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AttributeDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AttributeDescriptor) GetValueType() ValueType {
	if m != nil {
		return m.ValueType
	}
	return ValueType_VALUE_TYPE_UNSPECIFIED
}

func init() {
	proto.RegisterType((*AttributeDescriptor)(nil), "istio.mixer.v1.config.descriptor.AttributeDescriptor")
}

func init() {
	proto.RegisterFile("mixer/v1/config/descriptor/attribute_descriptor.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0xcd, 0xcd, 0xac, 0x48,
	0x2d, 0xd2, 0x2f, 0x33, 0xd4, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x4f, 0x49, 0x2d, 0x4e,
	0x2e, 0xca, 0x2c, 0x28, 0xc9, 0x2f, 0xd2, 0x4f, 0x2c, 0x29, 0x29, 0xca, 0x4c, 0x2a, 0x2d, 0x49,
	0x8d, 0x47, 0x08, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x29, 0x64, 0x16, 0x97, 0x64, 0xe6,
	0xeb, 0x81, 0x35, 0xeb, 0x95, 0x19, 0xea, 0x41, 0x34, 0xeb, 0x21, 0xd4, 0x49, 0xe9, 0xe0, 0x31,
	0xb8, 0x2c, 0x31, 0xa7, 0x34, 0x35, 0xbe, 0xa4, 0xb2, 0x20, 0xb5, 0x18, 0x62, 0x9e, 0xd2, 0x74,
	0x46, 0x2e, 0x61, 0x47, 0x98, 0x75, 0x2e, 0x70, 0x95, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9,
	0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x90, 0x02, 0x17, 0x37, 0xcc, 0xac,
	0xcc, 0xfc, 0x3c, 0x09, 0x26, 0xb0, 0x14, 0xb2, 0x90, 0x90, 0x17, 0x17, 0x17, 0xc2, 0x0a, 0x09,
	0x66, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x6d, 0x3d, 0x42, 0x4e, 0xd6, 0x0b, 0x03, 0xe9, 0x09, 0xa9,
	0x2c, 0x48, 0x0d, 0xe2, 0x2c, 0x83, 0x31, 0x93, 0xd8, 0xc0, 0x0e, 0x34, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xb1, 0x81, 0x3f, 0xf5, 0x29, 0x01, 0x00, 0x00,
}
