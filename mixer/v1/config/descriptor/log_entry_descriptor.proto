// Copyright 2016 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package istio.mixer.v1.config.descriptor;

import "mixer/v1/config/descriptor/value_type.proto";

// Defines the format of a single log entry.
message LogEntryDescriptor {
  // Required. The name of this descriptor.
  string name = 1;

  // Optional. A concise name for the log entry type, which can be displayed in
  // user interfaces. Use sentence case without an ending period, for example
  // "Request count".
  string display_name = 2;

  // Optional. A description of the log entry type, which can be used in documentation.
  string description = 3;

  // PayloadFormat details the currently supported logging payload formats.
  // TEXT is the default payload format.
  enum PayloadFormat {
      // Invalid, default value.
      PAYLOAD_FORMAT_UNSPECIFIED = 0;

      // Indicates a payload format of raw text.
      TEXT = 1;

      // Indicates that the payload is a serialized JSON object.
      JSON = 2;
  }
  // Required. Format of the value of the payload attribute.
  PayloadFormat payload_format = 4;

  // Required. The template that will be populated with labels at runtime to
  // generate a log message; the labels describe the parameters for this template.
  //
  // The template strings must conform to go's text/template syntax.
  // TODO: unify templates to use our expression language when its finalized
  string log_template = 5;

  // Labels describe the parameters of this log's template string. The log
  // definition allows the user to map attribute expressions to actual values
  // for these labels at run time; the result of the evaluation must be of the
  // type described by the kind for each label.
  map<string, ValueType> labels = 6;
}
