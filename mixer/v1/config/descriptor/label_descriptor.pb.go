// Code generated by protoc-gen-go.
// source: mixer/v1/config/descriptor/label_descriptor.proto
// DO NOT EDIT!

package istio_mixer_v1_config_descriptor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A `LabelDescriptor` describes the schema of a label (or dimension) used in other descriptors.
type LabelDescriptor struct {
	// The name of this descriptor, referenced from other descriptors.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// An optional human-readable description of the attribute's purpose.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// The type of data carried by this label
	ValueType ValueType `protobuf:"varint,3,opt,name=value_type,json=valueType,enum=istio.mixer.v1.config.descriptor.ValueType" json:"value_type,omitempty"`
}

func (m *LabelDescriptor) Reset()                    { *m = LabelDescriptor{} }
func (m *LabelDescriptor) String() string            { return proto.CompactTextString(m) }
func (*LabelDescriptor) ProtoMessage()               {}
func (*LabelDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *LabelDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LabelDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LabelDescriptor) GetValueType() ValueType {
	if m != nil {
		return m.ValueType
	}
	return ValueType_VALUE_TYPE_UNSPECIFIED
}

func init() {
	proto.RegisterType((*LabelDescriptor)(nil), "istio.mixer.v1.config.descriptor.LabelDescriptor")
}

func init() { proto.RegisterFile("mixer/v1/config/descriptor/label_descriptor.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0xcc, 0xcd, 0xac, 0x48,
	0x2d, 0xd2, 0x2f, 0x33, 0xd4, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x4f, 0x49, 0x2d, 0x4e,
	0x2e, 0xca, 0x2c, 0x28, 0xc9, 0x2f, 0xd2, 0xcf, 0x49, 0x4c, 0x4a, 0xcd, 0x89, 0x47, 0x08, 0xe8,
	0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x29, 0x64, 0x16, 0x97, 0x64, 0xe6, 0xeb, 0x81, 0x35, 0xea,
	0x95, 0x19, 0xea, 0x41, 0x34, 0xea, 0x21, 0xd4, 0x49, 0xe9, 0xe0, 0x31, 0xb4, 0x2c, 0x31, 0xa7,
	0x34, 0x35, 0xbe, 0xa4, 0xb2, 0x20, 0xb5, 0x18, 0x62, 0x9e, 0xd2, 0x64, 0x46, 0x2e, 0x7e, 0x1f,
	0x90, 0x55, 0x2e, 0x70, 0x55, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x90, 0x02, 0x17, 0x37, 0xcc, 0x9c, 0xcc, 0xfc, 0x3c, 0x09,
	0x26, 0xb0, 0x14, 0xb2, 0x90, 0x90, 0x17, 0x17, 0x17, 0xc2, 0x78, 0x09, 0x66, 0x05, 0x46, 0x0d,
	0x3e, 0x23, 0x6d, 0x3d, 0x42, 0xce, 0xd5, 0x0b, 0x03, 0xe9, 0x09, 0xa9, 0x2c, 0x48, 0x0d, 0xe2,
	0x2c, 0x83, 0x31, 0x93, 0xd8, 0xc0, 0x8e, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x49, 0x3f,
	0x34, 0xb5, 0x21, 0x01, 0x00, 0x00,
}
