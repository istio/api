// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mixer/v1/config/client/quota.proto

package client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on QuotaSpec with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *QuotaSpec) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return QuotaSpecValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QuotaSpecValidationError is the validation error returned by
// QuotaSpec.Validate if the designated constraints aren't met.
type QuotaSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaSpecValidationError) ErrorName() string { return "QuotaSpecValidationError" }

// Error satisfies the builtin error interface
func (e QuotaSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaSpecValidationError{}

// Validate checks the field values on QuotaRule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *QuotaRule) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return QuotaRuleValidationError{
					field:  fmt.Sprintf("Match[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQuotas() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return QuotaRuleValidationError{
					field:  fmt.Sprintf("Quotas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QuotaRuleValidationError is the validation error returned by
// QuotaRule.Validate if the designated constraints aren't met.
type QuotaRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaRuleValidationError) ErrorName() string { return "QuotaRuleValidationError" }

// Error satisfies the builtin error interface
func (e QuotaRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaRuleValidationError{}

// Validate checks the field values on StringMatch with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringMatch) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MatchType.(type) {

	case *StringMatch_Exact:
		// no validation rules for Exact

	case *StringMatch_Prefix:
		// no validation rules for Prefix

	case *StringMatch_Regex:
		// no validation rules for Regex

	}

	return nil
}

// StringMatchValidationError is the validation error returned by
// StringMatch.Validate if the designated constraints aren't met.
type StringMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringMatchValidationError) ErrorName() string { return "StringMatchValidationError" }

// Error satisfies the builtin error interface
func (e StringMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringMatchValidationError{}

// Validate checks the field values on AttributeMatch with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AttributeMatch) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Clause

	return nil
}

// AttributeMatchValidationError is the validation error returned by
// AttributeMatch.Validate if the designated constraints aren't met.
type AttributeMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeMatchValidationError) ErrorName() string { return "AttributeMatchValidationError" }

// Error satisfies the builtin error interface
func (e AttributeMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeMatchValidationError{}

// Validate checks the field values on Quota with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Quota) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Quota

	// no validation rules for Charge

	return nil
}

// QuotaValidationError is the validation error returned by Quota.Validate if
// the designated constraints aren't met.
type QuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaValidationError) ErrorName() string { return "QuotaValidationError" }

// Error satisfies the builtin error interface
func (e QuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaValidationError{}

// Validate checks the field values on QuotaSpecBinding with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *QuotaSpecBinding) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return QuotaSpecBindingValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQuotaSpecs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return QuotaSpecBindingValidationError{
					field:  fmt.Sprintf("QuotaSpecs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QuotaSpecBindingValidationError is the validation error returned by
// QuotaSpecBinding.Validate if the designated constraints aren't met.
type QuotaSpecBindingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaSpecBindingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaSpecBindingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaSpecBindingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaSpecBindingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaSpecBindingValidationError) ErrorName() string { return "QuotaSpecBindingValidationError" }

// Error satisfies the builtin error interface
func (e QuotaSpecBindingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaSpecBinding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaSpecBindingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaSpecBindingValidationError{}

// Validate checks the field values on QuotaSpecBinding_QuotaSpecReference with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *QuotaSpecBinding_QuotaSpecReference) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Namespace

	return nil
}

// QuotaSpecBinding_QuotaSpecReferenceValidationError is the validation error
// returned by QuotaSpecBinding_QuotaSpecReference.Validate if the designated
// constraints aren't met.
type QuotaSpecBinding_QuotaSpecReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaSpecBinding_QuotaSpecReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaSpecBinding_QuotaSpecReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaSpecBinding_QuotaSpecReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaSpecBinding_QuotaSpecReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaSpecBinding_QuotaSpecReferenceValidationError) ErrorName() string {
	return "QuotaSpecBinding_QuotaSpecReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e QuotaSpecBinding_QuotaSpecReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaSpecBinding_QuotaSpecReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaSpecBinding_QuotaSpecReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaSpecBinding_QuotaSpecReferenceValidationError{}
