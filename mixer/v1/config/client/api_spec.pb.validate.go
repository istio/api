// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mixer/v1/config/client/api_spec.proto

package client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on HTTPAPISpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HTTPAPISpec) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAttributes()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPAPISpecValidationError{
				field:  "Attributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPatterns() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return HTTPAPISpecValidationError{
					field:  fmt.Sprintf("Patterns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetApiKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return HTTPAPISpecValidationError{
					field:  fmt.Sprintf("ApiKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HTTPAPISpecValidationError is the validation error returned by
// HTTPAPISpec.Validate if the designated constraints aren't met.
type HTTPAPISpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPAPISpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPAPISpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPAPISpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPAPISpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPAPISpecValidationError) ErrorName() string { return "HTTPAPISpecValidationError" }

// Error satisfies the builtin error interface
func (e HTTPAPISpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPAPISpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPAPISpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPAPISpecValidationError{}

// Validate checks the field values on HTTPAPISpecPattern with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HTTPAPISpecPattern) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAttributes()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPAPISpecPatternValidationError{
				field:  "Attributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HttpMethod

	switch m.Pattern.(type) {

	case *HTTPAPISpecPattern_UriTemplate:
		// no validation rules for UriTemplate

	case *HTTPAPISpecPattern_Regex:
		// no validation rules for Regex

	}

	return nil
}

// HTTPAPISpecPatternValidationError is the validation error returned by
// HTTPAPISpecPattern.Validate if the designated constraints aren't met.
type HTTPAPISpecPatternValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPAPISpecPatternValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPAPISpecPatternValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPAPISpecPatternValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPAPISpecPatternValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPAPISpecPatternValidationError) ErrorName() string {
	return "HTTPAPISpecPatternValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPAPISpecPatternValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPAPISpecPattern.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPAPISpecPatternValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPAPISpecPatternValidationError{}

// Validate checks the field values on APIKey with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *APIKey) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Key.(type) {

	case *APIKey_Query:
		// no validation rules for Query

	case *APIKey_Header:
		// no validation rules for Header

	case *APIKey_Cookie:
		// no validation rules for Cookie

	}

	return nil
}

// APIKeyValidationError is the validation error returned by APIKey.Validate if
// the designated constraints aren't met.
type APIKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIKeyValidationError) ErrorName() string { return "APIKeyValidationError" }

// Error satisfies the builtin error interface
func (e APIKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIKeyValidationError{}

// Validate checks the field values on HTTPAPISpecReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HTTPAPISpecReference) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Namespace

	return nil
}

// HTTPAPISpecReferenceValidationError is the validation error returned by
// HTTPAPISpecReference.Validate if the designated constraints aren't met.
type HTTPAPISpecReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPAPISpecReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPAPISpecReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPAPISpecReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPAPISpecReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPAPISpecReferenceValidationError) ErrorName() string {
	return "HTTPAPISpecReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPAPISpecReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPAPISpecReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPAPISpecReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPAPISpecReferenceValidationError{}

// Validate checks the field values on HTTPAPISpecBinding with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HTTPAPISpecBinding) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return HTTPAPISpecBindingValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetApiSpecs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return HTTPAPISpecBindingValidationError{
					field:  fmt.Sprintf("ApiSpecs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HTTPAPISpecBindingValidationError is the validation error returned by
// HTTPAPISpecBinding.Validate if the designated constraints aren't met.
type HTTPAPISpecBindingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPAPISpecBindingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPAPISpecBindingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPAPISpecBindingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPAPISpecBindingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPAPISpecBindingValidationError) ErrorName() string {
	return "HTTPAPISpecBindingValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPAPISpecBindingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPAPISpecBinding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPAPISpecBindingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPAPISpecBindingValidationError{}
