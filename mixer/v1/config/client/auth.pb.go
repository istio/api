// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/v1/config/client/auth.proto

package client

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// JSON Web Token (JWT) token format for authentication as defined by
// https://tools.ietf.org/html/rfc7519. See [OAuth
// 2.0](https://tools.ietf.org/html/rfc6749) and [OIDC
// 1.0](http://openid.net/connect) for how this is used in the whole
// authentication flow.
//
// Example,
//
//     issuer: https://example.com
//     audiences:
//     - bookstore_android.apps.googleusercontent.com
//       bookstore_web.apps.googleusercontent.com
//     jwks_uri: https://example.com/.well-known/jwks.json
//
type JWT struct {
	// Identifies the principal that issued the JWT. See
	// https://tools.ietf.org/html/rfc7519#section-4.1.1
	// Usually a URL or an email address.
	//
	// Example: https://securetoken.google.com
	// Example: 1234567-compute@developer.gserviceaccount.com
	//
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The list of JWT
	// [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3).
	// that are allowed to access. A JWT containing any of these
	// audiences will be accepted.
	//
	// The service name will be accepted if audiences is empty.
	//
	// Example:
	//
	//     audiences:
	//     - bookstore_android.apps.googleusercontent.com
	//       bookstore_web.apps.googleusercontent.com
	//
	Audiences []string `protobuf:"bytes,2,rep,name=audiences" json:"audiences,omitempty"`
	// URL of the provider's public key set to validate signature of the
	// JWT. See [OpenID
	// Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
	//
	// Optional if the key set document can either (a) be retrieved from
	// [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html)
	// of the issuer or (b) inferred from the email domain of the issuer
	// (e.g. a Google service account).
	//
	// Example: https://www.googleapis.com/oauth2/v1/certs
	JwksUri string `protobuf:"bytes,3,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	// If true, forward the entire base64 encoded JWT in the HTTP request.
	// If false, remove the JWT from the HTTP request and do not forward to the
	// application.
	ForwardJwt bool `protobuf:"varint,4,opt,name=forward_jwt,json=forwardJwt,proto3" json:"forward_jwt,omitempty"`
	// Duration after which the cached public key should be expired. The
	// system wide default is applied if no duration is explicitly
	// specified.
	PublicKeyCacheDuration *google_protobuf1.Duration `protobuf:"bytes,5,opt,name=public_key_cache_duration,json=publicKeyCacheDuration" json:"public_key_cache_duration,omitempty"`
	Locations              []*JWT_Location            `protobuf:"bytes,6,rep,name=locations" json:"locations,omitempty"`
	// This field is specific for Envoy proxy implementation.
	// It is the cluster name in the Envoy config for the jwks_uri.
	JwksUriEnvoyCluster string `protobuf:"bytes,7,opt,name=jwks_uri_envoy_cluster,json=jwksUriEnvoyCluster,proto3" json:"jwks_uri_envoy_cluster,omitempty"`
}

func (m *JWT) Reset()                    { *m = JWT{} }
func (*JWT) ProtoMessage()               {}
func (*JWT) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0} }

// Defines where to extract the JWT from an HTTP request.
//
// If no explicit location is specified the following default
// locations are tried in order:
//
//     1) The Authorization header using the Bearer schema,
//        e.g. Authorization: Bearer <token>. (see
//        https://tools.ietf.org/html/rfc6750#section-2.1)
//
//     2) `access_token` query parameter (see
//     https://tools.ietf.org/html/rfc6750#section-2.3)
//
type JWT_Location struct {
	// Types that are valid to be assigned to Scheme:
	//	*JWT_Location_Header
	//	*JWT_Location_Query
	Scheme isJWT_Location_Scheme `protobuf_oneof:"scheme"`
}

func (m *JWT_Location) Reset()                    { *m = JWT_Location{} }
func (*JWT_Location) ProtoMessage()               {}
func (*JWT_Location) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0, 0} }

type isJWT_Location_Scheme interface {
	isJWT_Location_Scheme()
	MarshalTo([]byte) (int, error)
	Size() int
}

type JWT_Location_Header struct {
	Header string `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}
type JWT_Location_Query struct {
	Query string `protobuf:"bytes,2,opt,name=query,proto3,oneof"`
}

func (*JWT_Location_Header) isJWT_Location_Scheme() {}
func (*JWT_Location_Query) isJWT_Location_Scheme()  {}

func (m *JWT_Location) GetScheme() isJWT_Location_Scheme {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (m *JWT_Location) GetHeader() string {
	if x, ok := m.GetScheme().(*JWT_Location_Header); ok {
		return x.Header
	}
	return ""
}

func (m *JWT_Location) GetQuery() string {
	if x, ok := m.GetScheme().(*JWT_Location_Query); ok {
		return x.Query
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*JWT_Location) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _JWT_Location_OneofMarshaler, _JWT_Location_OneofUnmarshaler, _JWT_Location_OneofSizer, []interface{}{
		(*JWT_Location_Header)(nil),
		(*JWT_Location_Query)(nil),
	}
}

func _JWT_Location_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*JWT_Location)
	// scheme
	switch x := m.Scheme.(type) {
	case *JWT_Location_Header:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Header)
	case *JWT_Location_Query:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Query)
	case nil:
	default:
		return fmt.Errorf("JWT_Location.Scheme has unexpected type %T", x)
	}
	return nil
}

func _JWT_Location_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*JWT_Location)
	switch tag {
	case 1: // scheme.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Scheme = &JWT_Location_Header{x}
		return true, err
	case 2: // scheme.query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Scheme = &JWT_Location_Query{x}
		return true, err
	default:
		return false, nil
	}
}

func _JWT_Location_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*JWT_Location)
	// scheme
	switch x := m.Scheme.(type) {
	case *JWT_Location_Header:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Header)))
		n += len(x.Header)
	case *JWT_Location_Query:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Query)))
		n += len(x.Query)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Determines how to apply auth policies for individual requests.
// WIP: to be replaced by AuthenticationPolicy.
type EndUserAuthenticationPolicySpec struct {
	// List of JWT rules to valide.
	//
	// If the request includes a JWT it must match one of the JWT listed
	// here matched by the issuer. If validation is successfull the
	// follow attributes are included in requests to the mixer:
	//
	//     request.auth.principal - The string of the issuer (`iss`) and
	//     subject (`sub`) claims within a JWT concatenated with “/”
	//     with a percent-encoded subject value
	//
	//     request.auth.audiences - This should reflect the audience
	//     (`aud`) claim within matched JWT.
	//
	//     request.auth.presenter - The authorized presenter of the
	//     credential. This value should reflect the optional Authorized
	//     Presenter (`azp`) claim within a JWT
	//
	// If no match is found the request is rejected with HTTP status
	// code 401.
	//
	// JWT validation is skipped if the user's traffic request does not
	// include a JWT.
	Jwts []*JWT `protobuf:"bytes,2,rep,name=jwts" json:"jwts,omitempty"`
}

func (m *EndUserAuthenticationPolicySpec) Reset()      { *m = EndUserAuthenticationPolicySpec{} }
func (*EndUserAuthenticationPolicySpec) ProtoMessage() {}
func (*EndUserAuthenticationPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptorAuth, []int{1}
}

// WIP: to be replaced by AuthenticationPolicy.
type EndUserAuthenticationPolicySpecReference struct {
	// REQUIRED. The short name of the
	// EndUserAuthenticationPolicySpec. This is the resource name
	// defined by the metadata name field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional namespace of the
	// EndUserAuthenticationPolicySpec. Defaults to the value of the
	// metadata namespace field.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *EndUserAuthenticationPolicySpecReference) Reset() {
	*m = EndUserAuthenticationPolicySpecReference{}
}
func (*EndUserAuthenticationPolicySpecReference) ProtoMessage() {}
func (*EndUserAuthenticationPolicySpecReference) Descriptor() ([]byte, []int) {
	return fileDescriptorAuth, []int{2}
}

// EndUserAuthenticationPolicySpecBinding defines the binding between
// EndUserAuthenticationPolicySpecs and one or more IstioService.
// WIP: to be replaced by AuthenticationPolicy.
type EndUserAuthenticationPolicySpecBinding struct {
	// REQUIRED. One or more services to map the listed
	// EndUserAuthenticationPolicySpecs onto.
	Services []*IstioService `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
	// REQUIRED. One or more EndUserAuthenticationPolicySpecReference
	// that should be mapped to the specified service(s).
	// WIP: to be replaced by AuthenticationPolicy.
	Policies []*EndUserAuthenticationPolicySpecReference `protobuf:"bytes,2,rep,name=policies" json:"policies,omitempty"`
}

func (m *EndUserAuthenticationPolicySpecBinding) Reset() {
	*m = EndUserAuthenticationPolicySpecBinding{}
}
func (*EndUserAuthenticationPolicySpecBinding) ProtoMessage() {}
func (*EndUserAuthenticationPolicySpecBinding) Descriptor() ([]byte, []int) {
	return fileDescriptorAuth, []int{3}
}

// Placer holder for mTLS authentication params.
type MutualTLS struct {
	// This field is specific for Envoy proxy implementation.
	// Defines the header location to store the authentiated claims. If blank, a
	// implementation-specific default value will be used.
	OutputHeaderLocation string `protobuf:"bytes,1,opt,name=output_header_location,json=outputHeaderLocation,proto3" json:"output_header_location,omitempty"`
}

func (m *MutualTLS) Reset()                    { *m = MutualTLS{} }
func (*MutualTLS) ProtoMessage()               {}
func (*MutualTLS) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{4} }

func init() {
	proto.RegisterType((*JWT)(nil), "istio.mixer.v1.config.client.JWT")
	proto.RegisterType((*JWT_Location)(nil), "istio.mixer.v1.config.client.JWT.Location")
	proto.RegisterType((*EndUserAuthenticationPolicySpec)(nil), "istio.mixer.v1.config.client.EndUserAuthenticationPolicySpec")
	proto.RegisterType((*EndUserAuthenticationPolicySpecReference)(nil), "istio.mixer.v1.config.client.EndUserAuthenticationPolicySpecReference")
	proto.RegisterType((*EndUserAuthenticationPolicySpecBinding)(nil), "istio.mixer.v1.config.client.EndUserAuthenticationPolicySpecBinding")
	proto.RegisterType((*MutualTLS)(nil), "istio.mixer.v1.config.client.MutualTLS")
}
func (m *JWT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Issuer) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Issuer)))
		i += copy(dAtA[i:], m.Issuer)
	}
	if len(m.Audiences) > 0 {
		for _, s := range m.Audiences {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.JwksUri) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.JwksUri)))
		i += copy(dAtA[i:], m.JwksUri)
	}
	if m.ForwardJwt {
		dAtA[i] = 0x20
		i++
		if m.ForwardJwt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PublicKeyCacheDuration != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.PublicKeyCacheDuration.Size()))
		n1, err := m.PublicKeyCacheDuration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Locations) > 0 {
		for _, msg := range m.Locations {
			dAtA[i] = 0x32
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.JwksUriEnvoyCluster) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.JwksUriEnvoyCluster)))
		i += copy(dAtA[i:], m.JwksUriEnvoyCluster)
	}
	return i, nil
}

func (m *JWT_Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWT_Location) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Scheme != nil {
		nn2, err := m.Scheme.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *JWT_Location_Header) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(len(m.Header)))
	i += copy(dAtA[i:], m.Header)
	return i, nil
}
func (m *JWT_Location_Query) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuth(dAtA, i, uint64(len(m.Query)))
	i += copy(dAtA[i:], m.Query)
	return i, nil
}
func (m *EndUserAuthenticationPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndUserAuthenticationPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Jwts) > 0 {
		for _, msg := range m.Jwts {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EndUserAuthenticationPolicySpecReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndUserAuthenticationPolicySpecReference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	return i, nil
}

func (m *EndUserAuthenticationPolicySpecBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndUserAuthenticationPolicySpecBinding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, msg := range m.Services {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Policies) > 0 {
		for _, msg := range m.Policies {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MutualTLS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutualTLS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OutputHeaderLocation) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.OutputHeaderLocation)))
		i += copy(dAtA[i:], m.OutputHeaderLocation)
	}
	return i, nil
}

func encodeVarintAuth(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *JWT) Size() (n int) {
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if len(m.Audiences) > 0 {
		for _, s := range m.Audiences {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	l = len(m.JwksUri)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.ForwardJwt {
		n += 2
	}
	if m.PublicKeyCacheDuration != nil {
		l = m.PublicKeyCacheDuration.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	l = len(m.JwksUriEnvoyCluster)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *JWT_Location) Size() (n int) {
	var l int
	_ = l
	if m.Scheme != nil {
		n += m.Scheme.Size()
	}
	return n
}

func (m *JWT_Location_Header) Size() (n int) {
	var l int
	_ = l
	l = len(m.Header)
	n += 1 + l + sovAuth(uint64(l))
	return n
}
func (m *JWT_Location_Query) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	n += 1 + l + sovAuth(uint64(l))
	return n
}
func (m *EndUserAuthenticationPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Jwts) > 0 {
		for _, e := range m.Jwts {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *EndUserAuthenticationPolicySpecReference) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *EndUserAuthenticationPolicySpecBinding) Size() (n int) {
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *MutualTLS) Size() (n int) {
	var l int
	_ = l
	l = len(m.OutputHeaderLocation)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func sovAuth(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuth(x uint64) (n int) {
	return sovAuth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *JWT) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWT{`,
		`Issuer:` + fmt.Sprintf("%v", this.Issuer) + `,`,
		`Audiences:` + fmt.Sprintf("%v", this.Audiences) + `,`,
		`JwksUri:` + fmt.Sprintf("%v", this.JwksUri) + `,`,
		`ForwardJwt:` + fmt.Sprintf("%v", this.ForwardJwt) + `,`,
		`PublicKeyCacheDuration:` + strings.Replace(fmt.Sprintf("%v", this.PublicKeyCacheDuration), "Duration", "google_protobuf1.Duration", 1) + `,`,
		`Locations:` + strings.Replace(fmt.Sprintf("%v", this.Locations), "JWT_Location", "JWT_Location", 1) + `,`,
		`JwksUriEnvoyCluster:` + fmt.Sprintf("%v", this.JwksUriEnvoyCluster) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWT_Location) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWT_Location{`,
		`Scheme:` + fmt.Sprintf("%v", this.Scheme) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWT_Location_Header) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWT_Location_Header{`,
		`Header:` + fmt.Sprintf("%v", this.Header) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWT_Location_Query) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWT_Location_Query{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndUserAuthenticationPolicySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndUserAuthenticationPolicySpec{`,
		`Jwts:` + strings.Replace(fmt.Sprintf("%v", this.Jwts), "JWT", "JWT", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndUserAuthenticationPolicySpecReference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndUserAuthenticationPolicySpecReference{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndUserAuthenticationPolicySpecBinding) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndUserAuthenticationPolicySpecBinding{`,
		`Services:` + strings.Replace(fmt.Sprintf("%v", this.Services), "IstioService", "IstioService", 1) + `,`,
		`Policies:` + strings.Replace(fmt.Sprintf("%v", this.Policies), "EndUserAuthenticationPolicySpecReference", "EndUserAuthenticationPolicySpecReference", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MutualTLS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MutualTLS{`,
		`OutputHeaderLocation:` + fmt.Sprintf("%v", this.OutputHeaderLocation) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAuth(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *JWT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audiences", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Audiences = append(m.Audiences, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwksUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwksUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardJwt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForwardJwt = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyCacheDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicKeyCacheDuration == nil {
				m.PublicKeyCacheDuration = &google_protobuf1.Duration{}
			}
			if err := m.PublicKeyCacheDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &JWT_Location{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwksUriEnvoyCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwksUriEnvoyCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWT_Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scheme = &JWT_Location_Header{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scheme = &JWT_Location_Query{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndUserAuthenticationPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndUserAuthenticationPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndUserAuthenticationPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jwts = append(m.Jwts, &JWT{})
			if err := m.Jwts[len(m.Jwts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndUserAuthenticationPolicySpecReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndUserAuthenticationPolicySpecReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndUserAuthenticationPolicySpecReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndUserAuthenticationPolicySpecBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndUserAuthenticationPolicySpecBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndUserAuthenticationPolicySpecBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &IstioService{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &EndUserAuthenticationPolicySpecReference{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MutualTLS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutualTLS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutualTLS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputHeaderLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputHeaderLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuth
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuth
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuth(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuth = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuth   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mixer/v1/config/client/auth.proto", fileDescriptorAuth) }

var fileDescriptorAuth = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcb, 0x4e, 0xdb, 0x4c,
	0x14, 0xb6, 0x09, 0x84, 0x64, 0xb2, 0x9b, 0x1f, 0x45, 0x06, 0xa1, 0x21, 0xe4, 0xaf, 0xaa, 0xa8,
	0x0b, 0x5b, 0x40, 0xfb, 0x00, 0x40, 0x41, 0x94, 0x52, 0xa9, 0x32, 0x41, 0x54, 0x55, 0x25, 0xcb,
	0x99, 0x9c, 0x24, 0x03, 0xc6, 0xe3, 0xce, 0x25, 0x69, 0x76, 0x7d, 0x84, 0x2e, 0xfa, 0x10, 0x7d,
	0x14, 0x96, 0x2c, 0xba, 0xe8, 0xb2, 0x71, 0x37, 0x5d, 0xf2, 0x08, 0x95, 0x3d, 0x36, 0x6c, 0x5a,
	0xc2, 0x2a, 0x73, 0xe6, 0xbb, 0xc4, 0xdf, 0x39, 0x67, 0xd0, 0xe6, 0x15, 0xfb, 0x04, 0xc2, 0x1b,
	0x6f, 0x79, 0x94, 0xc7, 0x03, 0x36, 0xf4, 0x68, 0xc4, 0x20, 0x56, 0x5e, 0xa8, 0xd5, 0xc8, 0x4d,
	0x04, 0x57, 0x1c, 0xaf, 0x33, 0xa9, 0x18, 0x77, 0x73, 0xa2, 0x3b, 0xde, 0x72, 0x0d, 0xd1, 0x35,
	0xc4, 0xb5, 0x95, 0x21, 0x1f, 0xf2, 0x9c, 0xe8, 0x65, 0x27, 0xa3, 0x59, 0x23, 0x43, 0xce, 0x87,
	0x11, 0x78, 0x79, 0xd5, 0xd3, 0x03, 0xaf, 0xaf, 0x45, 0xa8, 0x18, 0x8f, 0x0b, 0xfc, 0xc9, 0x3f,
	0xfe, 0x56, 0x82, 0x18, 0x33, 0x0a, 0x86, 0xd5, 0xfe, 0x5a, 0x41, 0x95, 0xe3, 0xf3, 0x2e, 0x6e,
	0xa2, 0x2a, 0x93, 0x52, 0x83, 0x70, 0xec, 0x96, 0xdd, 0xa9, 0xfb, 0x45, 0x85, 0xd7, 0x51, 0x3d,
	0xd4, 0x7d, 0x06, 0x31, 0x05, 0xe9, 0x2c, 0xb4, 0x2a, 0x9d, 0xba, 0x7f, 0x7f, 0x81, 0x57, 0x51,
	0xed, 0x62, 0x72, 0x29, 0x03, 0x2d, 0x98, 0x53, 0xc9, 0x75, 0xcb, 0x59, 0x7d, 0x26, 0x18, 0xde,
	0x40, 0x8d, 0x01, 0x17, 0x93, 0x50, 0xf4, 0x83, 0x8b, 0x89, 0x72, 0x16, 0x5b, 0x76, 0xa7, 0xe6,
	0xa3, 0xe2, 0xea, 0x78, 0xa2, 0x70, 0x17, 0xad, 0x26, 0xba, 0x17, 0x31, 0x1a, 0x5c, 0xc2, 0x34,
	0xa0, 0x21, 0x1d, 0x41, 0x50, 0x46, 0x70, 0x96, 0x5a, 0x76, 0xa7, 0xb1, 0xbd, 0xea, 0x9a, 0x8c,
	0x6e, 0x99, 0xd1, 0x7d, 0x59, 0x10, 0xfc, 0xa6, 0xd1, 0xbe, 0x86, 0xe9, 0x7e, 0xa6, 0x2c, 0xef,
	0xf1, 0x11, 0xaa, 0x47, 0x9c, 0xe6, 0x67, 0xe9, 0x54, 0x5b, 0x95, 0x4e, 0x63, 0xfb, 0x99, 0xfb,
	0x50, 0x77, 0xdd, 0xe3, 0xf3, 0xae, 0x7b, 0x52, 0x48, 0xfc, 0x7b, 0x31, 0xde, 0x41, 0xcd, 0x32,
	0x5b, 0x00, 0xf1, 0x98, 0x4f, 0x03, 0x1a, 0x69, 0xa9, 0x40, 0x38, 0xcb, 0x79, 0xd2, 0xff, 0x8a,
	0xa4, 0x07, 0x19, 0xb6, 0x6f, 0xa0, 0xb5, 0x43, 0x54, 0x2b, 0xbd, 0xb0, 0x83, 0xaa, 0x23, 0x08,
	0xfb, 0x65, 0x4b, 0x8f, 0x2c, 0xbf, 0xa8, 0x71, 0x13, 0x2d, 0x7d, 0xd4, 0x20, 0xa6, 0xce, 0x42,
	0x01, 0x98, 0x72, 0xaf, 0x86, 0xaa, 0x92, 0x8e, 0xe0, 0x0a, 0xda, 0xef, 0xd0, 0xc6, 0x41, 0xdc,
	0x3f, 0x93, 0x20, 0x76, 0xb5, 0x1a, 0x41, 0xac, 0x98, 0x31, 0x7d, 0xcb, 0x23, 0x46, 0xa7, 0xa7,
	0x09, 0x50, 0xfc, 0x02, 0x2d, 0x5e, 0x4c, 0x94, 0x19, 0x4a, 0x63, 0x7b, 0x73, 0x6e, 0x48, 0x3f,
	0xa7, 0xb7, 0x3f, 0xa0, 0xce, 0x1c, 0x67, 0x1f, 0x06, 0x20, 0xb2, 0xf9, 0x62, 0x8c, 0x16, 0xe3,
	0xf0, 0x0a, 0x8a, 0x95, 0xc8, 0xcf, 0xd9, 0x42, 0x64, 0xbf, 0x32, 0x09, 0x29, 0x98, 0xef, 0xf7,
	0xef, 0x2f, 0xda, 0xdf, 0x6d, 0xf4, 0x74, 0x8e, 0xfd, 0x1e, 0x8b, 0xfb, 0x2c, 0x1e, 0xe2, 0x43,
	0x54, 0x2b, 0x56, 0x51, 0x3a, 0xf6, 0x63, 0x06, 0xf5, 0x2a, 0x03, 0x4f, 0x8d, 0xc4, 0xbf, 0xd3,
	0xe2, 0x1e, 0xaa, 0x25, 0x99, 0x39, 0x83, 0xb2, 0x17, 0x87, 0x0f, 0xfb, 0x3c, 0x36, 0xbe, 0x7f,
	0xe7, 0xdb, 0xde, 0x45, 0xf5, 0x37, 0x5a, 0xe9, 0x30, 0xea, 0x9e, 0x9c, 0xe2, 0xe7, 0xa8, 0xc9,
	0xb5, 0x4a, 0xb4, 0x0a, 0xcc, 0x38, 0x83, 0x72, 0x67, 0x8a, 0x3e, 0xad, 0x18, 0xf4, 0x28, 0x07,
	0xcb, 0x6d, 0xd8, 0x3b, 0xbb, 0x9e, 0x11, 0xeb, 0x66, 0x46, 0xac, 0x1f, 0x33, 0x62, 0xdd, 0xce,
	0x88, 0xf5, 0x39, 0x25, 0xf6, 0xb7, 0x94, 0x58, 0xd7, 0x29, 0xb1, 0x6f, 0x52, 0x62, 0xff, 0x4c,
	0x89, 0xfd, 0x3b, 0x25, 0xd6, 0x6d, 0x4a, 0xec, 0x2f, 0xbf, 0x88, 0xf5, 0xfe, 0x7f, 0x93, 0x82,
	0x71, 0x2f, 0x4c, 0x98, 0xf7, 0xf7, 0xd7, 0xdc, 0xab, 0xe6, 0x4f, 0x63, 0xe7, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x75, 0xc4, 0x0c, 0x21, 0x65, 0x04, 0x00, 0x00,
}
