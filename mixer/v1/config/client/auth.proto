// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.mixer.v1.config.client;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// JSON Web Token (JWT) token format for authentication as defined by
// https://tools.ietf.org/html/rfc7519. See [OAuth
// 2.0](https://tools.ietf.org/html/rfc6749) and [OIDC
// 1.0](http://openid.net/connect) for how this is used in the whole
// authentication flow.
//
// Example,
//
//     issuer: https://example.com
//     audiences:
//     - bookstore_android.apps.googleusercontent.com
//       bookstore_web.apps.googleusercontent.com
//     jwks_uri: https://example.com/.well-known/jwks.json
//
message JWT {
  // Identifies the principal that issued the JWT. See
  // https://tools.ietf.org/html/rfc7519#section-4.1.1
  // Usually a URL or an email address.
  //
  // Example: https://securetoken.google.com
  // Example: 1234567-compute@developer.gserviceaccount.com
  //
  string issuer = 1;

  // The list of JWT
  // [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3).
  // that are allowed to access. A JWT containing any of these
  // audiences will be accepted.
  //
  // The service name will be accepted if audiences is empty.
  //
  // Example:
  //
  //     audiences:
  //     - bookstore_android.apps.googleusercontent.com
  //       bookstore_web.apps.googleusercontent.com
  //
  repeated string audiences = 2;

  // URL of the provider's public key set to validate signature of the
  // JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
  //
  // Optional if the key set document can either (a) be retrieved from
  // [OpenID
  // Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html
  // of the issuer or (b) inferred from the email domain of the issuer
  // (e.g. a Google service account).
  //
  // Example: https://www.googleapis.com/oauth2/v1/certs
  string jwks_uri = 3;
  
  // If true, forward the entire base64 encoded JWT in the HTTP request.
  // If false, remove the JWT from the HTTP request and do not forward to the application.
  // If omitted, inherit from a larger scope, e.g. method-level policy inherits behavior from service.
  // TODO(ayj) - refine scope of policy for method, service, namespace, and global inheritance.
  google.protobuf.BoolValue forward_jwt = 4;
  
  // TODO(ayj) - add support for https://cloud.google.com/endpoints/docs/openapi/authenticating-users#receiving_auth_results_in_your_api with forward_info boolean.

  // Duration after which the cached public key should be expired. The
  // system wide default is applied if no duration is explicitly
  // specified.
  google.protobuf.Duration public_key_cache_duration = 5;
}

// Determines how to apply auth policies for individual requests.
message EndUserAuthPolicySpec {
  // If empty, apply auth policy to all requests.
  // If any of match is true, it is matched.
  repeated AttributeMatch match = 1;

  message AndRule {
    repeated Rule rules = 1;
  }

  message OrRule {
    repeated Rule rules = 1;
  }

  message Rule {
    oneof policy {
      AndRule and_rule = 1;
      OrRule or_rule = 2;
      JWT jwt = 3;
    }
  }
  // The list of end user auth rules to apply.
  repeated Rule rules = 2;
}

// EndUserAuthPolicySpecBinding defines the binding between EndUserAuthPolicySpecs
// and one or more IstioService.
message EndUserAuthPolicySpecBinding {
  // REQUIRED. One or more services to map the listed EndUserAuthPolicySpecs
  // onto.
  repeated IstioService services = 1;

  message EndUserAuthPolicySpecReference {
    // REQUIRED. The short name of the EndUserAuthPolicySpec. This is the
    // resource name defined by the metadata name field.
    string name = 1;

    // Optional namespace of the EndUserAuthPolicySpec. Defaults to the value
    // of the metadata namespace field.
    string namespace = 2;
  }
}
