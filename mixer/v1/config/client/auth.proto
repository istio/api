// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.mixer.v1.config.client;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// APIKey defines the explicit configuration for generating the
// `api.key` attribute from HTTP requests.
//
// The following default policies are used to generate the `api.key`
// attribute if no explicit APIKey policy is defined for a service.
//
//    `query: key, `query: api-key`, and then `header: x-api-key`
//
// See https://swagger.io/docs/specification/authentication/api-keys
// for a general overview of API keys as defined by OpenAPI.
message APIKey {
  oneof key {
    // API Key is sent as a query parameter. `query` represents the
    // query string parameter name.
    //
    // For example, `query=api_key` should be used with the
    // following request:
    //
    //     GET /something?api_key=abcdef12345
    //
    string query = 1;

    // API key is send in a request header. `header` represents the
    // header name.
    //
    // For example, `header=X-API-KEY` should be used with the
    // following request:
    //
    //     GET /something HTTP/1.1
    //     X-API-Key: abcdef12345
    //
    string header = 2;

    // API key is sent in a
    // [cookie](https://swagger.io/docs/specification/authentication/cookie-authentication),
    //
    // For example, `cookie=X-API-KEY` should be used for the
    // following request:
    //
    //     GET /something HTTP/1.1
    //     Cookie: X-API-KEY=abcdef12345
    //
    string cookie = 3;
  }
}

// JSON Web Token (JWT) token format for authentication as defined by
// https://tools.ietf.org/html/rfc7519. See [OAuth
// 2.0](https://tools.ietf.org/html/rfc6749) and [OIDC
// 1.0](http://openid.net/connect) for how this is used in the whole
// authentication flow.
//
// Example,
//
//     issuer: https://example.com
//     audiences:
//     - bookstore_android.apps.googleusercontent.com
//       bookstore_web.apps.googleusercontent.com
//     jwks_uri: https://example.com/.well-known/jwks.json
//
message JWT {
  // Identifies the principal that issued the JWT. See
  // https://tools.ietf.org/html/rfc7519#section-4.1.1
  // Usually a URL or an email address.
  //
  // Example: https://securetoken.google.com
  // Example: 1234567-compute@developer.gserviceaccount.com
  //
  string issuer = 1;

  // The list of JWT
  // [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
  // that are allowed to access. A JWT containing any of these
  // audiences will be accepted.
  //
  // The service name will be accepted if audiences is empty.
  //
  // Example:
  //
  //     audiences:
  //     - bookstore_android.apps.googleusercontent.com
  //       bookstore_web.apps.googleusercontent.com
  //
  repeated string audiences = 2;

  // URL of the provider's public key set to validate signature of the
  // JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
  //
  // Optional if the key set document can either (a) be retrieved from
  // [OpenID
  // Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html
  // of the issuer or (b) inferred from the email domain of the issuer
  // (e.g. a Google service account).
  //
  // Example: https://www.googleapis.com/oauth2/v1/certs
  string jwks_uri = 3;

  // Value to insert into `sec-istio-auth-userinfo` header (or
  // attribute?)
  enum UserInfoType {
    // Forward the entire base64 encoded JWT in the HTTP request.
    ALL = 0;

    // Don't forward any part of the JWT in the HTTP request.
    NONE = 1;
  }
  UserInfoType user_info_type = 4;

  // Duration after which the cached public key should be expired. The
  // system wide default is applied if no duration is explicitly
  // specified.
  google.protobuf.Duration public_key_cache_duration = 5;
}

// Determines how to apply auth policies for individual requests.
message AuthPolicySpec {
  // If empty, apply auth policy to all requests.
  // If any of match is true, it is matched.
  repeated AttributeMatch match = 1;

  message Policy {
    oneof policy {
      APIKey api_key = 1;
      JWT jwt = 2;
    }
  }
  // The list of auth policies to apply.
  repeated Policy policies = 1;
}

// AuthPolicySpecBinding defines the binding between AuthPolicySpecs
// and one or more IstioService.
message AuthPolicySpecBinding {
  // REQUIRED. One or more services to map the listed AuthPolicySpecs
  // onto.
  repeated IstioService services = 1;

  message AuthPolicySpecReference {
    // REQUIRED. The short name of the AuthPolicySpec. This is the
    // resource name defined by the metadata name field.
    string name = 1;

    // Optional namespace of the AuthPolicySpec. Defaults to the value
    // of the metadata namespace field.
    string namespace = 2;
  }
}
