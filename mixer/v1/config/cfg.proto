// Copyright 2016 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/struct.proto";

import "mixer/v1/config/descriptor/log_entry_descriptor.proto";
import "mixer/v1/config/descriptor/metric_descriptor.proto";
import "mixer/v1/config/descriptor/monitored_resource_descriptor.proto";
import "mixer/v1/config/descriptor/principal_descriptor.proto";
import "mixer/v1/config/descriptor/quota_descriptor.proto";
import "mixer/v1/config/descriptor/value_type.proto";


package istio.mixer.v1.config;

// Configures a set of services.
//
// The following example configures a metric that will be recorded for all services:
//
// ```yaml
// subject: "namespace:ns1"
// revision: "1011"
// action_rules:
// - selector: target.service == "*"
//   actions:
//   - handler: prometheus-handler
//     instances:
//     - RequestCountByService
//
// handlers:
// - name: prometheus-handler
//   adapter: prometheus
//   params:
//
// constructors:
// - name: RequestCountByService
//   type: RequestCounter
//   params:
//     value: 1
//     dimensions:
//       source: origin.service
//       target_ip: destination.ip
//
// types:
// - name: RequestCounter
//   template: MetricTemplate
//   params:
//     value: INT64
//     dimensions:
//       source: STRING
//
// (== deprecation_description ServiceConfig is deprecated, see the Config API's
// swagger spec. ==)
message ServiceConfig {
  option deprecated = true;

  // Optional. Subject is unique for a config type.
  // 2 config with the same subject will overwrite each other
  string subject = 1;
  // Optional. revision of this config. This is assigned by the server
  string revision = 2;

  // This is about to get deprecated. The configuration will move to
  // [action_rules][istio.mixer.v1.config.ServiceConfig.action_rules].
  repeated AspectRule rules = 3;

  // Optional. List of constructors that can be referenced from [actions][istio.mixer.v1.config.Action.instances]
  repeated Constructor constructors = 4;

  // Optional. List of actions that apply for this service.
  repeated ActionRule action_rules = 5;
}

// An AspectRule is a selector and a set of intentions to be executed when the
// selector is `true`. The selectors of the this rule's child AspectRules are only
// evaluated if this rule's selector is true.
message AspectRule {
  // Required. Selector is an attribute based predicate. When Mixer receives a
  // request it evaluates all selectors in scope and executes the rules for all
  // selectors that evaluated to true.
  //
  // A few example selectors:
  //
  // * an empty selector evaluates to `true`
  // * `true`, a boolean literal; a rule with this selector will always be executed
  // * `target.service == ratings*` selects any request targeting a service whose
  // name starts with "ratings"
  // * `attr1 == "20" && attr2 == "30"` logical AND, OR, and NOT are also available
  string selector = 1;
  // The aspects that apply when selector evaluates to `true`.
  repeated Aspect aspects = 2;

  // Nested aspect rules; their selectors are evaluated if this selector
  // predicate evaluates to `true`.
  repeated AspectRule rules = 3;
}

// Aspect describes how an adapter is intended to operate in the context of the
// rule it's embedded in. The value for `params` depends on the `kind` of this
// aspect: each kind of aspect defines its own `params` proto.
//
// The following example instructs Mixer to populate a metric named "response_time"
// that was declared to have three labels: src_consumer_id, target_response_status_code,
// and target_service_name. For each label and the metric's `value` we provide
// an expression over Istio's attributes. Mixer evaluates these expressions for
// each request.
//
// ```yaml
// kind: metrics
// params:
//   metrics:
//   - descriptorName: response_time # tie this metric to a descriptor of the same name
//     value: response.time  # from the set of canonical attributes
//     labels:
//       src_consumer_id: source.user | source.uid
//       target_response_status_code: response.code
//       target_service_name: target.service
// ```
message Aspect {
  // Required. The kind of aspect this intent is targeting.
  string kind = 1;
  // Optional. The name of the adapter this Aspect targets. If no name is provided,
  // Mixer will use the adapter of the target kind named "default".
  string adapter = 2;
  // Required. Struct representation of a proto defined by each aspect kind.
  google.protobuf.Struct params = 4;
}

// Adapter allows the operator to configure a specific adapter implementation.
// Each adapter implementation defines its own `params` proto. Note that unlike
// [Aspect][istio.mixer.v1.config.Aspect], the type of `params` varies with `impl`
// and not with `kind`.
//
// In the following example we define a `metrics` adapter using the Mixer's prepackaged
// prometheus adapter. This adapter doesn't require any parameters.
//
// ```yaml
// kind: metrics
// name: prometheus-adapter
// impl: prometheus
// params:
// ```
message Adapter {
  // Required, must be unique per `kind`. Used by [Aspect][istio.mixer.v1.config.Aspect]
  // to refer to this adapter. The name "default" is special: when an Aspect does not
  // specify a name, the Adapter named "default" of the same `kind` is used to execute
  // the intention described by the [AspectRule][istio.mixer.v1.config.AspectRule]s.
  string name = 1;
  // Required. The aspect this implementation with these params will implement;
  // a single adapter implementation may implement many aspects, but an `Adapter`
  // entry is required per kind.
  string kind = 2;
  // Required. The name of a specific adapter implementation. An adapter's
  // implementation name is typically a constant in its code.
  string impl = 3;
  // Optional, depends on adapter implementation. Struct representation of a
  // proto defined by the implementation; this varies depending on `impl`.
  google.protobuf.Struct params = 4;
}

// GlobalConfig defines configuration elements that are available for the rest
// of the config. It is used to configure adapters and make them available in
// AspectRules.
//
// (== deprecation_description GlobalConfig is deprecated, see the Config API's
// swagger spec. ==)
message GlobalConfig {
  option deprecated = true;

  // Optional.
  string revision = 1;

  repeated Adapter adapters = 2;
  repeated AttributeManifest manifests = 3;

  // TODO: remove these in https://github.com/istio/api/pull/45
  repeated istio.mixer.v1.config.descriptor.LogEntryDescriptor logs = 4;
  repeated istio.mixer.v1.config.descriptor.MetricDescriptor metrics = 5;
  repeated istio.mixer.v1.config.descriptor.MonitoredResourceDescriptor monitored_resources = 6;
  repeated istio.mixer.v1.config.descriptor.PrincipalDescriptor principals = 7;
  repeated istio.mixer.v1.config.descriptor.QuotaDescriptor quotas = 8;

  // Optional. List of handlers that can be referenced from [actions][istio.mixer.v1.config.Action.handler]
  repeated Handler handlers = 9;

  // Optional. List of types that can be referenced from [Constructors][istio.mixer.v1.config.Constructor.type]
  repeated Types types = 10;
}

// AttributeManifest describes a set of Attributes produced by some component
// of an Istio deployment.
message AttributeManifest {
  // Optional. The revision of this document. Assigned by server.
  string revision = 1;
  // Required. Name of the component producing these attributes. This can be
  // the proxy (with the canonical name "istio-proxy") or the name of an
  // `attributes` kind adapter in Mixer.
  string name = 2;

  // AttributeInfo describes the schema of an Istio `Attribute`.
  //
  // ## Istio Attributes
  //
  // Istio uses `attributes` to describe runtime activities of Istio services.
  // An Istio attribute carries a specific piece of information about an activity,
  // such as the error code of an API request, the latency of an API request, or the
  // original IP address of a TCP connection. The attributes are often generated
  // and consumed by different services. For example, a frontend service can
  // generate an authenticated user attribute and pass it to a backend service for
  // access control purpose.
  //
  // To simplify the system and improve developer experience, Istio uses
  // shared attribute definitions across all components. For example, the same
  // authenticated user attribute will be used for logging, monitoring, analytics,
  // billing, access control, auditing. Many Istio components provide their
  // functionality by collecting, generating, and operating on attributes.
  // For example, the proxy collects the error code attribute, and the logging
  // stores it into a log.
  //
  // ## Design
  //
  // Each Istio attribute must conform to an `AttributeInfo` in an
  // `AttributeManifest` in the current Istio deployment at runtime. An
  // [`AttributeInfo`][istio.mixer.v1.config] is used to define an attribute's
  // metadata: the type of its value and a detailed description that explains
  // the semantics of the attribute type. Each attribute's name is globally unique;
  // in other words an attribute name can only appear once across all manifests.
  //
  // The runtime presentation of an attribute is intentionally left out of this
  // specification, because passing attribute using JSON, XML, or Protocol Buffers
  // does not change the semantics of the attribute. Different implementations
  // can choose different representations based on their needs.
  //
  // ## HTTP Mapping
  //
  // Because many systems already have REST APIs, it makes sense to define a
  // standard HTTP mapping for Istio attributes that are compatible with typical
  // REST APIs. The design is to map one attribute to one HTTP header, the
  // attribute name and value becomes the HTTP header name and value. The actual
  // encoding scheme will be decided later.
  message AttributeInfo {
    // Optional. A human-readable description of the attribute's purpose.
    string description = 1;

    // Required. The type of data carried by this attribute.
    istio.mixer.v1.config.descriptor.ValueType value_type = 2;
  }
  // The set of attributes this Istio component will be responsible for producing at runtime.
  // We map from attribute name to the attribute's specification. The name of an attribute,
  // which is how attributes are referred to in aspect configuration, must conform to:
  //
  //     Name = IDENT { SEPARATOR IDENT };
  //
  // Where `IDENT` must match the regular expression `[a-z][a-z0-9]+` and `SEPARATOR` must
  // match the regular expression `[\.-]`.
  //
  // Attribute names must be unique within a single Istio deployment. The set of canonical
  // attributes are described at https://istio.io/docs/reference/attribute-vocabulary.html.
  // Attributes not in that list should be named with a component-specific suffix such as
  // request.count-my.component
  map<string, AttributeInfo> attributes = 3;
}

// Uri represents a properly formed URI.
message Uri {
  string value = 1;
}

// IpAddress holds an IPv4 or IPv6 address.
message IpAddress {
  bytes value = 1;
}

// DnsName holds a valid domain name.
message DnsName {
  string value = 1;
}

// EmailAddress holds a properly formatted email address.
message EmailAddress {
  string value = 1;
}


// An ActionRule is a selector and a set of intentions to be executed when the
// selector is `true`.
//
// The following example instructs Mixer to invoke 'prometheus-handler' handler for all services and pass it the object
// constructed using the constructor 'RequestCountByService'
//
// ```yaml
// action_rules:
// - selector: target.service == "*"
//   actions:
//   - handler: prometheus-handler
//     instances:
//     - RequestCountByService
// ```
message ActionRule {
  // Required. Selector is an attribute based predicate. When Mixer receives a
  // request it evaluates all selectors in scope and executes the ActionRule for all
  // selectors that evaluated to true.
  //
  // A few example selectors:
  //
  // * an empty selector evaluates to `true`
  // * `true`, a boolean literal; a rule with this selector will always be executed
  // * `target.service == ratings*` selects any request targeting a service whose
  // name starts with "ratings"
  // * `attr1 == "20" && attr2 == "30"` logical AND, OR, and NOT are also available
  string selector = 1;

  // Optional. The actions that will be executed when selector evaluates to `true`.
  repeated Action actions = 2;

  // Optional. Nested action rules; their selectors are evaluated if this selector
  // predicate evaluates to `true`.
  repeated ActionRule action_rules = 3;
}

// Action describes which [Handler][istio.mixer.v1.config.Handler] to invoke and what data to pass to it for processing.
//
// The following example instructs Mixer to invoke 'prometheus-handler' handler and pass it the object
// constructed using the constructor 'RequestCountByService'
//
// ```yaml
// - handler: prometheus-handler
//   instances:
//   - RequestCountByService
// ```
message Action {
  // Required: The handler to invoke.
  string handler = 2;

  // Required: List of constructor names that will be evaluated during request execution, and the constructed object
  // will be passed to the handler for processing.
  repeated string instances = 3;
}

// Constructor tell Mixer how to create instances of particular types.
//
// Constructor is defined by the operator. Constructor is defined relative to a known
// [Type][istio.mixer.v1.config.Type]. Their purpose is to tell Mixer how to use attributes or literals to produce
// instances of the specified type.
//
// The following example instructs Mixer to construct an object named 'RequestCountByService' for type 'RequestCounter'
// and it also provides mapping between fields of the type and attributes/literals.
//
// ```yaml
// - name: RequestCountByService
//   type: RequestCounter
//   params:
//     value: 1
//     dimensions:
//       source: origin.service
//       target_ip: destination.ip
// ```
message Constructor {
  // Require. Name of the constructor
  //
  // Must be unique in the entire mixer configuration. Used by [Action][istio.mixer.v1.config.Action] to refer
  // to this constructor.
  string name = 1;

  // Require. The name of the type this constructor intend to construct.
  string type = 2;

  // Required. Struct representation of a proto associated with the 'type'.
  google.protobuf.Struct params = 3;
}

// Handler allows the operator to configure a specific adapter implementation.
// Each adapter implementation defines its own `params` proto.
//
// In the following example we define a `metrics` adapter using the Mixer's prepackaged
// prometheus adapter. This adapter doesn't require any parameters.
//
// ```yaml
// name: prometheus-handler
// adapter: prometheus
// params:
// ```
message Handler {
  // Required, Must be unique in the entire mixer configuration. Used by [Actions][istio.mixer.v1.config.Action.handler]
  // to refer to this handler.
  string name = 1;
  // Required. The name of a specific adapter implementation. An adapter's
  // implementation name is typically a constant in its code.
  string adapter = 2;
  // Optional, depends on adapter implementation. Struct representation of a
  // proto defined by the implementation; this varies depending on `adapter`.
  google.protobuf.Struct params = 3;
}

// Type describes the shape of the object that can be constructed using the
// [Constructor][istio.mixer.v1.config.Constructor].
//
// In the following example we define a `RequestCounter` type. The type is based on 'MetricTemplate' template.
// Template is a proto message that describes a general category of data that mixer can
// pass to various adapters for processing. Template dictates how types associated with it should configure the
// shape of the object that can be constructed. In this case, MetricTemplate requires all types associated with it to
// declare a 'value' field with its required ValueType and dimensions field with their name and required ValueType.
//
// ```yaml
// - name: RequestCounter
//   template: MetricTemplate
//   params:
//     value: INT64
//     dimensions:
//       source: STRING
// ```
//
// Sample MetricTemplate
//
// ```proto
// message MetricTemplate {
//   string name;
//   ValueType value;
//   map<string, ValueType> dimensions;
// }
// ```
message Type {
  // Required, Name of the type. Must be unique in the entire mixer configuration. Used by
  // [Constructor][istio.mixer.v1.config.Constructor.type] which tells the mixer how to construct this type.
  string name = 1;
  // Required. The name of a specific template this type belongs to.
  string template = 2;

  // Optional, depends on template referenced by this type. Struct representation of a
  // proto defined for the template; this varies depending on `template`.
  google.protobuf.Struct params = 3;
}
