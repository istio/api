// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package istio.mixer.v1;

// An `AttributeDescriptor` describes the schema of an Istio attribute type.
//
// ## Istio Attributes
//
// Istio uses `attributes` to describe runtime activities of Istio services.
// An Istio attribute carries a specific piece of information about an activity,
// such as the error code of an API request, the latency of an API request, the
// original IP address of a TCP connection. The attributes are often generated
// and consumed by different services. For example, a frontend service can
// generate an authenticated user attribute and pass it to a backend service for
// access control purpose.
//
// To simplify the system and improve developer experience, Istio uses
// shared attribute definitions across all components. For example, the same
// authenticated user attribute will be used for logging, monitoring, analytics,
// billing, access control, auditing. Many Istio components provide their
// functionality by collecting, generating, and operating on attributes.
// For example, the proxy collects the error code attribute, and the logging
// stores it into a log.
//
// ## Design
//
// Each Istio attribute must conform to an Istio attribute type. The
// `AttributeDescriptor` is used to define attribute types. Each type has a
// globally unique type name, the type of the value, and a detailed description
// that explains the semantics of the attribute type.
//
// The runtime presentation of an attribute is intentionally left out of this
// specification, because passing attribute using JSON, XML, or Protocol Buffers
// does not change the semantics of the attribute. Different implementations
// can choose different representations based on their needs.
//
// ## HTTP Mapping
//
// Because many systems already have REST APIs, it makes sense to define a
// standard HTTP mapping for Istio attributes that are compatible with typical
// REST APIs. The design is to map one attribute to one HTTP header, the
// attribute name and value becomes the HTTP header name and value. The actual
// encoding scheme will be decided later.
message AttributeDescriptor {
  // The name of this descriptor, referenced from individual attribute instances and other
  // descriptors.
  //
  // The format of this name is:
  //
  //     Name = IDENT { "." IDENT } ;
  //
  // Where `IDENT` must match the regular expression `[a-z][a-z0-9]+`.
  //
  // Attribute descriptor names must be unique within a single Istio deployment. There is a well
  // known set of attributes which have succinct names. Attributes not on this list should be
  // name with a component-specific suffix such as request_count-my_component
  string name = 1;

  // The type of data carried by attributes
  ValueType value_type = 2;

  // An optional human-readable description of the attribute's purpose.
  string description = 3;

  // Types of supported attribute values.
  enum ValueType {
    // An undiscriminated variable-length string.
    STRING = 0;

    // An undiscriminated 64-bit signed integer.
    INT64 = 1;

    // An undiscriminated 64-bit floating-point value.
    DOUBLE = 2;

    // An undiscriminated boolean value.
    BOOL = 3;

    // A point in time.
    TIMESTAMP = 4;

    // An IP address, encoded as bytes.
    IP_ADDRESS = 5;

    // An email address, encoded as a string.
    EMAIL_ADDRESS = 6;

    // A URI, encoded as a string.
    URI = 7;

    // A DNS name, encoded as a string.
    DNS_NAME = 8;
  }
}
