{
  "openapi": "3.0.0",
  "info": {
    "title": "Peer authentication configuration for workloads.",
    "version": "v1beta1"
  },
  "components": {
    "schemas": {
      "istio.networking.v1alpha3.ServerTLSSettings": {
        "type": "object",
        "properties": {
          "httpsRedirect": {
            "description": "If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.",
            "type": "boolean"
          },
          "mode": {
            "$ref": "#/components/schemas/istio.networking.v1alpha3.ServerTLSSettings.TLSmode"
          },
          "serverCertificate": {
            "description": "REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file holding the server-side TLS certificate to use.",
            "type": "string"
          },
          "privateKey": {
            "description": "REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file holding the server's private key.",
            "type": "string"
          },
          "caCertificates": {
            "description": "REQUIRED if mode is `MUTUAL`. The path to a file containing certificate authority certificates to use in verifying a presented client side certificate.",
            "type": "string"
          },
          "credentialName": {
            "description": "For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates. Applicable only on Kubernetes. The secret (of type `generic`) should contain the following keys and values: `key: \u003cprivateKey\u003e` and `cert: \u003cserverCert\u003e`. For mutual TLS, `cacert: \u003cCACertificate\u003e` can be provided in the same secret or a separate secret named `\u003csecret\u003e-cacert`. Secret of type tls for server certificates along with ca.crt key for CA certificates is also supported. Only one of server certificates and CA certificate or credentialName can be specified.",
            "type": "string"
          },
          "subjectAltNames": {
            "description": "A list of alternate names to verify the subject identity in the certificate presented by the client.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "verifyCertificateSpki": {
            "description": "An optional list of base64-encoded SHA-256 hashes of the SKPIs of authorized client certificates. Note: When both verify_certificate_hash and verify_certificate_spki are specified, a hash matching either value will result in the certificate being accepted.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "verifyCertificateHash": {
            "description": "An optional list of hex-encoded SHA-256 hashes of the authorized client certificates. Both simple and colon separated formats are acceptable. Note: When both verify_certificate_hash and verify_certificate_spki are specified, a hash matching either value will result in the certificate being accepted.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minProtocolVersion": {
            "$ref": "#/components/schemas/istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol"
          },
          "maxProtocolVersion": {
            "$ref": "#/components/schemas/istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol"
          },
          "cipherSuites": {
            "description": "Optional: If specified, only support the specified cipher list. Otherwise default to the default cipher list supported by Envoy.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol": {
        "description": "TLS protocol versions.",
        "type": "string",
        "enum": [
          "TLS_AUTO",
          "TLSV1_0",
          "TLSV1_1",
          "TLSV1_2",
          "TLSV1_3"
        ]
      },
      "istio.networking.v1alpha3.ServerTLSSettings.TLSmode": {
        "description": "TLS modes enforced by the proxy",
        "type": "string",
        "enum": [
          "PASSTHROUGH",
          "SIMPLE",
          "MUTUAL",
          "AUTO_PASSTHROUGH",
          "ISTIO_MUTUAL"
        ]
      },
      "istio.security.v1beta1.PeerAuthentication": {
        "description": "PeerAuthentication defines how traffic will be tunneled (or not) to the sidecar.",
        "type": "object",
        "properties": {
          "selector": {
            "$ref": "#/components/schemas/istio.type.v1beta1.WorkloadSelector"
          },
          "mtls": {
            "$ref": "#/components/schemas/istio.security.v1beta1.PeerAuthentication.MutualTLS"
          },
          "portLevelMtls": {
            "description": "Port specific mutual TLS settings. These only apply when a workload selector is specified.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/istio.security.v1beta1.PeerAuthentication.MutualTLS"
            }
          },
          "portLevelTls": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/istio.networking.v1alpha3.ServerTLSSettings"
            }
          }
        }
      },
      "istio.security.v1beta1.PeerAuthentication.MutualTLS": {
        "description": "Mutual TLS settings.",
        "type": "object",
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/istio.security.v1beta1.PeerAuthentication.MutualTLS.Mode"
          }
        }
      },
      "istio.security.v1beta1.PeerAuthentication.MutualTLS.Mode": {
        "type": "string",
        "enum": [
          "UNSET",
          "DISABLE",
          "PERMISSIVE",
          "STRICT"
        ]
      },
      "istio.type.v1beta1.WorkloadSelector": {
        "description": "WorkloadSelector specifies the criteria used to determine if a policy can be applied to a proxy. The matching criteria includes the metadata associated with a proxy, workload instance info such as labels attached to the pod/VM, or any other info that the proxy provides to Istio during the initial handshake. If multiple conditions are specified, all conditions need to match in order for the workload instance to be selected. Currently, only label based selection mechanism is supported.",
        "type": "object",
        "properties": {
          "matchLabels": {
            "description": "One or more labels that indicate a specific set of pods/VMs on which a policy should be applied. The scope of label search is restricted to the configuration namespace in which the resource is present.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}