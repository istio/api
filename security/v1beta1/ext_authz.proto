// Copyright 2020 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

// $title: External Authorization
// $description: Mirrored version of Envoy ext_authz filter v3 API.
// $location: https://istio.io/docs/reference/config/security/ext-authz.html

package istio.security.v1beta1;

option go_package="istio.io/api/security/v1beta1";

// This is a mirrored version of the subset of the Envoy ext_authz v3 API
// (https://github.com/envoyproxy/envoy/blob/c318156496edc46c844822a3d1f107ee496fa449/api/envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto#L27).
// Not all fields are mirrored, refer to the Envoy link above for documentation.

message ExtAuthz {
  oneof services {
    GrpcService grpc_service = 1;
    HttpService http_service = 2;
  }
  bool failure_mode_allow = 3;
  BufferSettings with_request_body = 4;
  bool clear_route_cache = 5;
  HttpStatus status_on_error = 6;
  repeated string metadata_context_namespaces = 7;
  bool include_peer_certificate = 8;
  string stat_prefix = 9;
}

message GrpcService {
  message EnvoyGrpc {
    string cluster_name = 1;
    string authority = 2;
  }
  oneof target_specifier {
    EnvoyGrpc envoy_grpc = 1;
  }
  google.protobuf.Duration timeout = 2;
  repeated HeaderValue initial_metadata = 3;
}

message HttpUri {
  string uri = 1;
  oneof http_upstream_type {
    string cluster = 2;
  }
  google.protobuf.Duration timeout = 3;
}

message HttpService {
  HttpUri server_uri = 1;
  string path_prefix = 2;
  AuthorizationRequest authorization_request = 3;
  AuthorizationResponse authorization_response = 4;
}

message BufferSettings {
  uint32 max_request_bytes = 1;
  bool allow_partial_message = 2;
  bool pack_as_bytes = 3;
}

message AuthorizationRequest {
  ListStringMatcher allowed_headers = 1;
  repeated HeaderValue headers_to_add = 2;
}

message HeaderValue {
  string key = 1;
  string value = 2;
}

message AuthorizationResponse {
  ListStringMatcher allowed_upstream_headers = 1;
  ListStringMatcher allowed_upstream_headers_to_append = 2;
  ListStringMatcher allowed_client_headers = 3;
}

message ListStringMatcher {
  repeated StringMatcher patterns = 1;
}

message StringMatcher {
  oneof match_pattern {
    string exact = 1;
    string prefix = 2;
    string suffix = 3;
    RegexMatcher safe_regex = 4;
    string contains = 5;
  }
  bool ignore_case = 6;
}

message RegexMatcher {
  message GoogleRE2 {
    google.protobuf.UInt32Value max_program_size = 1 [deprecated = true];
  }
  oneof engine_type {
    GoogleRE2 google_re2 = 1;
  }
  string regex = 2;
}

message HttpStatus {
  string code = 1;
}
