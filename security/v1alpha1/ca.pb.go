// Code generated by protoc-gen-go. DO NOT EDIT.
// source: security/v1alpha1/ca.proto

// Keep this package for backward compatibility.

package v1alpha1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Certificate request message. The authentication should be based on:
// 1. Bearer tokens carried in the side channel;
// 2. Client-side certificate via Mutual TLS handshake.
// Note: the service implementation is REQUIRED to verify the authenticated caller is authorize to
// all SANs in the CSR. The server side may overwrite any requested certificate field based on its
// policies.
type IstioCertificateRequest struct {
	// PEM-encoded certificate request.
	// The public key in the CSR is used to generate the certificate,
	// and other fields in the generated certificate may be overwritten by the CA.
	Csr string `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	// Optional: requested certificate validity period, in seconds.
	ValidityDuration int64 `protobuf:"varint,3,opt,name=validity_duration,json=validityDuration,proto3" json:"validity_duration,omitempty"`
	// $hide_from_docs
	// Optional: Opaque metadata provided by the XDS node to Istio.
	// Supported metadata: WorkloadName, WorkloadIP, ClusterID
	Metadata             *_struct.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IstioCertificateRequest) Reset()         { *m = IstioCertificateRequest{} }
func (m *IstioCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*IstioCertificateRequest) ProtoMessage()    {}
func (*IstioCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af28ba83f79edf69, []int{0}
}

func (m *IstioCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IstioCertificateRequest.Unmarshal(m, b)
}
func (m *IstioCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IstioCertificateRequest.Marshal(b, m, deterministic)
}
func (m *IstioCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioCertificateRequest.Merge(m, src)
}
func (m *IstioCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_IstioCertificateRequest.Size(m)
}
func (m *IstioCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IstioCertificateRequest proto.InternalMessageInfo

func (m *IstioCertificateRequest) GetCsr() string {
	if m != nil {
		return m.Csr
	}
	return ""
}

func (m *IstioCertificateRequest) GetValidityDuration() int64 {
	if m != nil {
		return m.ValidityDuration
	}
	return 0
}

func (m *IstioCertificateRequest) GetMetadata() *_struct.Struct {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Certificate response message.
type IstioCertificateResponse struct {
	// PEM-encoded certificate chain.
	// The leaf cert is the first element, and the root cert is the last element.
	CertChain            []string `protobuf:"bytes,1,rep,name=cert_chain,json=certChain,proto3" json:"cert_chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IstioCertificateResponse) Reset()         { *m = IstioCertificateResponse{} }
func (m *IstioCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*IstioCertificateResponse) ProtoMessage()    {}
func (*IstioCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af28ba83f79edf69, []int{1}
}

func (m *IstioCertificateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IstioCertificateResponse.Unmarshal(m, b)
}
func (m *IstioCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IstioCertificateResponse.Marshal(b, m, deterministic)
}
func (m *IstioCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioCertificateResponse.Merge(m, src)
}
func (m *IstioCertificateResponse) XXX_Size() int {
	return xxx_messageInfo_IstioCertificateResponse.Size(m)
}
func (m *IstioCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IstioCertificateResponse proto.InternalMessageInfo

func (m *IstioCertificateResponse) GetCertChain() []string {
	if m != nil {
		return m.CertChain
	}
	return nil
}

func init() {
	proto.RegisterType((*IstioCertificateRequest)(nil), "istio.v1.auth.IstioCertificateRequest")
	proto.RegisterType((*IstioCertificateResponse)(nil), "istio.v1.auth.IstioCertificateResponse")
}

func init() { proto.RegisterFile("security/v1alpha1/ca.proto", fileDescriptor_af28ba83f79edf69) }

var fileDescriptor_af28ba83f79edf69 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4b, 0x33, 0x31,
	0x10, 0x86, 0xbf, 0xb0, 0x1f, 0x62, 0x23, 0x42, 0x9b, 0x4b, 0x97, 0xa2, 0xb2, 0xf4, 0xa0, 0x0b,
	0x42, 0x42, 0xdb, 0x93, 0x57, 0xeb, 0xc5, 0xeb, 0xf6, 0xe6, 0xa5, 0x4c, 0xd3, 0x69, 0x3b, 0x50,
	0x9b, 0x35, 0x99, 0x2c, 0xf4, 0xe8, 0x0f, 0xf0, 0x3f, 0xcb, 0xee, 0x5a, 0x51, 0xaa, 0x78, 0x0b,
	0xef, 0xfb, 0x1c, 0x9e, 0x79, 0x23, 0x07, 0x01, 0x6d, 0xf4, 0xc4, 0x7b, 0x53, 0x8d, 0x60, 0x5b,
	0x6e, 0x60, 0x64, 0x2c, 0xe8, 0xd2, 0x3b, 0x76, 0xea, 0x9c, 0x02, 0x93, 0xd3, 0xd5, 0x48, 0x43,
	0xe4, 0xcd, 0xe0, 0x62, 0xed, 0xdc, 0x7a, 0x8b, 0xa6, 0x29, 0x17, 0x71, 0x65, 0x02, 0xfb, 0x68,
	0xb9, 0x85, 0x87, 0x6f, 0x42, 0xf6, 0x1f, 0x6b, 0x7e, 0x8a, 0x9e, 0x69, 0x45, 0x16, 0x18, 0x0b,
	0x7c, 0x89, 0x18, 0x58, 0x75, 0x65, 0x62, 0x83, 0x4f, 0x45, 0x26, 0xf2, 0x4e, 0x51, 0x3f, 0xd5,
	0xad, 0xec, 0x55, 0xb0, 0xa5, 0x25, 0xf1, 0x7e, 0xbe, 0x8c, 0x1e, 0x98, 0xdc, 0x2e, 0x4d, 0x32,
	0x91, 0x27, 0x45, 0xf7, 0x50, 0x3c, 0x7c, 0xe4, 0x6a, 0x22, 0x4f, 0x9f, 0x91, 0x61, 0x09, 0x0c,
	0xe9, 0xff, 0x4c, 0xe4, 0x67, 0xe3, 0xbe, 0x6e, 0x5d, 0xf4, 0xc1, 0x45, 0xcf, 0x1a, 0x97, 0xe2,
	0x13, 0x1c, 0xde, 0xc9, 0xf4, 0x58, 0x27, 0x94, 0x6e, 0x17, 0x50, 0x5d, 0x4a, 0x69, 0xd1, 0xf3,
	0xdc, 0x6e, 0x80, 0x76, 0xa9, 0xc8, 0x92, 0xbc, 0x53, 0x74, 0xea, 0x64, 0x5a, 0x07, 0xe3, 0xd7,
	0x1f, 0x4e, 0x99, 0xa1, 0xaf, 0xc8, 0xa2, 0x5a, 0xc9, 0xde, 0xd4, 0x23, 0x30, 0x7e, 0xe9, 0xd4,
	0xb5, 0xfe, 0xb6, 0x94, 0xfe, 0x65, 0x87, 0xc1, 0xcd, 0x9f, 0x5c, 0x2b, 0x38, 0xfc, 0x77, 0x9f,
	0x3d, 0x5d, 0xb5, 0x2c, 0x39, 0x03, 0x25, 0x99, 0xa3, 0x6f, 0x5a, 0x9c, 0x34, 0xb7, 0x4f, 0xde,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x2b, 0xab, 0x63, 0xc2, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IstioCertificateServiceClient is the client API for IstioCertificateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IstioCertificateServiceClient interface {
	// Using provided CSR, returns a signed certificate.
	CreateCertificate(ctx context.Context, in *IstioCertificateRequest, opts ...grpc.CallOption) (*IstioCertificateResponse, error)
}

type istioCertificateServiceClient struct {
	cc *grpc.ClientConn
}

func NewIstioCertificateServiceClient(cc *grpc.ClientConn) IstioCertificateServiceClient {
	return &istioCertificateServiceClient{cc}
}

func (c *istioCertificateServiceClient) CreateCertificate(ctx context.Context, in *IstioCertificateRequest, opts ...grpc.CallOption) (*IstioCertificateResponse, error) {
	out := new(IstioCertificateResponse)
	err := c.cc.Invoke(ctx, "/istio.v1.auth.IstioCertificateService/CreateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IstioCertificateServiceServer is the server API for IstioCertificateService service.
type IstioCertificateServiceServer interface {
	// Using provided CSR, returns a signed certificate.
	CreateCertificate(context.Context, *IstioCertificateRequest) (*IstioCertificateResponse, error)
}

func RegisterIstioCertificateServiceServer(s *grpc.Server, srv IstioCertificateServiceServer) {
	s.RegisterService(&_IstioCertificateService_serviceDesc, srv)
}

func _IstioCertificateService_CreateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IstioCertificateServiceServer).CreateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/istio.v1.auth.IstioCertificateService/CreateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IstioCertificateServiceServer).CreateCertificate(ctx, req.(*IstioCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IstioCertificateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "istio.v1.auth.IstioCertificateService",
	HandlerType: (*IstioCertificateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCertificate",
			Handler:    _IstioCertificateService_CreateCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security/v1alpha1/ca.proto",
}
