// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apis/v1alpha1/http_generic.proto

package v1alpha1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import istio_mixer_v1 "istio.io/api/mixer/v1"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// HttpAPISpec defines the canonical configuration for generating
// API-related attributes from Http requests based on the method and
// uri templated path matches. It is sufficient for defining the API
// surface of a service for the purposes of API attribute
// generation. It is not intended to represent auth, quota,
// documentation, or other information commonly found in other API
// specifications, e.g. OpenAPI.
//
// Existing standards that define operations (or methods) in terms of
// Http methods and paths can be normalized to this format for use in
// Istio. For example, a simple petstore API described by OpenAPIv2
// [here](https://github.com/googleapis/gnostic/blob/master/examples/v2.0/yaml/petstore-simple.yaml)
// can be represented with the following HttpAPISpec.
//
//     apiVersion: apis.istio.io/v1alpha1
//     kind: HttpAPI
//     metadata:
//       name: petstore
//       namespace: default
//     spec:
//       generic:
//         attributes:
//           api.service: petstore.swagger.io
//           api.version: 1.0.0
//         patterns:
//         - attributes:
//             api.operation: findPets
//           httpMethod: GET
//           uriTemplate: /api/pets
//         - attributes:
//             api.operation: addPet
//           httpMethod: POST
//           uriTemplate: /api/pets
//         - attributes:
//             api.operation: findPetById
//           httpMethod: GET
//           uriTemplate: /api/pets/{id}
//         - attributes:
//             api.operation: deletePet
//           httpMethod: DELETE
//           uriTemplate: /api/pets/{id}
//
type HttpGeneric struct {
	// List of attributes that are generated when *any* of the Http
	// patterns match. This list typically includes the "api.service"
	// and "api.version" attributes.
	Attributes *istio_mixer_v1.Attributes `protobuf:"bytes,1,opt,name=attributes" json:"attributes,omitempty"`
	// List of Http patterns to match.
	Patterns []*HttpGenericPattern `protobuf:"bytes,2,rep,name=patterns" json:"patterns,omitempty"`
}

func (m *HttpGeneric) Reset()                    { *m = HttpGeneric{} }
func (*HttpGeneric) ProtoMessage()               {}
func (*HttpGeneric) Descriptor() ([]byte, []int) { return fileDescriptorHttpGeneric, []int{0} }

// HttpGenericPattern defines a single pattern to match against
// incoming Http requests. The per-pattern list of attributes is
// generated if both the http_method and uri_template match. In
// addition, the top-level list of attributes in the HttpAPISpec is also
// generated.
//
//     pattern:
//     - attributes
//         api.operation: doFooBar
//       httpMethod: GET
//       uriTemplate: /foo/bar
//
type HttpGenericPattern struct {
	// List of attributes that are generated if the Http request matches
	// the specified http_method and uri_template. This typically
	// includes the "api.operation" attribute.
	Attributes *istio_mixer_v1.Attributes `protobuf:"bytes,1,opt,name=attributes" json:"attributes,omitempty"`
	// Http request method to match against as defined by
	// [rfc7231](https://tools.ietf.org/html/rfc7231#page-21). For
	// example: GET, HEAD, POST, PUT, DELETE.
	HttpMethod string `protobuf:"bytes,2,opt,name=http_method,json=httpMethod,proto3" json:"http_method,omitempty"`
	// Types that are valid to be assigned to Pattern:
	//	*HttpGenericPattern_UriTemplate
	//	*HttpGenericPattern_Regex
	Pattern isHttpGenericPattern_Pattern `protobuf_oneof:"pattern"`
}

func (m *HttpGenericPattern) Reset()                    { *m = HttpGenericPattern{} }
func (*HttpGenericPattern) ProtoMessage()               {}
func (*HttpGenericPattern) Descriptor() ([]byte, []int) { return fileDescriptorHttpGeneric, []int{1} }

type isHttpGenericPattern_Pattern interface {
	isHttpGenericPattern_Pattern()
	MarshalTo([]byte) (int, error)
	Size() int
}

type HttpGenericPattern_UriTemplate struct {
	UriTemplate string `protobuf:"bytes,3,opt,name=uri_template,json=uriTemplate,proto3,oneof"`
}
type HttpGenericPattern_Regex struct {
	Regex string `protobuf:"bytes,4,opt,name=regex,proto3,oneof"`
}

func (*HttpGenericPattern_UriTemplate) isHttpGenericPattern_Pattern() {}
func (*HttpGenericPattern_Regex) isHttpGenericPattern_Pattern()       {}

func (m *HttpGenericPattern) GetPattern() isHttpGenericPattern_Pattern {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *HttpGenericPattern) GetUriTemplate() string {
	if x, ok := m.GetPattern().(*HttpGenericPattern_UriTemplate); ok {
		return x.UriTemplate
	}
	return ""
}

func (m *HttpGenericPattern) GetRegex() string {
	if x, ok := m.GetPattern().(*HttpGenericPattern_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpGenericPattern) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpGenericPattern_OneofMarshaler, _HttpGenericPattern_OneofUnmarshaler, _HttpGenericPattern_OneofSizer, []interface{}{
		(*HttpGenericPattern_UriTemplate)(nil),
		(*HttpGenericPattern_Regex)(nil),
	}
}

func _HttpGenericPattern_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpGenericPattern)
	// pattern
	switch x := m.Pattern.(type) {
	case *HttpGenericPattern_UriTemplate:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.UriTemplate)
	case *HttpGenericPattern_Regex:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Regex)
	case nil:
	default:
		return fmt.Errorf("HttpGenericPattern.Pattern has unexpected type %T", x)
	}
	return nil
}

func _HttpGenericPattern_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpGenericPattern)
	switch tag {
	case 3: // pattern.uri_template
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpGenericPattern_UriTemplate{x}
		return true, err
	case 4: // pattern.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpGenericPattern_Regex{x}
		return true, err
	default:
		return false, nil
	}
}

func _HttpGenericPattern_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpGenericPattern)
	// pattern
	switch x := m.Pattern.(type) {
	case *HttpGenericPattern_UriTemplate:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.UriTemplate)))
		n += len(x.UriTemplate)
	case *HttpGenericPattern_Regex:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*HttpGeneric)(nil), "istio.apis.v1alpha1.HttpGeneric")
	proto.RegisterType((*HttpGenericPattern)(nil), "istio.apis.v1alpha1.HttpGenericPattern")
}
func (m *HttpGeneric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpGeneric) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHttpGeneric(dAtA, i, uint64(m.Attributes.Size()))
		n1, err := m.Attributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Patterns) > 0 {
		for _, msg := range m.Patterns {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHttpGeneric(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HttpGenericPattern) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpGenericPattern) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHttpGeneric(dAtA, i, uint64(m.Attributes.Size()))
		n2, err := m.Attributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.HttpMethod) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHttpGeneric(dAtA, i, uint64(len(m.HttpMethod)))
		i += copy(dAtA[i:], m.HttpMethod)
	}
	if m.Pattern != nil {
		nn3, err := m.Pattern.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *HttpGenericPattern_UriTemplate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintHttpGeneric(dAtA, i, uint64(len(m.UriTemplate)))
	i += copy(dAtA[i:], m.UriTemplate)
	return i, nil
}
func (m *HttpGenericPattern_Regex) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintHttpGeneric(dAtA, i, uint64(len(m.Regex)))
	i += copy(dAtA[i:], m.Regex)
	return i, nil
}
func encodeVarintHttpGeneric(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HttpGeneric) Size() (n int) {
	var l int
	_ = l
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovHttpGeneric(uint64(l))
	}
	if len(m.Patterns) > 0 {
		for _, e := range m.Patterns {
			l = e.Size()
			n += 1 + l + sovHttpGeneric(uint64(l))
		}
	}
	return n
}

func (m *HttpGenericPattern) Size() (n int) {
	var l int
	_ = l
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovHttpGeneric(uint64(l))
	}
	l = len(m.HttpMethod)
	if l > 0 {
		n += 1 + l + sovHttpGeneric(uint64(l))
	}
	if m.Pattern != nil {
		n += m.Pattern.Size()
	}
	return n
}

func (m *HttpGenericPattern_UriTemplate) Size() (n int) {
	var l int
	_ = l
	l = len(m.UriTemplate)
	n += 1 + l + sovHttpGeneric(uint64(l))
	return n
}
func (m *HttpGenericPattern_Regex) Size() (n int) {
	var l int
	_ = l
	l = len(m.Regex)
	n += 1 + l + sovHttpGeneric(uint64(l))
	return n
}

func sovHttpGeneric(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHttpGeneric(x uint64) (n int) {
	return sovHttpGeneric(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HttpGeneric) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpGeneric{`,
		`Attributes:` + strings.Replace(fmt.Sprintf("%v", this.Attributes), "Attributes", "istio_mixer_v1.Attributes", 1) + `,`,
		`Patterns:` + strings.Replace(fmt.Sprintf("%v", this.Patterns), "HttpGenericPattern", "HttpGenericPattern", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpGenericPattern) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpGenericPattern{`,
		`Attributes:` + strings.Replace(fmt.Sprintf("%v", this.Attributes), "Attributes", "istio_mixer_v1.Attributes", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`Pattern:` + fmt.Sprintf("%v", this.Pattern) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpGenericPattern_UriTemplate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpGenericPattern_UriTemplate{`,
		`UriTemplate:` + fmt.Sprintf("%v", this.UriTemplate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpGenericPattern_Regex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpGenericPattern_Regex{`,
		`Regex:` + fmt.Sprintf("%v", this.Regex) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHttpGeneric(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HttpGeneric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpGeneric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpGeneric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpGeneric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpGeneric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHttpGeneric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &istio_mixer_v1.Attributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patterns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpGeneric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHttpGeneric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patterns = append(m.Patterns, &HttpGenericPattern{})
			if err := m.Patterns[len(m.Patterns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpGeneric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpGeneric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpGenericPattern) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpGeneric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpGenericPattern: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpGenericPattern: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpGeneric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHttpGeneric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &istio_mixer_v1.Attributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpGeneric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpGeneric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriTemplate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpGeneric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpGeneric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = &HttpGenericPattern_UriTemplate{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpGeneric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpGeneric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = &HttpGenericPattern_Regex{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpGeneric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpGeneric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHttpGeneric(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHttpGeneric
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttpGeneric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttpGeneric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHttpGeneric
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHttpGeneric
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHttpGeneric(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHttpGeneric = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHttpGeneric   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("apis/v1alpha1/http_generic.proto", fileDescriptorHttpGeneric) }

var fileDescriptorHttpGeneric = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xed, 0xf6, 0xfb, 0x57, 0xe7, 0x9b, 0x02, 0x42, 0x21, 0x83, 0x89, 0xca, 0x40, 0x27,
	0x47, 0x29, 0x1b, 0x1b, 0x65, 0xa0, 0x03, 0x48, 0x28, 0x62, 0x62, 0xa9, 0x5c, 0xb0, 0x52, 0x4b,
	0x6d, 0x6d, 0x39, 0xb7, 0x55, 0x47, 0x9e, 0x00, 0xf1, 0x18, 0xbc, 0x02, 0x6f, 0xd0, 0xb1, 0x23,
	0x23, 0x31, 0x0b, 0x63, 0x1f, 0x01, 0x25, 0x2e, 0xa5, 0x08, 0x36, 0x36, 0xfb, 0x9c, 0x9f, 0xef,
	0x3d, 0xbe, 0x97, 0x44, 0x5c, 0xcb, 0x3c, 0x9e, 0x26, 0x7c, 0xa8, 0x07, 0x3c, 0x89, 0x07, 0x00,
	0xba, 0x97, 0x89, 0xb1, 0x30, 0xf2, 0x9a, 0x69, 0xa3, 0x40, 0xf9, 0x5b, 0x32, 0x07, 0xa9, 0x58,
	0xc9, 0xb1, 0x77, 0x2e, 0xdc, 0xce, 0x54, 0xa6, 0x2a, 0x3f, 0x2e, 0x4f, 0x0e, 0x0d, 0x77, 0x47,
	0x72, 0x26, 0x4c, 0x3c, 0x4d, 0x62, 0x0e, 0x60, 0x64, 0x7f, 0x02, 0x22, 0x77, 0x56, 0xf3, 0x0e,
	0x13, 0xaf, 0x0b, 0xa0, 0x4f, 0x5d, 0x6d, 0xff, 0x88, 0x90, 0x0f, 0x26, 0xc0, 0x11, 0x6e, 0x79,
	0xed, 0x90, 0xb9, 0x56, 0x55, 0x15, 0x36, 0x4d, 0xd8, 0xf1, 0x9a, 0x48, 0x37, 0x68, 0xff, 0x84,
	0xfc, 0xd3, 0x1c, 0x40, 0x98, 0x71, 0x1e, 0xd4, 0xa2, 0x7a, 0xcb, 0x6b, 0x1f, 0xb0, 0x6f, 0x42,
	0xb2, 0x8d, 0x7e, 0x17, 0x8e, 0x4f, 0xd7, 0x0f, 0x9b, 0x8f, 0x98, 0xf8, 0x5f, 0x81, 0x1f, 0xe5,
	0xda, 0x23, 0x5e, 0x35, 0xbf, 0x91, 0x80, 0x81, 0xba, 0x09, 0x6a, 0x11, 0x6e, 0x35, 0x52, 0x52,
	0x4a, 0xe7, 0x95, 0xe2, 0xef, 0x93, 0xff, 0x13, 0x23, 0x7b, 0x20, 0x46, 0x7a, 0xc8, 0x41, 0x04,
	0xf5, 0x92, 0xe8, 0xa2, 0xd4, 0x9b, 0x18, 0x79, 0xb9, 0x12, 0xfd, 0x1d, 0xf2, 0xdb, 0x88, 0x4c,
	0xcc, 0x82, 0x5f, 0x2b, 0xd7, 0x5d, 0x3b, 0x0d, 0xf2, 0x77, 0x15, 0xbe, 0x73, 0x36, 0x2f, 0x28,
	0x5a, 0x14, 0x14, 0x3d, 0x15, 0x14, 0x2d, 0x0b, 0x8a, 0x6e, 0x2d, 0xc5, 0x0f, 0x96, 0xa2, 0xb9,
	0xa5, 0x78, 0x61, 0x29, 0x7e, 0xb6, 0x14, 0xbf, 0x5a, 0x8a, 0x96, 0x96, 0xe2, 0xfb, 0x17, 0x8a,
	0xae, 0x42, 0xf7, 0x03, 0xa9, 0x62, 0xae, 0x65, 0xfc, 0x69, 0xe7, 0xfd, 0x3f, 0xd5, 0x86, 0x0e,
	0xdf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x37, 0x09, 0xd4, 0x0b, 0x02, 0x00, 0x00,
}
