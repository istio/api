// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.apis.v1alpha1;

option go_package="istio.io/api/apis/v1alpha1";

import "gogoproto/gogo.proto";
import "mixer/v1/attributes.proto"; // TODO - promote to a common type?

// TODO - promote to a common type, or create a new type against the
// same concept?
// import "routing/v1alpha2/route_rule.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// HttpAPISpec defines the canonical configuration for generating
// API-related attributes from Http requests based on the method and
// uri templated path matches. It is sufficient for defining the API
// surface of a service for the purposes of API attribute
// generation. It is not intended to represent auth, quota,
// documentation, or other information commonly found in other API
// specifications, e.g. OpenAPI.
//
// Existing standards that define operations (or methods) in terms of
// Http methods and paths can be normalized to this format for use in
// Istio. For example, a simple petstore API described by OpenAPIv2
// [here](https://github.com/googleapis/gnostic/blob/master/examples/v2.0/yaml/petstore-simple.yaml)
// can be represented with the following HttpAPISpec.
//
//     apiVersion: apis.istio.io/v1alpha1
//     kind: HttpAPI
//     metadata:
//       name: petstore
//       namespace: default
//     spec:
//       generic:
//         attributes:
//           api.service: petstore.swagger.io
//           api.version: 1.0.0
//         patterns:
//         - attributes:
//             api.operation: findPets
//           httpMethod: GET
//           uriTemplate: /api/pets
//         - attributes:
//             api.operation: addPet
//           httpMethod: POST
//           uriTemplate: /api/pets
//         - attributes:
//             api.operation: findPetById
//           httpMethod: GET
//           uriTemplate: /api/pets/{id}
//         - attributes:
//             api.operation: deletePet
//           httpMethod: DELETE
//           uriTemplate: /api/pets/{id}
//
message HttpGeneric {
  // List of attributes that are generated when *any* of the Http
  // patterns match. This list typically includes the "api.service"
  // and "api.version" attributes.
  mixer.v1.Attributes attributes = 1;

  // List of Http patterns to match.
  repeated HttpGenericPattern patterns = 2;
}

// HttpGenericPattern defines a single pattern to match against
// incoming Http requests. The per-pattern list of attributes is
// generated if both the http_method and uri_template match. In
// addition, the top-level list of attributes in the HttpAPISpec is also
// generated.
//
//     pattern:
//     - attributes
//         api.operation: doFooBar
//       httpMethod: GET
//       uriTemplate: /foo/bar
//
message HttpGenericPattern {
  // List of attributes that are generated if the Http request matches
  // the specified http_method and uri_template. This typically
  // includes the "api.operation" attribute.
  mixer.v1.Attributes attributes = 1;

  // Http request method to match against as defined by
  // [rfc7231](https://tools.ietf.org/html/rfc7231#page-21). For
  // example: GET, HEAD, POST, PUT, DELETE.
  string http_method = 2;

  oneof pattern {
    // URI template to match against as defined by
    // [rfc6570](https://tools.ietf.org/html/rfc6570). For example, the
    // following are valid URI templates:
    //
    //     /pets
    //     /pets/{id}
    //     /dictionary/{term:1}/{term}
    //     /search{?q*,lang}
    //
    string uri_template = 3;

    // EXPERIMENTAL:
    //
    // ecmascript style regex-based match as defined by
    // [EDCA-262](http://en.cppreference.com/w/cpp/regex/ecmascript). For
    // example,
    //
    //     "^/pets/(.*?)?"
    //
    string regex = 4;
  }
}
