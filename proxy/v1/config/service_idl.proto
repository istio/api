// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.proxy.v1.config;

// Specifies service IDL to generate Istio attributes defined in
//  https://goo.gl/3WTUfW
//
// This service IDL will be generated by istioctl from other service IDL
// formats, such as OpenAPI.
//
// Example1:  A single API HTTP service
//
//     spec:
//       destination:
//         name: foo-service
//       service:
//         - attributes
//            api.service: FOO
//            api.version: 0.2.7
//         - patterns:
//            get: /books/{*}
//            api.operation: get_book_with_id
//         - patterns:
//            post: /books
//            api.operation: create_a new_book
//
// Example2:  Two APIs HTTP service with different prefix /foo and /bar.
//
//     spec:
//       destination:
//         name: foo-service
//       service:
//         - patterns:
//            get: /foo/books/{*}
//            api.operation: get_book_with_id
//            api.service: FOO
//            api.version: 0.2.7
//         - patterns:
//            post: /foo/books
//            api.operation: create_a new_book
//            api.service: FOO
//            api.version: 0.2.7
//         - patterns:
//            get: /bar/books/{*}
//            api.operation: get_book_with_id
//            api.service: BAR
//            api.version: 0.3.1
//         - patterns:
//            post: /bar/books
//            api.operation: create_a new_book
//            api.service: BAR
//            api.version: 0.3.1
//
// Example3:  A gRPC service
//
//     spec:
//       destination:
//         name: foo-service
//       service:
//         - attributes
//            api.service: istio.mixer
//            api.version: 0.2.7
//         - patterns:
//            post: /istio.mixer.v1/Check
//            api.operation: istio.mixer.v1.Check
//         - patterns:
//            post: /istio.mixer.v1/Report
//            api.operation: istio.mixer.v1.Report
//
//
// Specifies service IDL with service destination.
message ServiceIDLSpec {
  // REQUIRED: Destination uniquely identifies the destination service
  // targeted for this quota spec.
  // For Ingress proxy, it is the external DNS name for the mesh.
  // For sidecar porxy, it is the backend service of the proxy.
  IstioService destination = 1;

  // Service IDL to generate Istio attributes dynamically from requests.
  ServiceIDL service = 2;
}

// Determines the API attributes to be generated based on HTTP patterns.
message ServiceIDL {
  // global attributes for all requests
  map<string, string> attributes = 1;

  // A list of HTTP paterns to match.
  // Either none or one should be matched.
  repeated HttpPattern patterns = 2;
}

// Specifies a HTTP pattern based on path and method.
message HttpPattern {
  // attributes that should be generated if the pattern is matched
  map<string, string> attributes = 1;

  // Determines the path pattern to match. This pattern can be
  // used with any of the {get|put|post|delete|patch} methods.
  //
  // For gRPC, it always uses "post" method. Its path will be
  // /service_name/method. So the "pattern" will be:
  // post: /service_name/method
  oneof pattern {

    // Used for listing and getting information about resources.
    string get = 2;

    // Used for updating a resource.
    string put = 3;

    // Used for creating a resource.
    string post = 4;

    // Used for deleting a resource.
    string delete = 5;

    // Used for updating a resource.
    string patch = 6;
  }		      
}

