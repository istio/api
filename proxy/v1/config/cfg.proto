// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

/// Glossary & concepts
///
/// Service is a unit of an application with a unique name that other services
/// use to refer to the functionality being called. Service instances are
/// pods/VMs/containers that implement the service.
///
/// Service versions - In a continuous deployment scenario, for a given service,
/// there can be multiple sets of instances running potentially different
/// variants of the application binary. These variants are not necessarily
/// different API versions. They could be iterative changes to the same service,
/// deployed in different environments (prod, staging, dev, etc.). Common
/// scenarios where this occurs include A/B testing, canary rollouts, etc. The
/// choice of a particular version can be decided based on various criterion
/// (headers, url, etc.) and/or by weights assigned to each version.  Each
/// service has a default version consisting of all its instances.
///
/// Source - downstream client (browser or another service) calling the
/// proxy/sidecar (typically to reach another service).
///
/// Destination - The remote upstream service to which the proxy/sidecar is
/// talking to, on behalf of the source service. There can be one or more
/// service versions for a given service (see the discussion on versions above).
/// The proxy would choose the version based on various routing rules.
///
/// Applications address only the destination service without knowledge of
/// individual service versions. The actual choice of the version is determined
/// by the proxy, enabling the application code to decouple itself from the
/// evolution of dependent services.
///
/// Most fields in this configuration are optional and fallback to sensible
/// defaults. Mandatory fields contain the word REQUIRED in the
/// description.

syntax = "proto3";

package istio.proxy.v1alpha.config;

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "gogoproto/gogo.proto";

option go_package = "config";
option (gogoproto.compare_all) = true;

///@exclude Proxy level global configurations go here
message ProxyMeshConfig {
}

/// DestinationPolicy declares policies that determine how to handle traffic for a
/// destination service (load balancing policies, failure recovery policies such
/// as timeouts, retries, circuit breakers, etc).  Policies are applicable per
/// individual service versions. ONLY ONE policy can be defined per service version.
///
/// Note that these policies are enforced on client-side connections or
/// requests, i.e., enforced when the service is opening a
/// connection/sending a request via the proxy to the destination.
message DestinationPolicy {
  /// REQUIRED. Service name for which the service version is defined. The
  /// value MUST be a fully-qualified domain name,
  /// e.g. "my-service.default.svc.cluster.local".
  string destination = 1;

  /// Service version destination identifier for the destination service.
  /// The identifier is qualified by the destination service name, e.g. version
  /// "env=prod" in "my-service.default.svc.cluster.local".
  // N.B. The map is used instead of pstruct due to lack of serialization support
  // in golang protobuf library (see https://github.com/golang/protobuf/pull/208)
  map<string, string> tags = 2;

  /// Load balancing policy
  LoadBalancing load_balancing = 3;

  /// Circuit breaker policy
  CircuitBreaker circuit_breaker = 4;

  /// Other custom policy implementations
  google.protobuf.Any custom = 5;
}

/// Route rule provides a custom routing policy based on the source and
/// destination service versions and connection/request metadata.  The rule must
/// provide a set of conditions for each protocol (TCP, UDP, HTTP) that the
/// destination service exposes on its ports. The rule applies only to the ports
/// on the destination service for which it provides protocol-specific match
/// condition, e.g. if the rule does not specify TCP condition, the rule does
/// not apply to TCP traffic towards the destination service.
message RouteRule {
  /// REQUIRED: Destination uniquely identifies the destination associated
  /// with this routing rule.  This field is applicable for hostname-based
  /// resolution for HTTP traffic as well as IP-based resolution for
  /// TCP/UDP traffic. The value MUST be a fully-qualified domain name,
  /// e.g. "my-service.default.svc.cluster.local".
  string destination = 1;

  /// Precedence is used to disambiguate the order of application of rules
  /// for the same destination service. A higher number takes priority. If
  /// not specified, the value is assumed to be 0.  The order of
  /// application for rules with the same precedence is unspecified.
  int32 precedence = 2;

  /// Optional match condtions to be satisfied for the route rule to be
  /// activated. If match is omitted, the route rule applies only to HTTP
  /// traffic.
  MatchCondition match = 3;

  /// Each routing rule is associated with one or more service version destinations
  /// (see glossary in beginning of document). Weights associated with the service
  /// version determine the proportion of traffic it receives.
  repeated DestinationWeight route = 4;

  /// Timeout policy for HTTP requests.
  HTTPTimeout http_req_timeout = 5;

  /// Retry policy for HTTP requests.
  HTTPRetry http_req_retries = 6;

  ///L7 fault injection policy applies to Http traffic
  HTTPFaultInjection http_fault = 7;

  ///@exclude L4 fault injection policy applies to Tcp/Udp (not Http) traffic
  L4FaultInjection l4_fault = 8;
}

/// Match condition specifies a set of criterion to be met in order for the
/// route rule to be applied to the connection or HTTP request.  The
/// condition provides distinct set of conditions for each protocol with
/// the intention that conditions apply only to the service ports that
/// match the protocol.
message MatchCondition {
  /// Identifies the service initiating a connection or a request by its
  /// name. If specified, name MUST BE a fully qualified domain name such
  /// as foo.bar.com
  string source = 1;

  /// Identifies the source service version. The identifier is interpreted
  /// by the platform to match a service version for the source service.
  // N.B. The map is used instead of pstruct due to lack of serialization support
  // in golang protobuf library (see https://github.com/golang/protobuf/pull/208)
  map<string, string> source_tags = 2;

  /// Set of layer 4 match conditions based on the IP ranges. INCOMPLETE implementation
  L4MatchAttributes tcp = 3;

  // Set of layer 4 match conditions based on the IP ranges
  L4MatchAttributes udp = 4;

  /// Set of HTTP match conditions based on HTTP/1.1, HTTP/2, GRPC request metadata,
  /// such as "uri", "scheme", "authority".
  /// The header keys are case-insensitive.
  map<string, StringMatch> http_headers = 5;
}

/// Each routing rule is associated with one or more service versions (see
/// glossary in beginning of document). Weights associated with the version
/// determine the proportion of traffic it receives.
message DestinationWeight {
  /// Destination uniquely identifies the destination service. If not
  /// specified, the value is inherited from the parent route rule. Value
  /// must be in fully qualified domain name format (e.g.,
  /// "my-service.default.svc.cluster.local").
  string destination = 1;

  /// Service version identifier for the destination service.
  // N.B. The map is used instead of pstruct due to lack of serialization support
  // in golang protobuf library (see https://github.com/golang/protobuf/pull/208)
  map<string, string> tags = 2;

  /// The proportion of traffic to be forwarded to the service version. Max
  /// is 100. Sum of weights across destinations should add up to 100. If
  /// there is only destination in a rule, the weight value is assumed to
  /// be 100.
  int32 weight = 3;
}

/// L4 connection match attributes. Note that L4 connection matching
/// support is incomplete.
message L4MatchAttributes {
  /// IPv4 or IPv6 ip address with optional subnet. E.g., a.b.c.d/xx form or
  /// just a.b.c.d
  repeated string source_subnet = 1;

  /// IPv4 or IPv6 ip address of destination with optional subnet.
  /// E.g., a.b.c.d/xx form or just a.b.c.d. This is only valid when the destination
  /// service has several IPs and the application explicitly specifies a particular IP.
  repeated string destination_subnet = 2;
}

/// Describes how to matches a given string (exact match, prefix-based
/// match or posix style regex based match). Match is case-sensitive. NOTE:
/// use of regex depends on the specific proxy implementation.
message StringMatch {
  oneof match_type {
    string exact = 1;
    string prefix = 2;
    string regex = 3;
  }
}

/// Load balancing policy to use when forwarding traffic.
message LoadBalancing {
  /// Common load balancing policies supported in Istio service mesh.
  enum SimpleLBPolicy {
    ROUND_ROBIN = 0;
    LEAST_CONN = 1;
    RANDOM = 2;
    // Envoy has IP_HASH, but requires a HTTP header name to hash on
  }
  oneof lb_policy {
    SimpleLBPolicy name = 1;
    ///Custom LB policy implementations
    google.protobuf.Any custom = 2;
  }
}

/// Request timeout: wait time until a response is received. Does not
/// indicate the time for the entire response to arrive.
message HTTPTimeout {
  message SimpleTimeoutPolicy {
    /// Timeout for a HTTP request. Includes retries as well. Unit is in
    /// floating point seconds. Default 15 seconds. Specified in
    /// seconds.nanoseconds format
    double timeout_seconds = 1;
    /// Downstream service could specify timeout via Http header to the
    /// proxy, if the proxy supports such a feature.
    string override_header_name = 2;
  }
  oneof timeout_policy {
    SimpleTimeoutPolicy simple_timeout = 1;
    /// For proxies that support custom timeout policies
    google.protobuf.Any custom = 2;
  }
}

/// Retry policy to use when a request fails.
message HTTPRetry {
  message SimpleRetryPolicy {
    /// Number of retries for a given request. The interval between retries
    /// will be determined automatically (25ms+). Actual number of retries
    /// attempted depends on the http_timeout
    int32 attempts = 1;
    /// Downstream Service could specify retry attempts via Http header to
    /// the proxy, if the proxy supports such a feature.
    string override_header_name = 2;
  }
  oneof retry_policy {
    SimpleRetryPolicy simple_retry = 1;
    /// For proxies that support custom retry policies
    google.protobuf.Any custom = 2;
  }
}

/// Circuit breaker configuration.
message CircuitBreaker {
  message SimpleCircuitBreakerPolicy {
    /// Maximum number of connections to a backend.
    int32 max_connections = 1;

    /// Maximum number of pending requests to a backend.
    int32 http_max_pending_requests = 2;

    /// Maximum number of requests to a backend.
    int32 http_max_requests = 3;

    /// Minimum time the circuit will be closed. In floating point seconds format.
    double sleep_window_seconds = 4;

    /// Number of 5XX errors before circuit is opened.
    int32 http_consecutive_errors = 5;

    /// Interval for checking state of hystrix circuit.
    double http_detection_interval_seconds = 6;

    /// Maximum number of requests per connection to a backend.
    int32 http_max_requests_per_connection = 7;

    /// Maximum % of hosts in the destination service that can be ejected due to circuit breaking. Defaults to 10%.
    int32 http_max_ejection_percent = 8;
  }
  oneof cb_policy {
    SimpleCircuitBreakerPolicy simple_cb = 1;
    /// For proxies that support custom circuit breaker policies.
    google.protobuf.Any custom = 2;
  }
}

/// Faults can be injected into the API calls by the proxy, for testing the
/// failure recovery capabilities of downstream services.  Faults include
/// aborting the Http request from downstream service, delaying the proxying of
/// requests, or both. MUST specify either delay or abort or both.
message HTTPFaultInjection {
  /// Delay requests before forwarding, emulating various failures such as
  /// network issues, overloaded upstream service, etc.
  Delay delay = 1;

  /// Abort Http request attempts and return error codes back to downstream
  /// service, giving the impression that the upstream service is faulty.
  /// N.B. Both delay and abort can be specified simultaneously. Delay and
  /// Abort are independent of one another. For e.g., if Delay is restricted
  /// to 5% of requests while Abort is restricted to 10% of requests, the
  /// 10% in abort specification applies to all requests directed to the
  /// service. It may be the case that one or more requests being aborted
  /// were also delayed.
  Abort abort = 2;

  /// MUST specify either a fixed delay or exponential delay. Exponential
  /// delay is unsupported at the moment.
  message Delay {
    /// percentage of requests on which the delay will be injected
    float percent = 1;
    oneof http_delay_type {
      /// Add a fixed delay before forwarding the request. Delay duration in seconds.nanoseconds
      double fixed_delay_seconds = 2;
      /// Add a delay (based on an exponential function) before forwarding
      /// the request. mean delay needed to derive the exponential delay
      /// values
      double exponential_delay_seconds = 3;
    }
    // Specify delay duration as part of Http request.
    // TODO: The semantics and syntax of the headers is undefined.
    string override_header_name = 4;
  }

  /// Abort Http request attempts and return error codes back to downstream
  /// service.
  message Abort {
    /// percentage of requests to be aborted with the error code provided.
    float percent = 1;
    /// Error code to use to abort the Http request. Requests can be aborted
    /// either with Http/1.1 status codes | http2 error codes or gRPC status
    /// codes. Only http_status based errors are supported at the moment.
    oneof error_type {
      string grpc_status = 2;
      string http2_error = 3;
      int32 http_status = 4;
    }
    // Specify abort code as part of Http request.
    // TODO: The semantics and syntax of the headers is undefined.
    string override_header_name = 5;
  }
}

///@exclude Faults can be injected into the connections from downstream by the
/// proxy, for testing the failure recovery capabilities of downstream
/// services.  Faults include aborting the connection from downstream
/// service, delaying the proxying of connection to the destination
/// service, and throttling the bandwidth of the connection (either
/// end). Bandwidth throttling for failure testing should not be confused
/// with the rate limiting policy enforcement provided by the Mixer
/// component. L4 fault injection is not supported at the moment.
message L4FaultInjection {
  /// Unlike Http services, we have very little context for raw Tcp|Udp
  /// connections. We could throttle bandwidth of the connections (slow down
  /// the connection) and/or abruptly reset (terminate) the Tcp connection
  /// after it has been established.

  /// We first throttle (if set) and then terminate the connection.
  Throttle throttle = 1;
  Terminate terminate = 2;

  /// Bandwidth throttling for Tcp and Udp connections
  message Throttle {
    /// percentage of connections to throttle.
    float percent = 1;
    /// bandwidth limit in "bits" per second between downstream and proxy
    int64 downstream_limit_bps = 2;
    /// bandwidth limits in "bits" per second between proxy and upstream
    int64 upstream_limit_bps = 3;

    oneof throttle_after {
      /// Wait for X seconds after the connection is established, before
      /// starting bandwidth throttling. This would allow us to inject fault
      /// after the application protocol (e.g., MySQL) has had time to
      /// establish sessions/whatever handshake necessary.
      double throttle_after_seconds = 4;

      /// Alternatively, we could wait for a certain number of bytes to be
      /// transferred to upstream before throttling the bandwidth.
      double throttle_after_bytes = 5;
    }

    /// Stop throttling after the given duration. If not set, the connection
    /// will be throttled for its lifetime.
    google.protobuf.DoubleValue throttle_for_seconds = 6;
  }

  /// Abruptly reset (terminate) the Tcp connection after it has been
  /// established, emulating remote server crash or link failure.
  message Terminate {
    /// percentage of established Tcp connections to be terminated/reset
    float percent = 1;

    /// Wait for X seconds after the connection is established, before
    /// terminating the connection. Set to 0 to terminate immediately on
    /// connection establishment.

    // TODO: see if it makes sense to create a generic Duration type to
    // express time interval related configs.
    double terminate_after_seconds = 2;
  }
}
