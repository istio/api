// Copyright 2016 IBM Corporation
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.proxy.v1.config;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// AspectRules are intent based
message AspectRule {
  // selector is an attributes based predicate.
  // attr1 == "20" && attr2 == "30"
  string selector = 1;
  // The following aspects apply when the selector predicate evaluates to True
  repeated Aspect aspects = 2;
  // Nested aspect Rule is evaluated if selector predicate evaluates to True
  repeated AspectRule rules = 3;
}


// Aspect is intent based. It specifies the intent "kind"
// following example specifies that the user would like to collect
// response_time with 3 labels (src_consumer_id, target_response_status_code,
// target_service_name)
//
// The Input section tells if target_service_name is not available it can be
// computed using the given expression
//
//      kind: istio/metrics
//      params:
//        metrics:
//        - name: response_time     # What to call this metric outbound.
//          value: metric_response_time  # from wellknown vocabulary
//          metric_kind: DELTA
//          labels:
//          - key: src_consumer_id
//          - key: target_response_status_code
//          - key: target_service_name
//      Inputs:
//           Attr.target_service_name: target_service_name || target_service_id
message Aspect {
  string kind = 1;
  string adapter = 2; // optional, allows specifying an adapter
  // maps from isio Attribute space to aspect.Input proto defined
  // by the aspect
  map<string, string> inputs = 3;
  // Struct representation of a proto defined by the aspect
  google.protobuf.Struct params = 4;
}

// Encapsulates the routing related configurations for the proxy
message RoutingConfig {
  string subject = 1;
  string version = 2;
  repeated RoutingRule rules = 3;
}

// A single routing rule
message RoutingRule {
  string selector = 1; // expression based on attributes
  Aspect aspect = 2; // Aspect.kind == "routing"
  repeated AspectRule rules = 3;
}

message httpHeader {
  string name = 1;
  string value = 2;
}

message dstServiceSpec {
  message lbPolicy {
    string name = 1;
    google.protobuf.Any customAttributes=2;
  }
  
  message connectTimeout {
    uint32 duration = 1;
    string overrideHeaderName = 2;
  }
  
  message readTimeout {
    uint32 duration = 1;
    string overrideHeaderName = 2;
  }
  
  message writeTimeout {
    uint32 duration = 1;
    string overrideHeaderName = 2;
  }
  
  message retriesSpec {
    uint32 attempts = 1;
    string overrideHeaderName = 2;
    google.protobuf.Any customAttributes=3;
  }
  
  message circuitBreakerSpec {
    uint32 successThreshold = 1;
    uint32 failureThreshold = 2;
    uint32 resetTimeout = 3;
    google.protobuf.Any customAttributes=4;
  }
  
  repeated string dstLabels = 1;
  repeated string dstHosts = 2;
  lbPolicy lbpolicy = 3;
  connectTimeout ctimeout = 4;
  readTimeout rtimeout = 5;
  writeTimeout wtimeout = 6;
  retriesSpec retries = 7;
  circuitBreakerSpec circuitbreaker = 8;
  string healthCheckURL = 9;
}

message faultSpec {
  message abort {
    uint32 percent = 1;
    string grpcStatus = 2;
    string http2Error = 3;
    uint32 httpStatus = 4;
    string overrideHeaderName = 5;
  }
  message httpFixedDelay {
    uint32 percent = 1;
    uint32 duration = 2;
    string overrideHeaderName = 3;
  }
  message httpExponentialDelay {
    uint32 percent = 1;
    uint32 meanDuration = 2;
  }
  message tcpBandwidthThrottle {
    uint32 percent = 1;
    uint32 bandwidth = 2;
  }
  message delay {
    string type = 1;
    oneof delay_type {
      httpFixedDelay fixeddelay=2;
      httpExponentialDelay expdelay=3;
      tcpBandwidthThrottle tcpdelay=4;
    }
  }
  repeated httpHeader headers = 1;
  abort abortSpec = 2;
  delay delaySpec = 3;
}

message matchSpec {
  message dstMatch {
    string proto = 1;
    uint32 port = 2;
    string httpPath = 3;
    string httpHost = 4;
  }
  repeated httpHeader headers = 1;
  repeated string srcLabels = 2;
  dstMatch dstService = 3;
}

message routeSpec {
  dstServiceSpec dstServiceVersion = 1;
  uint32 weight = 2;
}

message routingRule {
  matchSpec condition = 1;
  repeated routeSpec backendVersions = 2;
  faultSpec fault = 3;
}
