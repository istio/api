// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.proxy.v1.config;

import "mixer/v1/attribute_match.proto";
import "proxy/v1/config/route_rule.proto";

// Specifies runtime quota rules.
//  * Uses Istio attributes to match individual requests
//  * Specifies list of quotas to use for matched requests.
//
// Example1:
// Charge "request_count" quota with 1 amount for all requests.
//
//     spec:
//       destination:
//         name: foo-service
//       config:
//         - rules
//           - quotas:
//               quota: request_count
//               amount: 1
//
// Example2:
// For HTTP POST requests with path are prefixed with /books or
// api.operation is create_books, charge two quotas:
// * write_count of 1 amount
// *request_count of 5 amount.
//
//     spec:
//       destination:
//         name: foo-service
//       config:
//         - rules:
//           - match:
//               clause:
//                 request.headers:
//                   string_map_prefix:
//                     sub_key: path
//                     value: /books
//                 request.http_method:
//                   string_exact: POST
//           - match:
//               clause:
//                 api.operation:
//                   string_exact: create_books
//           - quotas:
//               quota: write_count
//               amount: 1
//           - quotas:
//               quota: request_count
//               amount: 5

// Specifies quota runtime specification stored in CRD.
message QuotaSpec {
  // REQUIRED: Destination uniquely identifies the destination service
  // targeted for this quota spec.
  // For Ingress proxy, it is the external DNS name for the mesh.
  // For sidecar porxy, it is the backend service of the proxy.
  IstioService destination = 1;

  // Quota config.
  QuotaConfig config = 2;
}

// Determines the quotas used for individual requests.
message QuotaConfig {
  // A list of Quota rules.
  repeated QuotaRule rules = 1;
}

// Specifies a rule with list of matches and list of quotas.
// If any clause matched, the list of quotas will be used.
message QuotaRule {
  // If empty, match all request.
  // If any of match is true, it is matched.
  repeated istio.mixer.v1.AttributeMatch match = 1;

  // The list of quotas to charge.
  repeated Quota quotas = 2;
}

// Specifies a quota to use with quota name and amount.
message Quota {
  // The quota name to charge
  string quota = 1;

  // The quota amount to charge
  int64  amount = 2;
}

