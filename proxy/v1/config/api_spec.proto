// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.proxy.v1.config;

// APISpec defines the canonical configuration for generating API
// related attributes from HTTP request based on the method and uri
// templated path matches. It is sufficient for defining the API
// surface of a service for the purposes of API attribute
// generation. It is not intended to represent auth, quota,
// documentation, or other information commonly found in other API
// specification, e.g. OpenAPI.
//
// Existing standards that define operations (or methods) in terms of
// HTTP methods and paths can be normalized to this format for use in
// Istio. For example, a simple petstore api described by OpenAPIv2
// [here](https://github.com/googleapis/gnostic/blob/master/examples/v2.0/yaml/petstore-simple.yaml)
// can be represented with the following APISpec.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: APISpec
//     metadata:
//       name: petstore
//     spec:
//       attributes:
//         api.service: petstore.swagger.io
//         api.version: 1.0.0
//       patterns:
//       - attributes:
//           api.operation: findPets
//         httpMethod: get
//         uriTemplate: /api/pets
//       - attributes:
//           api.operation: addPet
//         httpMethod: post
//         uriTemplate: /api/pets
//       - attributes:
//           api.operation: findPetById
//         httpMethod: get
//         uriTemplate: /api/pets/{id}
//       - attributes:
//           api.operation: deletePet
//         httpMethod: delete
//         uriTemplate: /api/pets/{id}
//
message APISpec {
  // List of attributes that are generated when *any* of the HTTP
  // patterns match. This list typically includes the "api.service"
  // and "api.version".
  UncompressedAttributes attributes = 1;

  // List of HTTP patterns to match.
  repeated APISpecHTTPPattern patterns = 2;
}

// APISpecHTTPPattern defines a single pattern to match against
// incoming HTTP requests. The per-pattern list of attributes is
// generated if both the http_method and uri_template match. In
// addition, the top-level list of attributes in the APISpec is also
// generated.
message APISpecHTTPPattern {
  // List of attributes that are generated if the HTTP request matches
  // the specified http_method and uri_template. This typically
  // includes the "api.operation".
  repeated UncompressedAttributes attributes = 1;

  // HTTP request method to match against. Defined by
  // https://tools.ietf.org/html/rfc7231#page-21.
  string http_method = 2;

  // URI template to match against. Defined by
  // https://tools.ietf.org/html/rfc6570.
  string uri_template = 3;
}

// APISpecBinding defines the binding between APISpecs and one or more
// IstioService.
message APISpecBinding {
  // REQUIRED. One or more services to map the listed APISpec onto.
  repeated IstioService services = 1;

  message APISpecReference {
    // REQUIRED. The short name of the APISpec. This is the resource
    // name defined by the metadata name field.
    string name = 1;

    // Optional namespace of the APISpec. Defaults to the value of the
    // metadata namespace field.
    string namespace = 2;
  }

  // REQUIRED. One or more APISpec references that should be mapped to
  // the specified service(s). The aggregate collection of match
  // conditions defined in the APISpecs should not overlap.
  repeated APISpecReference api_specs = 2;
}
