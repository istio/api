// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "proxy/v1/config/route_rule.proto";

package istio.proxy.v1.config;

// Gateway describes a load balancer operating within the mesh that bridges
// traffic across network boundaries. Supported use-cases include
// ingress, egress and middle proxies within the mesh.

// The specification describes a set of ports that are exposed, the protocols
// allowed on each port and TLs configuration etc.
//
// For example, the following Gateway spec sets up Envoy to act as a
// load balancer exposing port 80 (http), 443 (https), and port 2379 (TCP).
// While Istio will configure Envoy to listen on these ports, it is the
// responsibility mesh operator to ensure that external traffic can reach these
// ports.
//
//     metadata:
//       name: my-gateway
//     spec:
//       servers:
//       - port:
//           number: 80
//           protocol: http
//         domains:
//           - uk.bookinfo.com
//           - eu.bookinfo.com
//           - * #default
//         tls:
//           httpsRedirect: true # sends 302 redirect for http requests
//       - port:
//           number: 443
//           protocol: https
//         tls:
//           mode: simple #enables HTTPS on this port
//         hosts:
//           - uk.bookinfo.com
//           - eu.bookinfo.com
//           - *
//       - port:
//           number: 2379  #to expose internal service via external port 2379
//           protocol: redis
//         tls:
//           mode: mtls
//         hosts:
//           - redis.bookinfo.com
//       certs:
//       - hosts:
//           - *.bookinfo.com
//         serverCert: server.crt
//         clientCABundle: client.ca-bundle
//
// The following routing rule exposes uk.bookinfo.com, eu.bookinfo.com via the
// gateway and routes all calls to /reviews path in the reviews service.
//
//     metadata:
//       name: bookinfo-rule
//     spec:
//       destination:
//         name: reviews.prod
//         domains:
//           - uk.bookinfo.com
//           - eu.bookinfo.com
//       match:
//         request:
//           headers:
//             uri:
//               prefix: /reviews/
//       route:
//       - destination:
//           name: reviews.prod  # could be elided
//         weight: 80
//       - destination:
//           name: reviews.qa
//         weight: 20
//
// By default, if there is no wildcard, requests for unknown hosts
// will be responded with a 404. When some default behavior is desired, add
// a default host, "*", to the Gateway specification and specify its
// behavior with an appropriate route rule. For example,
//
//     metadata:
//       name: default-ingress
//     spec:
//       destination:
//         domain:
//           - *
//       route:
//       - destination:
//           name: homepage
//
// Note that the routing rules above will be applicable inside the service
// mesh as well, to all services invoking the reviews API via the HTTP host
// uk.bookinfo.com, and eu.bookinfo.com. In addition, the wildcard rule
// above will force all internal services to go to the homepage service. In
// order to restrict the wildcard routing rule above to be applicable only
// at the Ingress load balancer, use the source match option such that the
// rule will be applicable only to instances belonging to the load
// balancer.
//
// For example, let us assume that the ingress pods/VMs have a label called
// role: ingress
//
//     metadata:
//       name: default-ingress
//     spec:
//       destination:
//         fqdn:
//           - *
//       match:
//         source:
//           labels:
//             role: ingress # Restrict this rule to instances with this label only
//       route:
//       - destination:
//           name: homepage
//
message Gateway {
  // REQUIRED: Details about the port on which the proxy listens and applies rules
  repeated Server servers = 1;

  // Optional names of certificates for the server and the CA bundle to be used to validate
  // the client's certificate (if mTLS is to be used).
  repeated TLSConfig certs = 2;
}

// Server describes the properties of the proxy on a given load balancer port.
// For example,
//     metadata:
//       name: my-ingress
//     spec:
//       servers:
//       - port:
//           number: 80
//           protocol: HTTP2
//
// Another example
//     metadata:
//       name: my-tcp-ingress
//     spec:
//       servers:
//       - port:
//           number: 2379
//           protocol: redis

message Server {
  // REQUIRED: The port on which the gateway should listen for incoming
  // connections
  Port port = 1;

  // A list of domains exposed by this gateway. While
  // typically applicable to HTTP services, it can also be used for TCP
  // services using TLS with SNI. Standard DNS wildcard prefix syntax
  // is permitted.
  //
  // RouteRules that are bound to a gateway must having a matching domain
  // in their default destination. Specifically one of the route rule
  // destination domains is a strict suffix of a gateway domain or
  // a gateway domain is a suffix of one of the route rule domains.
  repeated string domains = 2;

  message TLSOptions {
    // If set to true, the load balancer will send a 302 redirect for all
    // http connections, asking the clients to use HTTPS.
    bool https_redirect = 1;

    // TLS modes enforced by Envoy
    enum TLSmode {
      // If set to "passthrough", Envoy will forward the connection to the
      // upstream server as is.
      PASSTHROUGH = 0;

      // If set to "simple", Envoy will secure connections with
      // standard TLS semantics (server certs only).
      SIMPLE = 1;

      // If set to "mutual", Envoy will validate client's identity using
      // mTLS authentication.
      MUTUAL = 2;
    };

    // Optional: Indicates whether connections to this port should be
    // secured using TLS.  The value of this field determines how TLS is
    // enforced.
    TLSmode mode = 2;
  }

  // Set of TLS related options that govern the server's behavior. Use
  // these options to control if all http requests should be redirected to
  // https, and the TLS modes to use.
  TLSOptions tls = 3;
}

// TLSConfig describes the server-side TLS certificate and CA cert (for
// client authentication) for a particular domain exposed by the ingress load
// balancer. These domains are not resolved in any way. Its upto the end user
// to ensure that the DNS resolves these domains to the ingress load balancer
//
// For example, the following is an example of TLS configuration for port 443
//     metadata:
//       name: my-ingress
//       namespace: mynamespace
//     spec:
//       servers:
//       - port:
//           number: 443
//           protocol: HTTP
//         tls:
//           mode: simple
//       certs:
//       - hosts:
//           - foo.bar.com
//         serverCertificatet: server.crt
//         clientCABundle: client.ca-bundle
//       - hosts:
//           - example.com
//         serverCertificate: server.crt
//
message TLSConfig {
  // REQUIRED: A set of domains associated with the server
  // certificate. Standard DNS wildcard prefix syntax is permitted.
  repeated string domains = 1;

  // REQUIRED: The name of the file holding the server-side TLS certificate
  // to use.  It is the responsibility of the underlying platform to mount
  // the certificate as a file under /etc/istio/ingress-certs with the same
  // name as the specified in this field.
  string server_certificate = 2;

  // To use mutual TLS for external clients, specify the name of the file
  // holding the CA certificate to validate the client's certificate. It is
  // the responsibility of the underlying platform to mount the certificate
  // as a file under /etc/istio/ingress-certs with the same name as
  // specified in this field.
  string client_ca_bundle = 3;
}
