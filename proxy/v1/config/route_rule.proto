// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "proxy/v1/config/http_fault.proto";
import "proxy/v1/config/l4_fault.proto";

package istio.proxy.v1.config;

// ### Glossary & concepts
//
// *Service* is a unit of an application with a unique name that other services
// use to refer to the functionality being called. Service instances are
// pods/VMs/containers that implement the service.
//
// *Service versions* - In a continuous deployment scenario, for a given service,
// there can be multiple sets of instances running potentially different
// variants of the application binary. These variants are not necessarily
// different API versions. They could be iterative changes to the same service,
// deployed in different environments (prod, staging, dev, etc.). Common
// scenarios where this occurs include A/B testing, canary rollouts, etc. The
// choice of a particular version can be decided based on various criterion
// (headers, url, etc.) and/or by weights assigned to each version.  Each
// service has a default version consisting of all its instances.
//
// *Source* - downstream client (browser or another service) calling the
// Envoy proxy/sidecar (typically to reach another service).
//
// *Destination* - The remote upstream service to which the Envoy proxy/sidecar is
// talking to, on behalf of the source service. There can be one or more
// service versions for a given service (see the discussion on versions above).
// Envoy would choose the version based on various routing rules.
//
// *Access model* - Applications address only the destination service
// without knowledge of individual service versions. The actual choice of
// the version is determined by Envoy, enabling the application code to
// decouple itself from the evolution of dependent services.
//
//
//
// Route rule provides a custom routing policy based on the source and
// destination service versions and connection/request metadata.  The rule
// must provide a set of conditions for each protocol (TCP, UDP, HTTP) that
// the destination service exposes on its ports.
//
// The rule applies only to the ports on the destination service for which
// it provides protocol-specific match condition, e.g. if the rule does not
// specify TCP condition, the rule does not apply to TCP traffic towards
// the destination service.
//
// For example, a simple rule to send 100% of incoming traffic for a
// "reviews" service to version "v1" can be specified as follows:
//
//     metadata:
//       name: my-rule
//       namespace: default # optional (default is "default")
//     spec:
//       destination:
//         name: reviews
//         namespace: my-namespace # optional (default is metadata namespace field)
//       route:
//       - labels:
//           version: v1
//         weight: 100
//
message RouteRule {
  // REQUIRED: Destination uniquely identifies the destination associated
  // with this routing rule. This field is applicable for hostname-based
  // resolution for HTTP traffic as well as IP-based resolution for
  // TCP/UDP traffic.
  //
  // *Note:* The route rule destination specification represents all version
  // of the service and therefore the IstioService's labels field MUST be empty.
  //
  IstioService destination = 1;

  // RECOMMENDED. Precedence is used to disambiguate the order of
  // application of rules for the same destination service. A higher number
  // takes priority. If not specified, the value is assumed to be 0.  The
  // order of application for rules with the same precedence is
  // unspecified.
  int32 precedence = 2;

  // Match condtions to be satisfied for the route rule to be
  // activated. If match is omitted, the route rule applies only to HTTP
  // traffic.
  MatchCondition match = 3;

  // REQUIRED (route|redirect). A routing rule can either redirect traffic or
  // forward traffic. The forwarding target can be one of several versions
  // of a service (see glossary in beginning of document). Weights
  // associated with the service version determine the proportion of
  // traffic it receives.
  repeated DestinationWeight route = 4;

  // REQUIRED (route|redirect). A routing rule can either redirect traffic or
  // forward traffic. The redirect primitive can be used to send a HTTP 302
  // redirect to a different URI or Authority.
  HTTPRedirect redirect = 5;

  // Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
  // Redirect primitive. Rewrite will be performed before forwarding.
  HTTPRewrite rewrite = 6;

  // Indicates that a HTTP/1.1 client connection to this particular route
  // should be allowed (and expected) to upgrade to a WebSocket connection.
  // The default is false. Envoy expects the first request to this route
  // to contain the WebSocket upgrade headers. Otherwise, the request
  // will be rejected.
  bool websocket_upgrade = 7;

  // Timeout policy for HTTP requests.
  HTTPTimeout http_req_timeout = 8;

  // Retry policy for HTTP requests.
  HTTPRetry http_req_retries = 9;

  //Fault injection policy to apply on HTTP traffic
  HTTPFaultInjection http_fault = 10;

  //(-- L4 fault injection policy applies to Tcp/Udp (not HTTP) traffic --)
  L4FaultInjection l4_fault = 11;
}

// IstioService identifies a service and optionally service version.
// The FQDN of the service is composed from the name, namespace, and implementation-specific domain suffix
// (e.g. on Kubernetes, "reviews" + "default" + "svc.cluster.local" -> "reviews.default.svc.cluster.local").
message IstioService {
  // The short name of the service such as "foo".
  string name = 1;

  // Optional namespace of the service. Defaults to value of metadata namespace field.
  string namespace = 2;

  // Domain suffix used to construct the service FQDN in implementations that support such specification.
  string domain = 3;

  // The service FQDN.
  string service = 4;

  // Optional one or more labels that uniquely identify the service version.
  //
  // *Note:* When used for a RouteRule destination, labels MUST be empty.
  //
  map<string, string> labels = 5;
}

// Match condition specifies a set of criterion to be met in order for the
// route rule to be applied to the connection or HTTP request. The
// condition provides distinct set of conditions for each protocol with the
// intention that conditions apply only to the service ports that match the
// protocol. For example, the following route rule restricts the rule to
// match only requests originating from "reviews:v2", accessing ratings
// service where the URL path starts with /ratings/v2/ and the request
// contains a "cookie" with value "user=jason",
//
//     metadata:
//       name: my-rule
//       namespace: default
//     spec:
//       destination:
//         name: ratings
//       match:
//         source:
//           name: reviews
//           labels:
//             version: v2
//         request:
//           headers:
//             cookie:
//               regex: "^(.*?;)?(user=jason)(;.*)?"
//             uri:
//               prefix: "/ratings/v2/"
//
// MatchCondition CANNOT be empty. At least one source or
// request header must be specified.
message MatchCondition {
  // Identifies the service initiating a connection or a request.
  IstioService source = 1;

  // (-- Set of layer 4 match conditions based on the IP ranges --)
  L4MatchAttributes tcp = 2 ;

  // (-- Set of layer 4 match conditions based on the IP ranges --)
  L4MatchAttributes udp = 3 ;

  // Attributes of an HTTP request to match.
  MatchRequest request = 4 ;
}

// MatchRequest specifies the attributes of an HTTP request to be used for matching a request.
message MatchRequest {
  // Set of HTTP match conditions based on HTTP/1.1, HTTP/2, GRPC request
  // metadata, such as _uri_, _scheme_, _authority_.  The header keys must be
  // lowercase and use hyphen as the separator, e.g. _x-request-id_.
  //
  // Header values are case-sensitive and formatted as follows:
  //
  // *exact: "value"* or just *"value"* for exact string match
  //
  // *prefix: "value"* for prefix-based match
  //
  // *regex: "value"* for ECMAscript style regex-based match
  //
  // *Note 1:* The keys _uri_, _scheme_, _method_, and _authority_ correspond
  // to URI, protocol scheme (e.g., HTTP, HTTPS), HTTP method
  // (e.g., GET, POST), and the HTTP Host header respectively.
  //
  // *Note 2:* _uri_ can be used to perform URL matches. 
  // For all HTTP headers including _uri_, exact, prefix and ECMA style
  // regular expression matches are supported.
  map<string, StringMatch> headers = 1;
}

// Each routing rule is associated with one or more service versions (see
// glossary in beginning of document). Weights associated with the version
// determine the proportion of traffic it receives. For example, the
// following rule will route 25% of traffic for the "reviews" service to
// instances with the "v2" tag and the remaining traffic (i.e., 75%) to
// "v1".
//
//     metadata:
//       name: my-rule
//       namespace: default
//     spec:
//       destination:
//         name: reviews
//       route:
//       - labels:
//           version: v2
//         weight: 25
//       - labels:
//           version: v1
//         weight: 75
//
message DestinationWeight {
  // Optional destination uniquely identifies the destination service. If not
  // specified, the value is inherited from the parent route rule.
  IstioService destination = 1;

  // Service version identifier for the destination service.
  // (-- N.B. The map is used instead of pstruct due to lack of serialization support
  // in golang protobuf library (see https://github.com/golang/protobuf/pull/208) --)
  map<string, string> labels = 2;

  // REQUIRED. The proportion of traffic to be forwarded to the service
  // version. (0-100). Sum of weights across destinations SHOULD BE ==
  // 100. If there is only destination in a rule, the weight value is
  // assumed to be 100.
  int32 weight = 3;
}

// (-- L4 connection match attributes. Note that L4 connection matching
// support is incomplete. --)
message L4MatchAttributes {
  // IPv4 or IPv6 ip address with optional subnet. E.g., a.b.c.d/xx form or
  // just a.b.c.d
  repeated string source_subnet = 1;

  // IPv4 or IPv6 ip address of destination with optional subnet.
  // E.g., a.b.c.d/xx form or just a.b.c.d. This is only valid when the destination
  // service has several IPs and the application explicitly specifies a particular IP.
  repeated string destination_subnet = 2;
}

// HTTPRedirect can be used to send a 302 redirect response to the caller,
// where the Authority/Host and the URI in the response can be swapped with
// the specified values. For example, the following route rule redirects
// requests for /v1/getProductRatings API on the ratings service to
// /v1/bookRatings provided by the bookratings service.
//
//     metadata:
//       name: my-rule
//       namespace: default
//     spec:
//       destination:
//         name: ratings
//       match:
//         request:
//           headers:
//             uri: /v1/getProductRatings
//       redirect:
//         uri: /v1/bookRatings
//         authority: bookratings.default.svc.cluster.local
//
message HTTPRedirect {
  // On a redirect, overwrite the Path portion of the URL with this
  // value. Note that the entire path will be replaced, irrespective of the
  // request URI being matched as an exact path or prefix.
  string uri = 1;
   
  // On a redirect, overwrite the Authority/Host portion of the URL with
  // this value
  string authority = 2;
}
 
// HTTPRewrite can be used to rewrite specific parts of a HTTP request
// before forwarding the request to the destination. Rewrite primitive can
// be used only with the DestinationWeights. The following example
// demonstrates how to rewrite the URL prefix for api call (/ratings) to
// ratings service before making the actual API call.
//
//     metadata:
//       name: my-rule
//       namespace: default
//     spec:
//       destination:
//         name: ratings
//       match:
//         request:
//           headers:
//             uri:
//               prefix: /ratings
//       rewrite:
//         uri: /v1/bookRatings
//       route:
//       - labels:
//           version: v1
//
message HTTPRewrite {
  // rewrite the Path (or the prefix) portion of the URI with this
  // value. If the original URI was matched based on prefix, the value
  // provided in this field will replace the corresponding matched prefix.
  string uri = 1;

  // rewrite the Authority/Host header with this value.
  string authority = 2;
}

// Describes how to match a given string in HTTP headers. Match is case-sensitive.
message StringMatch {
  oneof match_type {
    // exact string match
    string exact = 1;
    // prefix-based match
    string prefix = 2;
    // ECMAscript style regex-based match
    string regex = 3;
  }
}

// Describes HTTP request timeout. For example, the following rule sets a
// 10 second timeout for calls to the ratings:v1 service
//
//     metadata:
//       name: my-rule
//       namespace: default
//     spec:
//       destination:
//         name: ratings
//       route:
//       - labels:
//           version: v1
//       httpReqTimeout:
//         simpleTimeout:
//           timeout: 10s
//
message HTTPTimeout {
  message SimpleTimeoutPolicy {
    // REQUIRED. Timeout for a HTTP request. Includes retries as well.  Default
    // 15s. format: 1h/1m/1s/1ms. MUST BE >=1ms. It is possible to control
    // timeout per request by supplying the timeout value via
    // x-envoy-upstream-rq-timeout-ms HTTP header.
    google.protobuf.Duration timeout = 1;
    // (-- Downstream service could specify timeout via Http header to 
    // Envoy, if Envoy supports such a feature. --)
    string override_header_name = 2 ;
  }
  oneof timeout_policy {
    SimpleTimeoutPolicy simple_timeout = 1;
    //(-- For proxies that support custom timeout policies --)
    google.protobuf.Any custom = 2 ;
  }
}

// Describes the retry policy to use when a HTTP request fails. For
// example, the following rule sets the maximum number of retries to 3 when
// calling ratings:v1 service, with a 2s timeout per retry attempt.
//
//     metadata:
//       name: my-rule
//       namespace: default
//     spec:
//       destination:
//         name: ratings
//       route:
//       - labels:
//           version: v1
//       httpReqRetries:
//         simpleRetry:
//           attempts: 3
//           perTryTimeout: 2s
//
message HTTPRetry {
  message SimpleRetryPolicy {
    // REQUIRED. Number of retries for a given request. The interval
    // between retries will be determined automatically (25ms+). Actual
    // number of retries attempted depends on the httpReqTimeout.
    int32 attempts = 1;
    // Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
    google.protobuf.Duration per_try_timeout = 2;
    // (-- Downstream Service could specify retry attempts via Http header to
    // Envoy, if Envoy supports such a feature. --)
    string override_header_name = 3 ;
  }
  oneof retry_policy {
    SimpleRetryPolicy simple_retry = 1;
    // (-- For proxies that support custom retry policies --)
    google.protobuf.Any custom = 2 ;
  }
}
