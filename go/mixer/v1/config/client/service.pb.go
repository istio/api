// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mixer/v1/config/client/service.proto

package client

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// IstioService identifies a service and optionally service version.
// The FQDN of the service is composed from the name, namespace, and implementation-specific domain suffix
// (e.g. on Kubernetes, "reviews" + "default" + "svc.cluster.local" -> "reviews.default.svc.cluster.local").
type IstioService struct {
	// The short name of the service such as "foo".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional namespace of the service. Defaults to value of metadata namespace field.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Domain suffix used to construct the service FQDN in implementations that support such specification.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// The service FQDN.
	Service string `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	// Optional one or more labels that uniquely identify the service version.
	//
	// *Note:* When used for a VirtualService destination, labels MUST be empty.
	//
	Labels               map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IstioService) Reset()         { *m = IstioService{} }
func (m *IstioService) String() string { return proto.CompactTextString(m) }
func (*IstioService) ProtoMessage()    {}
func (*IstioService) Descriptor() ([]byte, []int) {
	return fileDescriptor_3358a28a51c817d5, []int{0}
}

func (m *IstioService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IstioService.Unmarshal(m, b)
}
func (m *IstioService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IstioService.Marshal(b, m, deterministic)
}
func (m *IstioService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioService.Merge(m, src)
}
func (m *IstioService) XXX_Size() int {
	return xxx_messageInfo_IstioService.Size(m)
}
func (m *IstioService) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioService.DiscardUnknown(m)
}

var xxx_messageInfo_IstioService proto.InternalMessageInfo

func (m *IstioService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IstioService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *IstioService) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *IstioService) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *IstioService) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*IstioService)(nil), "istio.mixer.v1.config.client.IstioService")
	proto.RegisterMapType((map[string]string)(nil), "istio.mixer.v1.config.client.IstioService.LabelsEntry")
}

func init() {
	proto.RegisterFile("mixer/v1/config/client/service.proto", fileDescriptor_3358a28a51c817d5)
}

var fileDescriptor_3358a28a51c817d5 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc9, 0xcd, 0xac, 0x48,
	0x2d, 0xd2, 0x2f, 0x33, 0xd4, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x4f, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0xd1, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x92, 0xc9, 0x2c, 0x2e, 0xc9, 0xcc, 0xd7, 0x03, 0xab, 0xd5, 0x2b, 0x33, 0xd4, 0x83, 0xa8,
	0xd5, 0x83, 0xa8, 0x95, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x2b, 0xd4, 0x07, 0xb1, 0x20, 0x7a,
	0x94, 0xfe, 0x32, 0x72, 0xf1, 0x78, 0x82, 0xb4, 0x05, 0x43, 0x8c, 0x12, 0x12, 0xe2, 0x62, 0xc9,
	0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x64, 0xb8, 0x38,
	0x41, 0x74, 0x71, 0x41, 0x62, 0x72, 0xaa, 0x04, 0x13, 0x58, 0x02, 0x21, 0x20, 0x24, 0xc6, 0xc5,
	0x96, 0x92, 0x9f, 0x9b, 0x98, 0x99, 0x27, 0xc1, 0x0c, 0x96, 0x82, 0xf2, 0x84, 0x24, 0xb8, 0xd8,
	0xa1, 0xee, 0x93, 0x60, 0x01, 0x4b, 0xc0, 0xb8, 0x42, 0x7e, 0x5c, 0x6c, 0x39, 0x89, 0x49, 0xa9,
	0x39, 0xc5, 0x12, 0xac, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x66, 0x7a, 0xf8, 0x5c, 0xae, 0x87, 0xec,
	0x3e, 0x3d, 0x1f, 0xb0, 0x46, 0xd7, 0xbc, 0x92, 0xa2, 0xca, 0x20, 0xa8, 0x29, 0x52, 0x96, 0x5c,
	0xdc, 0x48, 0xc2, 0x42, 0x02, 0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x50, 0x1f, 0x80, 0x98, 0x42, 0x22,
	0x5c, 0xac, 0x65, 0x89, 0x39, 0xa5, 0x30, 0xc7, 0x43, 0x38, 0x56, 0x4c, 0x16, 0x8c, 0x4e, 0xa6,
	0x27, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xb0, 0xe2, 0x91, 0x1c, 0xc3, 0x8d, 0x47, 0x72,
	0x8c, 0x51, 0xca, 0x10, 0xb7, 0x64, 0xe6, 0xeb, 0x27, 0x16, 0x64, 0xea, 0x63, 0x0f, 0xf8, 0x24,
	0x36, 0x70, 0xe8, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x83, 0x67, 0x90, 0x99, 0x01,
	0x00, 0x00,
}
