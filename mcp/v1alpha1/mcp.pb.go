// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mcp/v1alpha1/mcp.proto

package v1alpha1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	status "google/rpc/status.proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Identifies a specific MCP sink node instance. The node identifier is
// presented to the resource source, which may use this identifier
// to distinguish per sink configuration for serving. This
// information is not authoritative. Authoritative identity should come
// from the underlying transport layer (e.g. rpc credentials).
type SinkNode struct {
	// An opaque identifier for the MCP node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Opaque annotations extending the node identifier.
	Annotations          map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SinkNode) Reset()         { *m = SinkNode{} }
func (m *SinkNode) String() string { return proto.CompactTextString(m) }
func (*SinkNode) ProtoMessage()    {}
func (*SinkNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0713683a7297bd65, []int{0}
}

func (m *SinkNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SinkNode.Unmarshal(m, b)
}
func (m *SinkNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SinkNode.Marshal(b, m, deterministic)
}
func (m *SinkNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SinkNode.Merge(m, src)
}
func (m *SinkNode) XXX_Size() int {
	return xxx_messageInfo_SinkNode.Size(m)
}
func (m *SinkNode) XXX_DiscardUnknown() {
	xxx_messageInfo_SinkNode.DiscardUnknown(m)
}

var xxx_messageInfo_SinkNode proto.InternalMessageInfo

func (m *SinkNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SinkNode) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

// A MeshConfigRequest requests a set of versioned resources of the
// same type for a given client.
type MeshConfigRequest struct {
	// The version_info provided in the request messages will be the
	// version_info received with the most recent successfully processed
	// response or empty on the first request. It is expected that no
	// new request is sent after a response is received until the client
	// instance is ready to ACK/NACK the new configuration. ACK/NACK
	// takes place by returning the new API config version as applied or
	// the previous API config version respectively. Each type_url (see
	// below) has an independent version associated with it.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	// The sink node making the request.
	SinkNode *SinkNode `protobuf:"bytes,2,opt,name=sink_node,json=sinkNode,proto3" json:"sink_node,omitempty"`
	// Type of the resource that is being requested, e.g.
	// "type.googleapis.com/istio.io.networking.v1alpha3.VirtualService".
	TypeUrl string `protobuf:"bytes,3,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	// The nonce corresponding to MeshConfigResponse being
	// ACK/NACKed. See above discussion on version_info and the
	// MeshConfigResponse nonce comment. This may be empty if no nonce is
	// available, e.g. at startup.
	ResponseNonce string `protobuf:"bytes,4,opt,name=response_nonce,json=responseNonce,proto3" json:"response_nonce,omitempty"`
	// This is populated when the previous MeshConfigResponse failed to
	// update configuration. The *message* field in *error_details*
	// provides the client internal exception related to the failure. It
	// is only intended for consumption during manual debugging, the
	// string provided is not guaranteed to be stable across client
	// versions.
	ErrorDetail          *status.Status `protobuf:"bytes,5,opt,name=error_detail,json=errorDetail,proto3" json:"error_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MeshConfigRequest) Reset()         { *m = MeshConfigRequest{} }
func (m *MeshConfigRequest) String() string { return proto.CompactTextString(m) }
func (*MeshConfigRequest) ProtoMessage()    {}
func (*MeshConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0713683a7297bd65, []int{1}
}

func (m *MeshConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshConfigRequest.Unmarshal(m, b)
}
func (m *MeshConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshConfigRequest.Marshal(b, m, deterministic)
}
func (m *MeshConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfigRequest.Merge(m, src)
}
func (m *MeshConfigRequest) XXX_Size() int {
	return xxx_messageInfo_MeshConfigRequest.Size(m)
}
func (m *MeshConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfigRequest proto.InternalMessageInfo

func (m *MeshConfigRequest) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

func (m *MeshConfigRequest) GetSinkNode() *SinkNode {
	if m != nil {
		return m.SinkNode
	}
	return nil
}

func (m *MeshConfigRequest) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *MeshConfigRequest) GetResponseNonce() string {
	if m != nil {
		return m.ResponseNonce
	}
	return ""
}

func (m *MeshConfigRequest) GetErrorDetail() *status.Status {
	if m != nil {
		return m.ErrorDetail
	}
	return nil
}

// A MeshConfigResponse delivers a set of versioned resources of the
// same type in response to a MeshConfigRequest.
type MeshConfigResponse struct {
	// The version of the response data.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	// The response resources wrapped in the common MCP *Resource*
	// message.
	Resources []*Resource `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	// Type URL for resources wrapped in the provided resources(s). This
	// must be consistent with the type_url in the wrapper messages if
	// resources is non-empty.
	TypeUrl string `protobuf:"bytes,3,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	// The nonce provides a way to explicitly ack a specific
	// MeshConfigResponse in a following MeshConfigRequest. Additional
	// messages may have been sent by client to the management server for
	// the previous version on the stream prior to this
	// MeshConfigResponse, that were unprocessed at response send
	// time. The nonce allows the management server to ignore any
	// further MeshConfigRequests for the previous version until a
	// MeshConfigRequest bearing the nonce.
	Nonce                string   `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfigResponse) Reset()         { *m = MeshConfigResponse{} }
func (m *MeshConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MeshConfigResponse) ProtoMessage()    {}
func (*MeshConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0713683a7297bd65, []int{2}
}

func (m *MeshConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshConfigResponse.Unmarshal(m, b)
}
func (m *MeshConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshConfigResponse.Marshal(b, m, deterministic)
}
func (m *MeshConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfigResponse.Merge(m, src)
}
func (m *MeshConfigResponse) XXX_Size() int {
	return xxx_messageInfo_MeshConfigResponse.Size(m)
}
func (m *MeshConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfigResponse proto.InternalMessageInfo

func (m *MeshConfigResponse) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

func (m *MeshConfigResponse) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *MeshConfigResponse) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *MeshConfigResponse) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

// IncrementalMeshConfigRequest are be sent in 2 situations:
//
//   1. Initial message in a MCP bidirectional gRPC stream.
//
//   2. As a ACK or NACK response to a previous IncrementalMeshConfigResponse.
//      In this case the response_nonce is set to the nonce value in the Response.
//      ACK or NACK is determined by the absence or presence of error_detail.
type IncrementalMeshConfigRequest struct {
	// The sink node making the request.
	SinkNode *SinkNode `protobuf:"bytes,1,opt,name=sink_node,json=sinkNode,proto3" json:"sink_node,omitempty"`
	// Type of the resource that is being requested, e.g.
	// "type.googleapis.com/istio.io.networking.v1alpha3.VirtualService".
	TypeUrl string `protobuf:"bytes,2,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	// When the IncrementalMeshConfigRequest is the first in a stream,
	// the initial_resource_versions must be populated. Otherwise,
	// initial_resource_versions must be omitted. The keys are the
	// resources names of the MCP resources known to the MCP client. The
	// values in the map are the associated resource level version info.
	InitialResourceVersions map[string]string `protobuf:"bytes,3,rep,name=initial_resource_versions,json=initialResourceVersions,proto3" json:"initial_resource_versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// When the IncrementalMeshConfigRequest is a ACK or NACK message in response
	// to a previous IncrementalMeshConfigResponse, the response_nonce must be the
	// nonce in the IncrementalMeshConfigResponse.
	// Otherwise response_nonce must be omitted.
	ResponseNonce string `protobuf:"bytes,4,opt,name=response_nonce,json=responseNonce,proto3" json:"response_nonce,omitempty"`
	// This is populated when the previous IncrementalMeshConfigResponses
	// failed to update configuration. The *message* field in *error_details*
	// provides the client internal exception related to the failure.
	ErrorDetail          *status.Status `protobuf:"bytes,5,opt,name=error_detail,json=errorDetail,proto3" json:"error_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *IncrementalMeshConfigRequest) Reset()         { *m = IncrementalMeshConfigRequest{} }
func (m *IncrementalMeshConfigRequest) String() string { return proto.CompactTextString(m) }
func (*IncrementalMeshConfigRequest) ProtoMessage()    {}
func (*IncrementalMeshConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0713683a7297bd65, []int{3}
}

func (m *IncrementalMeshConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncrementalMeshConfigRequest.Unmarshal(m, b)
}
func (m *IncrementalMeshConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncrementalMeshConfigRequest.Marshal(b, m, deterministic)
}
func (m *IncrementalMeshConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrementalMeshConfigRequest.Merge(m, src)
}
func (m *IncrementalMeshConfigRequest) XXX_Size() int {
	return xxx_messageInfo_IncrementalMeshConfigRequest.Size(m)
}
func (m *IncrementalMeshConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrementalMeshConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IncrementalMeshConfigRequest proto.InternalMessageInfo

func (m *IncrementalMeshConfigRequest) GetSinkNode() *SinkNode {
	if m != nil {
		return m.SinkNode
	}
	return nil
}

func (m *IncrementalMeshConfigRequest) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *IncrementalMeshConfigRequest) GetInitialResourceVersions() map[string]string {
	if m != nil {
		return m.InitialResourceVersions
	}
	return nil
}

func (m *IncrementalMeshConfigRequest) GetResponseNonce() string {
	if m != nil {
		return m.ResponseNonce
	}
	return ""
}

func (m *IncrementalMeshConfigRequest) GetErrorDetail() *status.Status {
	if m != nil {
		return m.ErrorDetail
	}
	return nil
}

// IncrementalMeshConfigResponses do not need to include a full
// snapshot of the tracked resources. Instead they are a diff to the
// state of a MCP client. Per resource versions allow servers and
// clients to track state at the resource granularity. An MCP
// incremental session is always in the context of a gRPC
// bidirectional stream. This allows the MCP server to keep track of
// the state of MCP clients connected to it.
//
// In Incremental MCP the nonce field is required and used to pair
// IncrementalMeshConfigResponse to an IncrementalMeshConfigRequest
// ACK or NACK.  Optionally, a response message level
// system_version_info is present for debugging purposes only.
type IncrementalMeshConfigResponse struct {
	// The version of the response data (used for debugging).
	SystemVersionInfo string `protobuf:"bytes,1,opt,name=system_version_info,json=systemVersionInfo,proto3" json:"system_version_info,omitempty"`
	// The response resources wrapped in the common MCP *Resource*
	// message. These are typed resources that match the type url in the
	// IncrementalMeshConfigRequest.
	Resources []*Resource `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	// Resources names of resources that have be deleted and to be
	// removed from the MCP Client.  Removed resources for missing
	// resources can be ignored.
	RemovedResources []string `protobuf:"bytes,3,rep,name=removed_resources,json=removedResources,proto3" json:"removed_resources,omitempty"`
	// The nonce provides a way for IncrementalMeshConfigRequests to
	// uniquely reference an IncrementalMeshConfigResponse. The nonce is
	// required.
	Nonce                string   `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncrementalMeshConfigResponse) Reset()         { *m = IncrementalMeshConfigResponse{} }
func (m *IncrementalMeshConfigResponse) String() string { return proto.CompactTextString(m) }
func (*IncrementalMeshConfigResponse) ProtoMessage()    {}
func (*IncrementalMeshConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0713683a7297bd65, []int{4}
}

func (m *IncrementalMeshConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncrementalMeshConfigResponse.Unmarshal(m, b)
}
func (m *IncrementalMeshConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncrementalMeshConfigResponse.Marshal(b, m, deterministic)
}
func (m *IncrementalMeshConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrementalMeshConfigResponse.Merge(m, src)
}
func (m *IncrementalMeshConfigResponse) XXX_Size() int {
	return xxx_messageInfo_IncrementalMeshConfigResponse.Size(m)
}
func (m *IncrementalMeshConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrementalMeshConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IncrementalMeshConfigResponse proto.InternalMessageInfo

func (m *IncrementalMeshConfigResponse) GetSystemVersionInfo() string {
	if m != nil {
		return m.SystemVersionInfo
	}
	return ""
}

func (m *IncrementalMeshConfigResponse) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *IncrementalMeshConfigResponse) GetRemovedResources() []string {
	if m != nil {
		return m.RemovedResources
	}
	return nil
}

func (m *IncrementalMeshConfigResponse) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

// A RequestResource can be sent in two situations:
//
// Initial message in an MCP bidirectional change stream
// as an ACK or NACK response to a previous Resources. In
// this case the response_nonce is set to the nonce value
// in the Resources. ACK/NACK is determined by the presence
// of error_detail.
//
// * ACK  (nonce!="",error_details==nil)
// * NACK (nonce!="",error_details!=nil)
// * New/Update request (nonce=="",error_details ignored)
//
type RequestResources struct {
	// The sink node making the request.
	SinkNode *SinkNode `protobuf:"bytes,1,opt,name=sink_node,json=sinkNode,proto3" json:"sink_node,omitempty"`
	// Type of resource collection that is being requested, e.g.
	//
	// istio/networking/v1alpha3/VirtualService
	// k8s/<apiVersion>/<kind>
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	// When the RequestResources is the first in a stream, the initial_resource_versions must
	// be populated. Otherwise, initial_resource_versions must be omitted. The keys are the
	// resources names of the MCP resources known to the MCP client. The values in the map
	// are the associated resource level version info.
	InitialResourceVersions map[string]string `protobuf:"bytes,3,rep,name=initial_resource_versions,json=initialResourceVersions,proto3" json:"initial_resource_versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// When the RequestResources is an ACK or NACK message in response to a previous RequestResources,
	// the response_nonce must be the nonce in the RequestResources. Otherwise response_nonce must
	// be omitted.
	ResponseNonce string `protobuf:"bytes,4,opt,name=response_nonce,json=responseNonce,proto3" json:"response_nonce,omitempty"`
	// This is populated when the previously received resources could not be applied
	// The *message* field in *error_details* provides the source internal error
	// related to the failure.
	ErrorDetail *status.Status `protobuf:"bytes,5,opt,name=error_detail,json=errorDetail,proto3" json:"error_detail,omitempty"`
	// Request an incremental update for the specified collection. The source may choose to
	// honor this request or ignore and and provide a full-state update in the corresponding
	// `Resource` response.
	Incremental          bool     `protobuf:"varint,6,opt,name=incremental,proto3" json:"incremental,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestResources) Reset()         { *m = RequestResources{} }
func (m *RequestResources) String() string { return proto.CompactTextString(m) }
func (*RequestResources) ProtoMessage()    {}
func (*RequestResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_0713683a7297bd65, []int{5}
}

func (m *RequestResources) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestResources.Unmarshal(m, b)
}
func (m *RequestResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestResources.Marshal(b, m, deterministic)
}
func (m *RequestResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestResources.Merge(m, src)
}
func (m *RequestResources) XXX_Size() int {
	return xxx_messageInfo_RequestResources.Size(m)
}
func (m *RequestResources) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestResources.DiscardUnknown(m)
}

var xxx_messageInfo_RequestResources proto.InternalMessageInfo

func (m *RequestResources) GetSinkNode() *SinkNode {
	if m != nil {
		return m.SinkNode
	}
	return nil
}

func (m *RequestResources) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *RequestResources) GetInitialResourceVersions() map[string]string {
	if m != nil {
		return m.InitialResourceVersions
	}
	return nil
}

func (m *RequestResources) GetResponseNonce() string {
	if m != nil {
		return m.ResponseNonce
	}
	return ""
}

func (m *RequestResources) GetErrorDetail() *status.Status {
	if m != nil {
		return m.ErrorDetail
	}
	return nil
}

func (m *RequestResources) GetIncremental() bool {
	if m != nil {
		return m.Incremental
	}
	return false
}

// Resources do not need to include a full snapshot of the tracked
// resources. Instead they are a diff to the state of a MCP client.
// Per resource versions allow sources and sinks to track state at
// the resource granularity. An MCP incremental session is always
// in the context of a gRPC bidirectional stream. This allows the
// MCP source to keep track of the state of MCP sink connected to
// it.
//
// In Incremental MCP the nonce field is required and used to pair
// Resources to an RequestResources ACK or NACK.
type Resources struct {
	// The version of the response data (used for debugging).
	SystemVersionInfo string `protobuf:"bytes,1,opt,name=system_version_info,json=systemVersionInfo,proto3" json:"system_version_info,omitempty"`
	// Type of resource collection that is being requested, e.g.
	//
	// istio/networking/v1alpha3/VirtualService
	// k8s/<apiVersion>/<kind>
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	// The response resources wrapped in the common MCP *Resource* message.
	// These are typed resources that match the type url in the
	// RequestResources message.
	//
	// When `incremental` is true, this contains an array of resources to add/update
	// for the specified collection. This modifies the existing collection at the sink
	//
	// When `incremental` is false, this contains the full set of resources for the
	// specified collection. This replaces any previously delivered resources.
	Resources []*Resource `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty"`
	// Names of resources that have been deleted and to be
	// removed from the MCP sink node. Removed resources for missing
	// resources can be ignored.
	//
	// When `incremental` is true, this contains an array of resource names to remove
	// for the specified collection. This modifies the existing resource collection at
	// the sink.
	//
	// When `incremental` is false, this field should be ignored.
	RemovedResources []string `protobuf:"bytes,4,rep,name=removed_resources,json=removedResources,proto3" json:"removed_resources,omitempty"`
	// Required. The nonce provides a way for RequestChange to uniquely
	// reference a RequestResources.
	Nonce string `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// This resource response is an incremental update. The source should only send
	// incremental updates if the sink requested them.
	Incremental          bool     `protobuf:"varint,6,opt,name=incremental,proto3" json:"incremental,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resources) Reset()         { *m = Resources{} }
func (m *Resources) String() string { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()    {}
func (*Resources) Descriptor() ([]byte, []int) {
	return fileDescriptor_0713683a7297bd65, []int{6}
}

func (m *Resources) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resources.Unmarshal(m, b)
}
func (m *Resources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resources.Marshal(b, m, deterministic)
}
func (m *Resources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resources.Merge(m, src)
}
func (m *Resources) XXX_Size() int {
	return xxx_messageInfo_Resources.Size(m)
}
func (m *Resources) XXX_DiscardUnknown() {
	xxx_messageInfo_Resources.DiscardUnknown(m)
}

var xxx_messageInfo_Resources proto.InternalMessageInfo

func (m *Resources) GetSystemVersionInfo() string {
	if m != nil {
		return m.SystemVersionInfo
	}
	return ""
}

func (m *Resources) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *Resources) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Resources) GetRemovedResources() []string {
	if m != nil {
		return m.RemovedResources
	}
	return nil
}

func (m *Resources) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *Resources) GetIncremental() bool {
	if m != nil {
		return m.Incremental
	}
	return false
}

func init() {
	proto.RegisterType((*SinkNode)(nil), "istio.mcp.v1alpha1.SinkNode")
	proto.RegisterMapType((map[string]string)(nil), "istio.mcp.v1alpha1.SinkNode.AnnotationsEntry")
	proto.RegisterType((*MeshConfigRequest)(nil), "istio.mcp.v1alpha1.MeshConfigRequest")
	proto.RegisterType((*MeshConfigResponse)(nil), "istio.mcp.v1alpha1.MeshConfigResponse")
	proto.RegisterType((*IncrementalMeshConfigRequest)(nil), "istio.mcp.v1alpha1.IncrementalMeshConfigRequest")
	proto.RegisterMapType((map[string]string)(nil), "istio.mcp.v1alpha1.IncrementalMeshConfigRequest.InitialResourceVersionsEntry")
	proto.RegisterType((*IncrementalMeshConfigResponse)(nil), "istio.mcp.v1alpha1.IncrementalMeshConfigResponse")
	proto.RegisterType((*RequestResources)(nil), "istio.mcp.v1alpha1.RequestResources")
	proto.RegisterMapType((map[string]string)(nil), "istio.mcp.v1alpha1.RequestResources.InitialResourceVersionsEntry")
	proto.RegisterType((*Resources)(nil), "istio.mcp.v1alpha1.Resources")
}

func init() { proto.RegisterFile("mcp/v1alpha1/mcp.proto", fileDescriptor_0713683a7297bd65) }

var fileDescriptor_0713683a7297bd65 = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x35, 0x29, 0xcb, 0x95, 0xae, 0x5c, 0x43, 0x9e, 0x1a, 0x35, 0x45, 0xbf, 0x54, 0xa1, 0x2e,
	0x04, 0x14, 0xa5, 0x6c, 0x15, 0x05, 0xda, 0x2e, 0x8a, 0xda, 0xad, 0x17, 0x2e, 0x60, 0x17, 0xa0,
	0x10, 0x2f, 0xb2, 0x21, 0x68, 0x72, 0x4c, 0x0f, 0x44, 0xcd, 0x30, 0x33, 0x23, 0x01, 0x5a, 0x64,
	0x93, 0x5d, 0x90, 0x6f, 0xc8, 0x3e, 0x70, 0x7e, 0x20, 0x9f, 0x90, 0x0f, 0xc8, 0x3a, 0x8b, 0x2c,
	0xf3, 0x15, 0x01, 0x5f, 0x26, 0x15, 0xd3, 0x92, 0x95, 0x38, 0x40, 0x36, 0xc4, 0xcc, 0xbd, 0x77,
	0xce, 0x7d, 0x9c, 0x33, 0x03, 0xc2, 0xf7, 0x03, 0x27, 0xe8, 0x8c, 0xf6, 0x6d, 0x3f, 0xb8, 0xb4,
	0xf7, 0x3b, 0x03, 0x27, 0x30, 0x02, 0xce, 0x24, 0x43, 0x88, 0x08, 0x49, 0x98, 0x11, 0x1a, 0x52,
	0xaf, 0xbe, 0xee, 0x31, 0xe6, 0xf9, 0xb8, 0xc3, 0x03, 0xa7, 0x23, 0xa4, 0x2d, 0x87, 0x22, 0x0e,
	0xd6, 0xd7, 0x3c, 0xe6, 0xb1, 0x68, 0xd9, 0x09, 0x57, 0x89, 0x75, 0x63, 0x02, 0x9a, 0x63, 0xc1,
	0x86, 0xdc, 0xc1, 0xb1, 0xb3, 0xf5, 0x52, 0x81, 0x4a, 0x8f, 0xd0, 0xfe, 0x29, 0x73, 0x31, 0x5a,
	0x01, 0x95, 0xb8, 0x9a, 0xd2, 0x54, 0xda, 0x55, 0x53, 0x25, 0x2e, 0xfa, 0x1f, 0x6a, 0x36, 0xa5,
	0x4c, 0xda, 0x92, 0x30, 0x2a, 0x34, 0xb5, 0x59, 0x6a, 0xd7, 0xba, 0xbf, 0x18, 0x37, 0x4b, 0x32,
	0x52, 0x08, 0xe3, 0x20, 0x8b, 0x3f, 0xa2, 0x92, 0x8f, 0xcd, 0x3c, 0x82, 0xfe, 0x17, 0xd4, 0x3f,
	0x0e, 0x40, 0x75, 0x28, 0xf5, 0xf1, 0x38, 0xc9, 0x1a, 0x2e, 0xd1, 0x1a, 0x94, 0x47, 0xb6, 0x3f,
	0xc4, 0x9a, 0x1a, 0xd9, 0xe2, 0xcd, 0x9f, 0xea, 0xef, 0x4a, 0xeb, 0xbd, 0x02, 0xab, 0x27, 0x58,
	0x5c, 0xfe, 0xc3, 0xe8, 0x05, 0xf1, 0x4c, 0xfc, 0x68, 0x88, 0x85, 0x44, 0x3f, 0xc0, 0xf2, 0x08,
	0x73, 0x41, 0x18, 0xb5, 0x08, 0xbd, 0x60, 0x09, 0x54, 0x2d, 0xb1, 0x1d, 0xd3, 0x0b, 0x86, 0xfe,
	0x80, 0xaa, 0x20, 0xb4, 0x6f, 0x51, 0xe6, 0xc6, 0xb0, 0xb5, 0xee, 0xe6, 0xb4, 0x3e, 0xcc, 0x8a,
	0x48, 0x87, 0xd2, 0x80, 0x8a, 0x1c, 0x07, 0xd8, 0x1a, 0x72, 0x5f, 0x2b, 0x45, 0xc8, 0xdf, 0x84,
	0xfb, 0x07, 0xdc, 0x47, 0xbb, 0xb0, 0xc2, 0xb1, 0x08, 0x18, 0x15, 0xd8, 0xa2, 0x8c, 0x3a, 0x58,
	0x5b, 0x8c, 0x02, 0xbe, 0x4d, 0xad, 0xa7, 0xa1, 0x11, 0xfd, 0x06, 0xcb, 0x98, 0x73, 0xc6, 0x2d,
	0x17, 0x4b, 0x9b, 0xf8, 0x5a, 0x39, 0xca, 0x8f, 0x8c, 0x98, 0x46, 0x83, 0x07, 0x8e, 0xd1, 0x8b,
	0x68, 0x34, 0x6b, 0x51, 0xdc, 0xbf, 0x51, 0x58, 0xeb, 0x4a, 0x01, 0x94, 0x6f, 0x36, 0x86, 0xbc,
	0x4b, 0xb7, 0x7f, 0x43, 0x35, 0xa5, 0x39, 0x65, 0xad, 0xb0, 0x5b, 0x33, 0x09, 0x3a, 0x5c, 0x7c,
	0xfd, 0x76, 0x67, 0xc1, 0xcc, 0x0e, 0x4d, 0x6b, 0x7a, 0x0d, 0xca, 0xf9, 0x5e, 0xe3, 0x4d, 0xeb,
	0xaa, 0x04, 0x9b, 0xc7, 0xd4, 0xe1, 0x78, 0x80, 0xa9, 0xb4, 0xfd, 0x9b, 0x24, 0x4d, 0x30, 0xa0,
	0x7c, 0x32, 0x03, 0xea, 0x64, 0x31, 0x4f, 0x15, 0x68, 0x10, 0x4a, 0x24, 0xb1, 0x7d, 0x2b, 0xad,
	0xde, 0x4a, 0x46, 0x21, 0xb4, 0x52, 0xd4, 0xfa, 0x49, 0x51, 0x9a, 0x69, 0xb5, 0x1a, 0xc7, 0x31,
	0x62, 0x3a, 0x9e, 0xb3, 0x04, 0x2f, 0x16, 0xf4, 0x3a, 0x29, 0xf6, 0x7e, 0x59, 0x35, 0xe8, 0xff,
	0x85, 0xf3, 0xbd, 0xbd, 0xac, 0xb9, 0xae, 0xd1, 0x1b, 0x05, 0xb6, 0x6e, 0x19, 0x40, 0x22, 0x32,
	0x03, 0xbe, 0x13, 0x63, 0x21, 0xf1, 0xc0, 0x2a, 0xd0, 0xda, 0x6a, 0xec, 0x3a, 0xbb, 0x57, 0xc5,
	0xfd, 0x0c, 0xab, 0x1c, 0x0f, 0xd8, 0x08, 0xbb, 0x56, 0x86, 0x14, 0x12, 0x58, 0x35, 0xeb, 0x89,
	0xc3, 0xbc, 0x0e, 0x2e, 0xd6, 0xe0, 0xab, 0x12, 0xd4, 0x13, 0x0a, 0xb3, 0xd0, 0xcf, 0xd0, 0xdd,
	0x36, 0x80, 0xc3, 0x7c, 0x1f, 0x3b, 0xe1, 0x6b, 0x95, 0x4c, 0x31, 0x67, 0x41, 0x8f, 0x67, 0x6b,
	0xef, 0xa0, 0x78, 0x08, 0x93, 0x35, 0x7e, 0x8d, 0x7a, 0x43, 0x4d, 0xa8, 0x91, 0x4c, 0x22, 0xda,
	0x52, 0x53, 0x69, 0x57, 0xcc, 0xbc, 0xe9, 0x5e, 0x15, 0xf9, 0x44, 0x85, 0x6a, 0xc6, 0xd9, 0xbc,
	0xea, 0x9b, 0x45, 0xd4, 0x84, 0x3a, 0x4b, 0xf7, 0xa6, 0xce, 0xc5, 0x59, 0xea, 0x2c, 0xe7, 0xd4,
	0x39, 0x7b, 0xa0, 0xdd, 0xe7, 0x2a, 0x6c, 0x1c, 0x78, 0x1e, 0xc7, 0x9e, 0x2d, 0xb1, 0x9b, 0xdd,
	0xca, 0x1e, 0xe6, 0x23, 0xe2, 0x60, 0x14, 0x40, 0xa3, 0x27, 0x39, 0xb6, 0x07, 0x59, 0x50, 0x96,
	0x74, 0xb7, 0xa8, 0xa1, 0x1b, 0x4f, 0x9b, 0xfe, 0xd3, 0xac, 0xb0, 0x58, 0x3a, 0xad, 0x85, 0xb6,
	0xb2, 0xa7, 0xa0, 0x67, 0x0a, 0x6c, 0xe7, 0x1e, 0x8a, 0xa2, 0xbc, 0x7b, 0xf3, 0xbe, 0xae, 0xfa,
	0xfe, 0x1c, 0x27, 0xf2, 0xd5, 0x74, 0x47, 0xb0, 0x92, 0xe6, 0xed, 0x45, 0x5f, 0xe4, 0xc2, 0xfa,
	0x91, 0x90, 0xf6, 0xb9, 0x4f, 0xc4, 0xe5, 0xb5, 0x2b, 0x1a, 0x11, 0xfa, 0xf1, 0x2e, 0x37, 0x4f,
	0xdf, 0x9a, 0x26, 0x03, 0x91, 0xe4, 0x95, 0xb0, 0x7c, 0x0d, 0x4e, 0x68, 0x7f, 0x5a, 0xd6, 0xe9,
	0x78, 0xfa, 0x9d, 0x8a, 0x8a, 0xb3, 0x1e, 0xee, 0xbc, 0x78, 0xb7, 0xad, 0x3c, 0x6c, 0xc4, 0x07,
	0x08, 0xeb, 0xd8, 0x01, 0xe9, 0xe4, 0xff, 0xe4, 0xce, 0x97, 0xa2, 0x3f, 0xb8, 0x5f, 0x3f, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xfc, 0xe5, 0xbe, 0x38, 0x3b, 0x0a, 0x00, 0x00,
}
