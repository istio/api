// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mcp/v1alpha1/mcp.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Client) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetMetadata()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ClientValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ClientValidationError is the validation error returned by Client.Validate if
// the designated constraints aren't met.
type ClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientValidationError) ErrorName() string { return "ClientValidationError" }

// Error satisfies the builtin error interface
func (e ClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientValidationError{}

// Validate checks the field values on MeshConfigRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MeshConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VersionInfo

	if v, ok := interface{}(m.GetClient()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return MeshConfigRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TypeUrl

	// no validation rules for ResponseNonce

	if v, ok := interface{}(m.GetErrorDetail()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return MeshConfigRequestValidationError{
				field:  "ErrorDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MeshConfigRequestValidationError is the validation error returned by
// MeshConfigRequest.Validate if the designated constraints aren't met.
type MeshConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshConfigRequestValidationError) ErrorName() string {
	return "MeshConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MeshConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshConfigRequestValidationError{}

// Validate checks the field values on MeshConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeshConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VersionInfo

	for idx, item := range m.GetEnvelopes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return MeshConfigResponseValidationError{
					field:  fmt.Sprintf("Envelopes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TypeUrl

	// no validation rules for Nonce

	return nil
}

// MeshConfigResponseValidationError is the validation error returned by
// MeshConfigResponse.Validate if the designated constraints aren't met.
type MeshConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshConfigResponseValidationError) ErrorName() string {
	return "MeshConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MeshConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshConfigResponseValidationError{}

// Validate checks the field values on IncrementalMeshConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IncrementalMeshConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetClient()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return IncrementalMeshConfigRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TypeUrl

	// no validation rules for InitialResourceVersions

	// no validation rules for ResponseNonce

	if v, ok := interface{}(m.GetErrorDetail()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return IncrementalMeshConfigRequestValidationError{
				field:  "ErrorDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IncrementalMeshConfigRequestValidationError is the validation error returned
// by IncrementalMeshConfigRequest.Validate if the designated constraints
// aren't met.
type IncrementalMeshConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrementalMeshConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrementalMeshConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrementalMeshConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrementalMeshConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrementalMeshConfigRequestValidationError) ErrorName() string {
	return "IncrementalMeshConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IncrementalMeshConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrementalMeshConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrementalMeshConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrementalMeshConfigRequestValidationError{}

// Validate checks the field values on IncrementalMeshConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IncrementalMeshConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SystemVersionInfo

	for idx, item := range m.GetEnvelopes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return IncrementalMeshConfigResponseValidationError{
					field:  fmt.Sprintf("Envelopes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Nonce

	return nil
}

// IncrementalMeshConfigResponseValidationError is the validation error
// returned by IncrementalMeshConfigResponse.Validate if the designated
// constraints aren't met.
type IncrementalMeshConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrementalMeshConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrementalMeshConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrementalMeshConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrementalMeshConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrementalMeshConfigResponseValidationError) ErrorName() string {
	return "IncrementalMeshConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IncrementalMeshConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrementalMeshConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrementalMeshConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrementalMeshConfigResponseValidationError{}
