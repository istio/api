{
  "openapi": "3.0.0",
  "info": {
    "title": "",
    "version": "v1alpha1"
  },
  "components": {
    "schemas": {
      "istio.mcp.v1alpha1.SinkNode": {
        "description": "Identifies a specific MCP sink node instance. The node identifier is\n presented to the resource source, which may use this identifier\n to distinguish per sink configuration for serving. This\n information is not authoritative. Authoritative identity should come\n from the underlying transport layer (e.g. rpc credentials).",
        "type": "object",
        "required": [
          "annotations"
        ],
        "properties": {
          "id": {
            "description": "An opaque identifier for the MCP node.",
            "type": "string",
            "format": "string"
          },
          "annotations": {
            "description": "Opaque annotations extending the node identifier.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "string"
            }
          }
        }
      },
      "istio.mcp.v1alpha1.MeshConfigRequest": {
        "description": "A MeshConfigRequest requests a set of versioned resources of the\n same type for a given client.",
        "type": "object",
        "properties": {
          "typeUrl": {
            "description": "Type of the resource that is being requested, e.g.\n \"type.googleapis.com/istio.io.networking.v1alpha3.VirtualService\".",
            "type": "string",
            "format": "string"
          },
          "versionInfo": {
            "description": "The version_info provided in the request messages will be the\n version_info received with the most recent successfully processed\n response or empty on the first request. It is expected that no\n new request is sent after a response is received until the client\n instance is ready to ACK/NACK the new configuration. ACK/NACK\n takes place by returning the new API config version as applied or\n the previous API config version respectively. Each type_url (see\n below) has an independent version associated with it.",
            "type": "string",
            "format": "string"
          },
          "sinkNode": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.SinkNode"
          },
          "responseNonce": {
            "description": "The nonce corresponding to MeshConfigResponse being\n ACK/NACKed. See above discussion on version_info and the\n MeshConfigResponse nonce comment. This may be empty if no nonce is\n available, e.g. at startup.",
            "type": "string",
            "format": "string"
          },
          "errorDetail": {
            "$ref": "#/components/schemas/google.rpc.Status"
          }
        }
      },
      "istio.mcp.v1alpha1.MeshConfigResponse": {
        "description": "A MeshConfigResponse delivers a set of versioned resources of the\n same type in response to a MeshConfigRequest.",
        "type": "object",
        "properties": {
          "typeUrl": {
            "description": "Type URL for resources wrapped in the provided resources(s). This\n must be consistent with the type_url in the wrapper messages if\n resources is non-empty.",
            "type": "string",
            "format": "string"
          },
          "versionInfo": {
            "description": "The version of the response data.",
            "type": "string",
            "format": "string"
          },
          "nonce": {
            "description": "The nonce provides a way to explicitly ack a specific\n MeshConfigResponse in a following MeshConfigRequest. Additional\n messages may have been sent by client to the management server for\n the previous version on the stream prior to this\n MeshConfigResponse, that were unprocessed at response send\n time. The nonce allows the management server to ignore any\n further MeshConfigRequests for the previous version until a\n MeshConfigRequest bearing the nonce.",
            "type": "string",
            "format": "string"
          }
        }
      },
      "istio.mcp.v1alpha1.IncrementalMeshConfigRequest": {
        "description": "IncrementalMeshConfigRequest are be sent in 2 situations:\n\n   1. Initial message in a MCP bidirectional gRPC stream.",
        "type": "object",
        "required": [
          "initialResourceVersions"
        ],
        "properties": {
          "typeUrl": {
            "description": "Type of the resource that is being requested, e.g.\n \"type.googleapis.com/istio.io.networking.v1alpha3.VirtualService\".",
            "type": "string",
            "format": "string"
          },
          "sinkNode": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.SinkNode"
          },
          "responseNonce": {
            "description": "When the IncrementalMeshConfigRequest is a ACK or NACK message in response\n to a previous IncrementalMeshConfigResponse, the response_nonce must be the\n nonce in the IncrementalMeshConfigResponse.\n Otherwise response_nonce must be omitted.",
            "type": "string",
            "format": "string"
          },
          "errorDetail": {
            "$ref": "#/components/schemas/google.rpc.Status"
          },
          "initialResourceVersions": {
            "description": "When the IncrementalMeshConfigRequest is the first in a stream,\n the initial_resource_versions must be populated. Otherwise,\n initial_resource_versions must be omitted. The keys are the\n resources names of the MCP resources known to the MCP client. The\n values in the map are the associated resource level version info.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "string"
            }
          }
        }
      },
      "istio.mcp.v1alpha1.IncrementalMeshConfigResponse": {
        "description": "IncrementalMeshConfigResponses do not need to include a full\n snapshot of the tracked resources. Instead they are a diff to the\n state of a MCP client. Per resource versions allow servers and\n clients to track state at the resource granularity. An MCP\n incremental session is always in the context of a gRPC\n bidirectional stream. This allows the MCP server to keep track of\n the state of MCP clients connected to it.",
        "type": "object",
        "properties": {
          "nonce": {
            "description": "The nonce provides a way for IncrementalMeshConfigRequests to\n uniquely reference an IncrementalMeshConfigResponse. The nonce is\n required.",
            "type": "string",
            "format": "string"
          },
          "systemVersionInfo": {
            "description": "The version of the response data (used for debugging).",
            "type": "string",
            "format": "string"
          },
          "removedResources": {
            "description": "Resources names of resources that have be deleted and to be\n removed from the MCP Client.  Removed resources for missing\n resources can be ignored.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "string"
            }
          }
        }
      },
      "istio.mcp.v1alpha1.RequestResources": {
        "description": "A RequestResource can be sent in two situations:\n\n Initial message in an MCP bidirectional change stream\n as an ACK or NACK response to a previous Resources. In\n this case the response_nonce is set to the nonce value\n in the Resources. ACK/NACK is determined by the presence\n of error_detail.",
        "type": "object",
        "required": [
          "initialResourceVersions"
        ],
        "properties": {
          "sinkNode": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.SinkNode"
          },
          "responseNonce": {
            "description": "When the RequestResources is an ACK or NACK message in response to a previous RequestResources,\n the response_nonce must be the nonce in the RequestResources. Otherwise response_nonce must\n be omitted.",
            "type": "string",
            "format": "string"
          },
          "errorDetail": {
            "$ref": "#/components/schemas/google.rpc.Status"
          },
          "initialResourceVersions": {
            "description": "When the RequestResources is the first in a stream, the initial_resource_versions must\n be populated. Otherwise, initial_resource_versions must be omitted. The keys are the\n resources names of the MCP resources known to the MCP client. The values in the map\n are the associated resource level version info.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "string"
            }
          },
          "collection": {
            "description": "Type of resource collection that is being requested, e.g.",
            "type": "string",
            "format": "string"
          },
          "incremental": {
            "description": "Request an incremental update for the specified collection. The source may choose to\n honor this request or ignore and and provide a full-state update in the corresponding\n `Resource` response.",
            "type": "boolean"
          }
        }
      },
      "istio.mcp.v1alpha1.Resources": {
        "description": "Resources do not need to include a full snapshot of the tracked\n resources. Instead they are a diff to the state of a MCP client.\n Per resource versions allow sources and sinks to track state at\n the resource granularity. An MCP incremental session is always\n in the context of a gRPC bidirectional stream. This allows the\n MCP source to keep track of the state of MCP sink connected to\n it.",
        "type": "object",
        "properties": {
          "nonce": {
            "description": "Required. The nonce provides a way for RequestChange to uniquely\n reference a RequestResources.",
            "type": "string",
            "format": "string"
          },
          "systemVersionInfo": {
            "description": "The version of the response data (used for debugging).",
            "type": "string",
            "format": "string"
          },
          "removedResources": {
            "description": "Names of resources that have been deleted and to be\n removed from the MCP sink node. Removed resources for missing\n resources can be ignored.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "string"
            }
          },
          "collection": {
            "description": "Type of resource collection that is being requested, e.g.",
            "type": "string",
            "format": "string"
          },
          "incremental": {
            "description": "This resource response is an incremental update. The source should only send\n incremental updates if the sink requested them.",
            "type": "boolean"
          }
        }
      },
      "istio.mcp.v1alpha1.Metadata": {
        "description": "Metadata information that all resources within the Mesh Configuration Protocol must have.",
        "type": "object",
        "required": [
          "annotations",
          "labels"
        ],
        "properties": {
          "name": {
            "description": "Fully qualified name of the resource. Unique in context of a collection.",
            "type": "string",
            "format": "string"
          },
          "annotations": {
            "description": "Map of string keys and values that can be used by source and sink to communicate\n arbitrary metadata about this resource.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "string"
            }
          },
          "createTime": {
            "$ref": "#/components/schemas/google.protobuf.Timestamp"
          },
          "version": {
            "description": "Resource version. This is used to determine when resources change across\n resource updates. It should be treated as opaque by consumers/sinks.",
            "type": "string",
            "format": "string"
          },
          "labels": {
            "description": "Map of string keys and values that can be used to organize and categorize\n resources within a collection.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "string"
            }
          }
        }
      },
      "istio.mcp.v1alpha1.Resource": {
        "description": "Resource as transferred via the Mesh Configuration Protocol. Each\n resource is made up of common metadata, and a type-specific resource payload.",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/components/schemas/google.protobuf.Any"
          },
          "metadata": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.Metadata"
          }
        }
      },
      "google.protobuf.Any": {
        "description": "The primary payload for the resource.",
        "type": "object",
        "properties": {
          "typeUrl": {
            "description": "A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).",
            "type": "string",
            "format": "string"
          },
          "value": {
            "description": "Must be a valid serialized protocol buffer of the above specified type.",
            "type": "string",
            "format": "byte"
          }
        }
      },
      "google.protobuf.Timestamp": {
        "description": "The creation timestamp of the resource.",
        "type": "object",
        "properties": {
          "seconds": {
            "description": "Represents seconds of UTC time since Unix epoch\n 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n 9999-12-31T23:59:59Z inclusive.",
            "type": "integer",
            "format": "int64"
          },
          "nanos": {
            "description": "Non-negative fractions of a second at nanosecond resolution. Negative\n second values with fractions must still have non-negative nanos values\n that count forward in time. Must be from 0 to 999,999,999\n inclusive.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "google.rpc.Status": {
        "description": "This is populated when the previously received resources could not be applied\n The *message* field in *error_details* provides the source internal error\n related to the failure.",
        "type": "object",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of\n [google.rpc.Code][google.rpc.Code].",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any\n user-facing error message should be localized and sent in the\n [google.rpc.Status.details][google.rpc.Status.details] field, or localized\n by the client.",
            "type": "string",
            "format": "string"
          },
          "details": {
            "description": "A list of messages that carry the error details.  There is a common set of\n message types for APIs to use.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            }
          }
        }
      }
    }
  }
}