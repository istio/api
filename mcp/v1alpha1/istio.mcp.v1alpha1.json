{
  "openapi": "3.0.1",
  "info": {
    "title": "This package defines the common, core types used by the Mesh Configuration Protocol.",
    "version": "v1alpha1"
  },
  "components": {
    "schemas": {
      "istio.mcp.v1alpha1.IncrementalMeshConfigRequest": {
        "description": "IncrementalMeshConfigRequest are be sent in 2 situations:",
        "properties": {
          "error_detail": {
            "description": "This is populated when the previous IncrementalMeshConfigResponses failed to update configuration. The *message* field in *error_details* provides the client internal exception related to the failure.",
            "properties": {
              "code": {
                "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].",
                "format": "int32",
                "type": "integer"
              },
              "details": {
                "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                "items": {
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.",
                  "properties": {
                    "type_url": {
                      "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).",
                      "type": "string"
                    },
                    "value": {
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "message": {
                "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "initial_resource_versions": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "When the IncrementalMeshConfigRequest is the first in a stream, the initial_resource_versions must be populated. Otherwise, initial_resource_versions must be omitted. The keys are the resources names of the MCP resources known to the MCP client. The values in the map are the associated resource level version info.",
            "type": "object"
          },
          "response_nonce": {
            "description": "When the IncrementalMeshConfigRequest is a ACK or NACK message in response to a previous IncrementalMeshConfigResponse, the response_nonce must be the nonce in the IncrementalMeshConfigResponse. Otherwise response_nonce must be omitted.",
            "type": "string"
          },
          "sink_node": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.SinkNode"
          },
          "type_url": {
            "description": "Type of the resource that is being requested, e.g. \"type.googleapis.com/istio.io.networking.v1alpha3.VirtualService\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.mcp.v1alpha1.IncrementalMeshConfigResponse": {
        "description": "IncrementalMeshConfigResponses do not need to include a full snapshot of the tracked resources. Instead they are a diff to the state of a MCP client. Per resource versions allow servers and clients to track state at the resource granularity. An MCP incremental session is always in the context of a gRPC bidirectional stream. This allows the MCP server to keep track of the state of MCP clients connected to it.",
        "properties": {
          "nonce": {
            "description": "The nonce provides a way for IncrementalMeshConfigRequests to uniquely reference an IncrementalMeshConfigResponse. The nonce is required.",
            "type": "string"
          },
          "removed_resources": {
            "description": "Resources names of resources that have be deleted and to be removed from the MCP Client. Removed resources for missing resources can be ignored.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resources": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.Resource"
          },
          "system_version_info": {
            "description": "The version of the response data (used for debugging).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.mcp.v1alpha1.MeshConfigRequest": {
        "description": "A MeshConfigRequest requests a set of versioned resources of the same type for a given client.",
        "properties": {
          "error_detail": {
            "description": "This is populated when the previous MeshConfigResponse failed to update configuration. The *message* field in *error_details* provides the client internal exception related to the failure. It is only intended for consumption during manual debugging, the string provided is not guaranteed to be stable across client versions.",
            "properties": {
              "code": {
                "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].",
                "format": "int32",
                "type": "integer"
              },
              "details": {
                "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                "items": {
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.",
                  "properties": {
                    "type_url": {
                      "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).",
                      "type": "string"
                    },
                    "value": {
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "message": {
                "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "response_nonce": {
            "description": "The nonce corresponding to MeshConfigResponse being ACK/NACKed. See above discussion on version_info and the MeshConfigResponse nonce comment. This may be empty if no nonce is available, e.g. at startup.",
            "type": "string"
          },
          "sink_node": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.SinkNode"
          },
          "type_url": {
            "description": "Type of the resource that is being requested, e.g. \"type.googleapis.com/istio.io.networking.v1alpha3.VirtualService\".",
            "type": "string"
          },
          "version_info": {
            "description": "The version_info provided in the request messages will be the version_info received with the most recent successfully processed response or empty on the first request. It is expected that no new request is sent after a response is received until the client instance is ready to ACK/NACK the new configuration. ACK/NACK takes place by returning the new API config version as applied or the previous API config version respectively. Each type_url (see below) has an independent version associated with it.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.mcp.v1alpha1.MeshConfigResponse": {
        "description": "A MeshConfigResponse delivers a set of versioned resources of the same type in response to a MeshConfigRequest.",
        "properties": {
          "nonce": {
            "description": "The nonce provides a way to explicitly ack a specific MeshConfigResponse in a following MeshConfigRequest. Additional messages may have been sent by client to the management server for the previous version on the stream prior to this MeshConfigResponse, that were unprocessed at response send time. The nonce allows the management server to ignore any further MeshConfigRequests for the previous version until a MeshConfigRequest bearing the nonce.",
            "type": "string"
          },
          "resources": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.Resource"
          },
          "type_url": {
            "description": "Type URL for resources wrapped in the provided resources(s). This must be consistent with the type_url in the wrapper messages if resources is non-empty.",
            "type": "string"
          },
          "version_info": {
            "description": "The version of the response data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.mcp.v1alpha1.Metadata": {
        "description": "Metadata information that all resources within the Mesh Configuration Protocol must have.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map of string keys and values that can be used by source and sink to communicate arbitrary metadata about this resource.",
            "type": "object"
          },
          "create_time": {
            "description": "The creation timestamp of the resource.",
            "properties": {
              "nanos": {
                "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
                "format": "int32",
                "type": "integer"
              },
              "seconds": {
                "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map of string keys and values that can be used to organize and categorize resources within a collection.",
            "type": "object"
          },
          "name": {
            "description": "Fully qualified name of the resource. Unique in context of a collection.",
            "type": "string"
          },
          "version": {
            "description": "Resource version. This is used to determine when resources change across resource updates. It should be treated as opaque by consumers/sinks.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.mcp.v1alpha1.RequestResources": {
        "description": "A RequestResource can be sent in two situations:",
        "properties": {
          "collection": {
            "description": "Type of resource collection that is being requested, e.g.",
            "type": "string"
          },
          "error_detail": {
            "description": "This is populated when the previously received resources could not be applied The *message* field in *error_details* provides the source internal error related to the failure.",
            "properties": {
              "code": {
                "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].",
                "format": "int32",
                "type": "integer"
              },
              "details": {
                "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                "items": {
                  "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.",
                  "properties": {
                    "type_url": {
                      "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).",
                      "type": "string"
                    },
                    "value": {
                      "description": "Must be a valid serialized protocol buffer of the above specified type.",
                      "format": "byte",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "message": {
                "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "incremental": {
            "description": "Request an incremental update for the specified collection. The source may choose to honor this request or ignore and and provide a full-state update in the corresponding `Resource` response.",
            "type": "boolean"
          },
          "initial_resource_versions": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "When the RequestResources is the first in a stream, the initial_resource_versions must be populated. Otherwise, initial_resource_versions must be omitted. The keys are the resources names of the MCP resources known to the MCP client. The values in the map are the associated resource level version info.",
            "type": "object"
          },
          "response_nonce": {
            "description": "When the RequestResources is an ACK or NACK message in response to a previous RequestResources, the response_nonce must be the nonce in the RequestResources. Otherwise response_nonce must be omitted.",
            "type": "string"
          },
          "sink_node": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.SinkNode"
          }
        },
        "type": "object"
      },
      "istio.mcp.v1alpha1.Resource": {
        "description": "Resource as transferred via the Mesh Configuration Protocol. Each resource is made up of common metadata, and a type-specific resource payload.",
        "properties": {
          "body": {
            "description": "The primary payload for the resource.",
            "properties": {
              "type_url": {
                "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).",
                "type": "string"
              },
              "value": {
                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                "format": "byte",
                "type": "string"
              }
            },
            "type": "object"
          },
          "metadata": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.Metadata"
          }
        },
        "type": "object"
      },
      "istio.mcp.v1alpha1.Resources": {
        "description": "Resources do not need to include a full snapshot of the tracked resources. Instead they are a diff to the state of a MCP client. Per resource versions allow sources and sinks to track state at the resource granularity. An MCP incremental session is always in the context of a gRPC bidirectional stream. This allows the MCP source to keep track of the state of MCP sink connected to it.",
        "properties": {
          "collection": {
            "description": "Type of resource collection that is being requested, e.g.",
            "type": "string"
          },
          "incremental": {
            "description": "This resource response is an incremental update. The source should only send incremental updates if the sink requested them.",
            "type": "boolean"
          },
          "nonce": {
            "description": "Required. The nonce provides a way for RequestChange to uniquely reference a RequestResources.",
            "type": "string"
          },
          "removed_resources": {
            "description": "Names of resources that have been deleted and to be removed from the MCP sink node. Removed resources for missing resources can be ignored.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resources": {
            "$ref": "#/components/schemas/istio.mcp.v1alpha1.Resource"
          },
          "system_version_info": {
            "description": "The version of the response data (used for debugging).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "istio.mcp.v1alpha1.SinkNode": {
        "description": "Identifies a specific MCP sink node instance. The node identifier is presented to the resource source, which may use this identifier to distinguish per sink configuration for serving. This information is not authoritative. Authoritative identity should come from the underlying transport layer (e.g. rpc credentials).",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Opaque annotations extending the node identifier.",
            "type": "object"
          },
          "id": {
            "description": "An opaque identifier for the MCP node.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  }
}