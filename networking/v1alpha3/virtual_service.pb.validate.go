// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: networking/v1alpha3/virtual_service.proto

package v1alpha3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on VirtualService with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VirtualService) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetHttp() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return VirtualServiceValidationError{
					field:  fmt.Sprintf("Http[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTls() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return VirtualServiceValidationError{
					field:  fmt.Sprintf("Tls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTcp() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return VirtualServiceValidationError{
					field:  fmt.Sprintf("Tcp[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// VirtualServiceValidationError is the validation error returned by
// VirtualService.Validate if the designated constraints aren't met.
type VirtualServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualServiceValidationError) ErrorName() string { return "VirtualServiceValidationError" }

// Error satisfies the builtin error interface
func (e VirtualServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualServiceValidationError{}

// Validate checks the field values on Destination with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Destination) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Host

	// no validation rules for Subset

	if v, ok := interface{}(m.GetPort()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return DestinationValidationError{
				field:  "Port",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DestinationValidationError is the validation error returned by
// Destination.Validate if the designated constraints aren't met.
type DestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DestinationValidationError) ErrorName() string { return "DestinationValidationError" }

// Error satisfies the builtin error interface
func (e DestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DestinationValidationError{}

// Validate checks the field values on HTTPRoute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HTTPRoute) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return HTTPRouteValidationError{
					field:  fmt.Sprintf("Match[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRoute() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return HTTPRouteValidationError{
					field:  fmt.Sprintf("Route[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetRedirect()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPRouteValidationError{
				field:  "Redirect",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRewrite()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPRouteValidationError{
				field:  "Rewrite",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WebsocketUpgrade

	if v, ok := interface{}(m.GetTimeout()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPRouteValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRetries()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPRouteValidationError{
				field:  "Retries",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFault()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPRouteValidationError{
				field:  "Fault",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMirror()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPRouteValidationError{
				field:  "Mirror",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCorsPolicy()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPRouteValidationError{
				field:  "CorsPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppendHeaders

	// no validation rules for AppendResponseHeaders

	// no validation rules for AppendRequestHeaders

	return nil
}

// HTTPRouteValidationError is the validation error returned by
// HTTPRoute.Validate if the designated constraints aren't met.
type HTTPRouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRouteValidationError) ErrorName() string { return "HTTPRouteValidationError" }

// Error satisfies the builtin error interface
func (e HTTPRouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRouteValidationError{}

// Validate checks the field values on TLSRoute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TLSRoute) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return TLSRouteValidationError{
					field:  fmt.Sprintf("Match[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRoute() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return TLSRouteValidationError{
					field:  fmt.Sprintf("Route[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TLSRouteValidationError is the validation error returned by
// TLSRoute.Validate if the designated constraints aren't met.
type TLSRouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSRouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSRouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSRouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSRouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSRouteValidationError) ErrorName() string { return "TLSRouteValidationError" }

// Error satisfies the builtin error interface
func (e TLSRouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLSRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSRouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSRouteValidationError{}

// Validate checks the field values on TCPRoute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TCPRoute) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return TCPRouteValidationError{
					field:  fmt.Sprintf("Match[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRoute() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return TCPRouteValidationError{
					field:  fmt.Sprintf("Route[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TCPRouteValidationError is the validation error returned by
// TCPRoute.Validate if the designated constraints aren't met.
type TCPRouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TCPRouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TCPRouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TCPRouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TCPRouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TCPRouteValidationError) ErrorName() string { return "TCPRouteValidationError" }

// Error satisfies the builtin error interface
func (e TCPRouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTCPRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TCPRouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TCPRouteValidationError{}

// Validate checks the field values on HTTPMatchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HTTPMatchRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUri()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPMatchRequestValidationError{
				field:  "Uri",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScheme()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPMatchRequestValidationError{
				field:  "Scheme",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMethod()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPMatchRequestValidationError{
				field:  "Method",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPMatchRequestValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Headers

	// no validation rules for Port

	// no validation rules for SourceLabels

	return nil
}

// HTTPMatchRequestValidationError is the validation error returned by
// HTTPMatchRequest.Validate if the designated constraints aren't met.
type HTTPMatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPMatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPMatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPMatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPMatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPMatchRequestValidationError) ErrorName() string { return "HTTPMatchRequestValidationError" }

// Error satisfies the builtin error interface
func (e HTTPMatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPMatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPMatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPMatchRequestValidationError{}

// Validate checks the field values on HTTPRouteDestination with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HTTPRouteDestination) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDestination()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPRouteDestinationValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Weight

	// no validation rules for AppendResponseHeaders

	// no validation rules for AppendRequestHeaders

	return nil
}

// HTTPRouteDestinationValidationError is the validation error returned by
// HTTPRouteDestination.Validate if the designated constraints aren't met.
type HTTPRouteDestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRouteDestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRouteDestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRouteDestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRouteDestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRouteDestinationValidationError) ErrorName() string {
	return "HTTPRouteDestinationValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPRouteDestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRouteDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRouteDestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRouteDestinationValidationError{}

// Validate checks the field values on RouteDestination with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RouteDestination) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDestination()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return RouteDestinationValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Weight

	return nil
}

// RouteDestinationValidationError is the validation error returned by
// RouteDestination.Validate if the designated constraints aren't met.
type RouteDestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteDestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteDestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteDestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteDestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteDestinationValidationError) ErrorName() string { return "RouteDestinationValidationError" }

// Error satisfies the builtin error interface
func (e RouteDestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteDestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteDestinationValidationError{}

// Validate checks the field values on L4MatchAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *L4MatchAttributes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Port

	// no validation rules for SourceSubnet

	// no validation rules for SourceLabels

	return nil
}

// L4MatchAttributesValidationError is the validation error returned by
// L4MatchAttributes.Validate if the designated constraints aren't met.
type L4MatchAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e L4MatchAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e L4MatchAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e L4MatchAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e L4MatchAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e L4MatchAttributesValidationError) ErrorName() string {
	return "L4MatchAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e L4MatchAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sL4MatchAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = L4MatchAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = L4MatchAttributesValidationError{}

// Validate checks the field values on TLSMatchAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TLSMatchAttributes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Port

	// no validation rules for SourceSubnet

	// no validation rules for SourceLabels

	return nil
}

// TLSMatchAttributesValidationError is the validation error returned by
// TLSMatchAttributes.Validate if the designated constraints aren't met.
type TLSMatchAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSMatchAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSMatchAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSMatchAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSMatchAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSMatchAttributesValidationError) ErrorName() string {
	return "TLSMatchAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e TLSMatchAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLSMatchAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSMatchAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSMatchAttributesValidationError{}

// Validate checks the field values on HTTPRedirect with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HTTPRedirect) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	// no validation rules for Authority

	return nil
}

// HTTPRedirectValidationError is the validation error returned by
// HTTPRedirect.Validate if the designated constraints aren't met.
type HTTPRedirectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRedirectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRedirectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRedirectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRedirectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRedirectValidationError) ErrorName() string { return "HTTPRedirectValidationError" }

// Error satisfies the builtin error interface
func (e HTTPRedirectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRedirect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRedirectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRedirectValidationError{}

// Validate checks the field values on HTTPRewrite with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HTTPRewrite) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	// no validation rules for Authority

	return nil
}

// HTTPRewriteValidationError is the validation error returned by
// HTTPRewrite.Validate if the designated constraints aren't met.
type HTTPRewriteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRewriteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRewriteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRewriteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRewriteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRewriteValidationError) ErrorName() string { return "HTTPRewriteValidationError" }

// Error satisfies the builtin error interface
func (e HTTPRewriteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRewrite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRewriteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRewriteValidationError{}

// Validate checks the field values on StringMatch with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringMatch) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MatchType.(type) {

	case *StringMatch_Exact:
		// no validation rules for Exact

	case *StringMatch_Prefix:
		// no validation rules for Prefix

	case *StringMatch_Regex:
		// no validation rules for Regex

	}

	return nil
}

// StringMatchValidationError is the validation error returned by
// StringMatch.Validate if the designated constraints aren't met.
type StringMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringMatchValidationError) ErrorName() string { return "StringMatchValidationError" }

// Error satisfies the builtin error interface
func (e StringMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringMatchValidationError{}

// Validate checks the field values on HTTPRetry with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HTTPRetry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Attempts

	if v, ok := interface{}(m.GetPerTryTimeout()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPRetryValidationError{
				field:  "PerTryTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// HTTPRetryValidationError is the validation error returned by
// HTTPRetry.Validate if the designated constraints aren't met.
type HTTPRetryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRetryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRetryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRetryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRetryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRetryValidationError) ErrorName() string { return "HTTPRetryValidationError" }

// Error satisfies the builtin error interface
func (e HTTPRetryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRetry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRetryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRetryValidationError{}

// Validate checks the field values on CorsPolicy with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CorsPolicy) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMaxAge()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CorsPolicyValidationError{
				field:  "MaxAge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAllowCredentials()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CorsPolicyValidationError{
				field:  "AllowCredentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CorsPolicyValidationError is the validation error returned by
// CorsPolicy.Validate if the designated constraints aren't met.
type CorsPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CorsPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CorsPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CorsPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CorsPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CorsPolicyValidationError) ErrorName() string { return "CorsPolicyValidationError" }

// Error satisfies the builtin error interface
func (e CorsPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCorsPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CorsPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CorsPolicyValidationError{}

// Validate checks the field values on HTTPFaultInjection with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HTTPFaultInjection) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDelay()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPFaultInjectionValidationError{
				field:  "Delay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAbort()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPFaultInjectionValidationError{
				field:  "Abort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// HTTPFaultInjectionValidationError is the validation error returned by
// HTTPFaultInjection.Validate if the designated constraints aren't met.
type HTTPFaultInjectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPFaultInjectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPFaultInjectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPFaultInjectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPFaultInjectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPFaultInjectionValidationError) ErrorName() string {
	return "HTTPFaultInjectionValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPFaultInjectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPFaultInjection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPFaultInjectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPFaultInjectionValidationError{}

// Validate checks the field values on PortSelector with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PortSelector) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Port.(type) {

	case *PortSelector_Number:
		// no validation rules for Number

	case *PortSelector_Name:
		// no validation rules for Name

	}

	return nil
}

// PortSelectorValidationError is the validation error returned by
// PortSelector.Validate if the designated constraints aren't met.
type PortSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortSelectorValidationError) ErrorName() string { return "PortSelectorValidationError" }

// Error satisfies the builtin error interface
func (e PortSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortSelectorValidationError{}

// Validate checks the field values on Percent with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Percent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// PercentValidationError is the validation error returned by Percent.Validate
// if the designated constraints aren't met.
type PercentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PercentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PercentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PercentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PercentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PercentValidationError) ErrorName() string { return "PercentValidationError" }

// Error satisfies the builtin error interface
func (e PercentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPercent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PercentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PercentValidationError{}

// Validate checks the field values on HTTPFaultInjection_Delay with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HTTPFaultInjection_Delay) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Percent

	if v, ok := interface{}(m.GetPercentage()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPFaultInjection_DelayValidationError{
				field:  "Percentage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.HttpDelayType.(type) {

	case *HTTPFaultInjection_Delay_FixedDelay:

		if v, ok := interface{}(m.GetFixedDelay()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return HTTPFaultInjection_DelayValidationError{
					field:  "FixedDelay",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HTTPFaultInjection_Delay_ExponentialDelay:

		if v, ok := interface{}(m.GetExponentialDelay()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return HTTPFaultInjection_DelayValidationError{
					field:  "ExponentialDelay",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HTTPFaultInjection_DelayValidationError is the validation error returned by
// HTTPFaultInjection_Delay.Validate if the designated constraints aren't met.
type HTTPFaultInjection_DelayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPFaultInjection_DelayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPFaultInjection_DelayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPFaultInjection_DelayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPFaultInjection_DelayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPFaultInjection_DelayValidationError) ErrorName() string {
	return "HTTPFaultInjection_DelayValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPFaultInjection_DelayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPFaultInjection_Delay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPFaultInjection_DelayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPFaultInjection_DelayValidationError{}

// Validate checks the field values on HTTPFaultInjection_Abort with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HTTPFaultInjection_Abort) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Percent

	if v, ok := interface{}(m.GetPercentage()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return HTTPFaultInjection_AbortValidationError{
				field:  "Percentage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.ErrorType.(type) {

	case *HTTPFaultInjection_Abort_HttpStatus:
		// no validation rules for HttpStatus

	case *HTTPFaultInjection_Abort_GrpcStatus:
		// no validation rules for GrpcStatus

	case *HTTPFaultInjection_Abort_Http2Error:
		// no validation rules for Http2Error

	}

	return nil
}

// HTTPFaultInjection_AbortValidationError is the validation error returned by
// HTTPFaultInjection_Abort.Validate if the designated constraints aren't met.
type HTTPFaultInjection_AbortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPFaultInjection_AbortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPFaultInjection_AbortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPFaultInjection_AbortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPFaultInjection_AbortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPFaultInjection_AbortValidationError) ErrorName() string {
	return "HTTPFaultInjection_AbortValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPFaultInjection_AbortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPFaultInjection_Abort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPFaultInjection_AbortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPFaultInjection_AbortValidationError{}
