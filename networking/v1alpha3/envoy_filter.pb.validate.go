// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: networking/v1alpha3/envoy_filter.proto

package v1alpha3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on EnvoyFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnvoyFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WorkloadLabels

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EnvoyFilterValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EnvoyFilterValidationError is the validation error returned by
// EnvoyFilter.Validate if the designated constraints aren't met.
type EnvoyFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvoyFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvoyFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvoyFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvoyFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvoyFilterValidationError) ErrorName() string { return "EnvoyFilterValidationError" }

// Error satisfies the builtin error interface
func (e EnvoyFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvoyFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvoyFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvoyFilterValidationError{}

// Validate checks the field values on EnvoyFilter_ListenerMatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnvoyFilter_ListenerMatch) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PortNumber

	// no validation rules for PortNamePrefix

	// no validation rules for ListenerType

	// no validation rules for ListenerProtocol

	return nil
}

// EnvoyFilter_ListenerMatchValidationError is the validation error returned by
// EnvoyFilter_ListenerMatch.Validate if the designated constraints aren't met.
type EnvoyFilter_ListenerMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvoyFilter_ListenerMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvoyFilter_ListenerMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvoyFilter_ListenerMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvoyFilter_ListenerMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvoyFilter_ListenerMatchValidationError) ErrorName() string {
	return "EnvoyFilter_ListenerMatchValidationError"
}

// Error satisfies the builtin error interface
func (e EnvoyFilter_ListenerMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvoyFilter_ListenerMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvoyFilter_ListenerMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvoyFilter_ListenerMatchValidationError{}

// Validate checks the field values on EnvoyFilter_InsertPosition with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnvoyFilter_InsertPosition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Index

	// no validation rules for RelativeTo

	return nil
}

// EnvoyFilter_InsertPositionValidationError is the validation error returned
// by EnvoyFilter_InsertPosition.Validate if the designated constraints aren't met.
type EnvoyFilter_InsertPositionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvoyFilter_InsertPositionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvoyFilter_InsertPositionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvoyFilter_InsertPositionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvoyFilter_InsertPositionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvoyFilter_InsertPositionValidationError) ErrorName() string {
	return "EnvoyFilter_InsertPositionValidationError"
}

// Error satisfies the builtin error interface
func (e EnvoyFilter_InsertPositionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvoyFilter_InsertPosition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvoyFilter_InsertPositionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvoyFilter_InsertPositionValidationError{}

// Validate checks the field values on EnvoyFilter_Filter with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnvoyFilter_Filter) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetListenerMatch()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return EnvoyFilter_FilterValidationError{
				field:  "ListenerMatch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInsertPosition()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return EnvoyFilter_FilterValidationError{
				field:  "InsertPosition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilterType

	// no validation rules for FilterName

	if v, ok := interface{}(m.GetFilterConfig()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return EnvoyFilter_FilterValidationError{
				field:  "FilterConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EnvoyFilter_FilterValidationError is the validation error returned by
// EnvoyFilter_Filter.Validate if the designated constraints aren't met.
type EnvoyFilter_FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvoyFilter_FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvoyFilter_FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvoyFilter_FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvoyFilter_FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvoyFilter_FilterValidationError) ErrorName() string {
	return "EnvoyFilter_FilterValidationError"
}

// Error satisfies the builtin error interface
func (e EnvoyFilter_FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvoyFilter_Filter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvoyFilter_FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvoyFilter_FilterValidationError{}
