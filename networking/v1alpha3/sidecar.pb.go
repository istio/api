// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: networking/v1alpha3/sidecar.proto

package v1alpha3

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ConfigScope defines the visibility of an Istio configuration artifact in
// a namespace when the namespace is imported.  By default all
// configuration artifacts are public. Configurations with private scope
// will not be imported when the namespace containing the configuration is
// imported in a Sidecar.
type ConfigScope int32

const (
	// Config with this scope are visible to all workloads in the mesh
	ConfigScope_PUBLIC ConfigScope = 0
	// Configs with this scope are visible to only workloads in the same
	// namespace as the configuration resource.
	ConfigScope_PRIVATE ConfigScope = 1
)

var ConfigScope_name = map[int32]string{
	0: "PUBLIC",
	1: "PRIVATE",
}
var ConfigScope_value = map[string]int32{
	"PUBLIC":  0,
	"PRIVATE": 1,
}

func (x ConfigScope) String() string {
	return proto.EnumName(ConfigScope_name, int32(x))
}
func (ConfigScope) EnumDescriptor() ([]byte, []int) { return fileDescriptorSidecar, []int{0} }

// `Sidecar` describes the describes the configuration of the sidecar proxy
// that mediates inbound and outbound communication to the workload it is
// attached to. By default, Istio will program all sidecar proxies in the
// mesh with the necessary configuration required to reach every workload
// in the mesh, as well as accept traffic on all the ports associated with
// the workload. The Sidecar resource provides a way to fine tune the set
// of ports, protocols that the proxy will accept when forwarding traffic
// to and from the workload. In addition, it is possible to restrict the
// set of services that the proxy can reach when forwarding outbound
// traffic from the workload.
//
// Services and configuration in a mesh are organized into one or more
// namespaces (e.g., a Kubernetes namespace or a CF org/space). A Sidecar
// resource in a namespace will apply to all workloads in the namespace in
// the absence of a workload selector.  *_Currently, each namespace should
// have only one Sidecar resource without any workload selector_*. The
// behavior of the system is undefined if more than one Sidecar resource
// exists in a given namespace.
//
// The example below delcares a Sidecar resource in the prod-us1 namespace
// that configures the sidecar to proxy egress traffic for services in the
// prod-us1 and prod-apis namespaces, and the policy and telemetry service
// (if enabled) in the istio-system namespace.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: Sidecar
// metadata:
//   name: default
//   namespace: prod-us1
// spec:
//   egress:
//   - hosts:
//     - "prod-us1/*"
//     - "prod-apis/*"
//     - "istio-system/*"
// ```
//
// The example below delcares a Sidecar resource in the prod-us1 namespace
// that accepts inbound HTTP traffic on port 9080 and forwards
// it to the attached workload listening on a unix domain socket. In the
// egress direction, in addition to the istio-system namespace, the sidecar
// proxies only HTTP traffic bound for port 9080 for services in the
// prod-us1 namespace.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: Sidecar
// metadata:
//   name: default
//   namespace: prod-us1
// spec:
//   ingress:
//   - port:
//       number: 9080
//       protocol: HTTP
//       name: somename
//     defaultEndpoint: unix:///var/run/someuds.sock
//   egress:
//   - hosts:
//     - "istio-system/*"
//   - port:
//       number: 9080
//       protocol: HTTP
//       name: egresshttp
//     hosts:
//     - "prod-us1/*"
// ```
//
type Sidecar struct {
	// $hide_from_docs
	// Criteria used to select the specific set of pods/VMs on which this
	// sidecar configuration should be applied. If omitted, the sidecar
	// configuration will be applied to all workloads in the current config
	// namespace.
	WorkloadSelector *WorkloadSelector `protobuf:"bytes,1,opt,name=workload_selector,json=workloadSelector" json:"workload_selector,omitempty"`
	// Ingress specifies the configuration of the sidecar for processing
	// inbound traffic to the attached workload. If omitted, Istio will
	// autoconfigure the sidecar based on the information about the workload
	// obtained from the service registry (e.g., exposed ports, services,
	// etc.).
	Ingress []*IstioListener `protobuf:"bytes,2,rep,name=ingress" json:"ingress,omitempty"`
	// Egress specifies the configuration of the sidecar for processing
	// outbound traffic from the attached workload to other services in the
	// mesh. If omitted, Istio will autoconfigure the sidecar to be able to
	// reach every service in the mesh.  etc.).
	Egress []*IstioListener `protobuf:"bytes,3,rep,name=egress" json:"egress,omitempty"`
}

func (m *Sidecar) Reset()                    { *m = Sidecar{} }
func (m *Sidecar) String() string            { return proto.CompactTextString(m) }
func (*Sidecar) ProtoMessage()               {}
func (*Sidecar) Descriptor() ([]byte, []int) { return fileDescriptorSidecar, []int{0} }

func (m *Sidecar) GetWorkloadSelector() *WorkloadSelector {
	if m != nil {
		return m.WorkloadSelector
	}
	return nil
}

func (m *Sidecar) GetIngress() []*IstioListener {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *Sidecar) GetEgress() []*IstioListener {
	if m != nil {
		return m.Egress
	}
	return nil
}

// IstioListener specifies the properties of a single listener on the
// sidecar proxy attached to a workload.
type IstioListener struct {
	// An optional arbitrary name associated with the listener used for
	// emitting metrics.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// REQUIRED for ingress. The port associated with the listener. If using
	// unix domain socket, use 0 as the port number, with a valid
	// protocol. In the egress path, the port if specified, will be used as
	// the default destination port associated with the imported hosts. If
	// the port is omitted, Istio will infer the listener ports based on the
	// imported hosts. Note that when multiple egress listeners are
	// specified, where one or more listeners have specific ports while
	// others have no port, the hosts exposed on a listener port will be
	// based on the listener with the most specific port.
	Port *Port `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	// The ip or the unix domain socket to which the listener should be bound
	// to. Port MUST be specified if bindAddress is not empty. Format:
	// x.x.x.x or unix:///path/to/uds or unix://@foobar (Linux abstract
	// namespace). If omitted, Istio will autoconfigure the defaults based on
	// imported services and the workload to which this configuration is
	// applied to.
	BindAddress string `protobuf:"bytes,3,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	// $hide_from_docs
	// When the bind address is an IP:port, the bindToPort option dictates
	// whether or not the sidecar should bind its listener socket to the
	// specified port. Set bindToPort to false (default) if application
	// traffic entering/leaving a pod/VM is captured automatically through
	// iptables redirection and forwarded to the sidecar on a specific port
	// (see proxyListenPort in the global MeshConfig). When not using
	// iptables for traffic capture, set bindToPort to true to force the
	// sidecar to bind to the specified port. Note that the binding might
	// fail if the application workload is already bound to the same port.
	BindToPort bool `protobuf:"varint,4,opt,name=bind_to_port,json=bindToPort,proto3" json:"bind_to_port,omitempty"`
	// Specifies the protocol associated with this listener.  Recognized
	// values are HTTP|TCP|MONGO|MYSQL. Any other value will be treated as
	// equivalent to TCP.
	Protocol string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// One or more services/virtualServices exposed by the listener in
	// namespace/dnsName format.  _*Hosts will be ignored for ingress
	// servers*_. For egress servers, the hosts field results in importing
	// one or more publicly scoped services and VirtualServices from remote
	// namespaces. The service in a namespace can be a service in the service
	// registry (e.g., a kubernetes or cloud foundry service) or a service
	// specified via ServiceEntry configuration. In addition, any publicly
	// scoped DestinationRule associated with the imported services will also
	// be imported.
	//
	// Set the namespace to * to import a particular service from any
	// available namespace (e.g., "*/foo.example.com"). Set the dnsName field
	// to * to import all services from the specified namespace (e.g.,
	// "prod/*"). Wildcard DNS names can be used to import a specific set of
	// services from the specified namespace (e.g., "prod/*.example.com").
	//
	// NOTE: Only exported services and configuration artifacts from a
	// namespace can be imported. Private services/configuration will not be
	// imported. Refer to the scope setting associated with VirtualService,
	// DestinationRule, ServiceEntry, etc. for details.
	Hosts []string `protobuf:"bytes,6,rep,name=hosts" json:"hosts,omitempty"`
	// The IP endpoint or unix domain socket to which traffic should be
	// forwarded to by default. In the context of an ingress server, this
	// configuration can be used to redirect traffic arriving at the bind
	// point on the sidecar to a port or unix domain socket where the
	// application workload is listening for connections. Format should be
	// 127.0.0.1:PORT or unix:///path/to/socket
	DefaultEndpoint string `protobuf:"bytes,7,opt,name=default_endpoint,json=defaultEndpoint,proto3" json:"default_endpoint,omitempty"`
}

func (m *IstioListener) Reset()                    { *m = IstioListener{} }
func (m *IstioListener) String() string            { return proto.CompactTextString(m) }
func (*IstioListener) ProtoMessage()               {}
func (*IstioListener) Descriptor() ([]byte, []int) { return fileDescriptorSidecar, []int{1} }

func (m *IstioListener) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IstioListener) GetPort() *Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *IstioListener) GetBindAddress() string {
	if m != nil {
		return m.BindAddress
	}
	return ""
}

func (m *IstioListener) GetBindToPort() bool {
	if m != nil {
		return m.BindToPort
	}
	return false
}

func (m *IstioListener) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *IstioListener) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *IstioListener) GetDefaultEndpoint() string {
	if m != nil {
		return m.DefaultEndpoint
	}
	return ""
}

func init() {
	proto.RegisterType((*Sidecar)(nil), "istio.networking.v1alpha3.Sidecar")
	proto.RegisterType((*IstioListener)(nil), "istio.networking.v1alpha3.IstioListener")
	proto.RegisterEnum("istio.networking.v1alpha3.ConfigScope", ConfigScope_name, ConfigScope_value)
}
func (m *Sidecar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sidecar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkloadSelector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSidecar(dAtA, i, uint64(m.WorkloadSelector.Size()))
		n1, err := m.WorkloadSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Ingress) > 0 {
		for _, msg := range m.Ingress {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSidecar(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Egress) > 0 {
		for _, msg := range m.Egress {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSidecar(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IstioListener) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstioListener) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSidecar(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Port != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSidecar(dAtA, i, uint64(m.Port.Size()))
		n2, err := m.Port.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.BindAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSidecar(dAtA, i, uint64(len(m.BindAddress)))
		i += copy(dAtA[i:], m.BindAddress)
	}
	if m.BindToPort {
		dAtA[i] = 0x20
		i++
		if m.BindToPort {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSidecar(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.Hosts) > 0 {
		for _, s := range m.Hosts {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DefaultEndpoint) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSidecar(dAtA, i, uint64(len(m.DefaultEndpoint)))
		i += copy(dAtA[i:], m.DefaultEndpoint)
	}
	return i, nil
}

func encodeVarintSidecar(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Sidecar) Size() (n int) {
	var l int
	_ = l
	if m.WorkloadSelector != nil {
		l = m.WorkloadSelector.Size()
		n += 1 + l + sovSidecar(uint64(l))
	}
	if len(m.Ingress) > 0 {
		for _, e := range m.Ingress {
			l = e.Size()
			n += 1 + l + sovSidecar(uint64(l))
		}
	}
	if len(m.Egress) > 0 {
		for _, e := range m.Egress {
			l = e.Size()
			n += 1 + l + sovSidecar(uint64(l))
		}
	}
	return n
}

func (m *IstioListener) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSidecar(uint64(l))
	}
	if m.Port != nil {
		l = m.Port.Size()
		n += 1 + l + sovSidecar(uint64(l))
	}
	l = len(m.BindAddress)
	if l > 0 {
		n += 1 + l + sovSidecar(uint64(l))
	}
	if m.BindToPort {
		n += 2
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovSidecar(uint64(l))
	}
	if len(m.Hosts) > 0 {
		for _, s := range m.Hosts {
			l = len(s)
			n += 1 + l + sovSidecar(uint64(l))
		}
	}
	l = len(m.DefaultEndpoint)
	if l > 0 {
		n += 1 + l + sovSidecar(uint64(l))
	}
	return n
}

func sovSidecar(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSidecar(x uint64) (n int) {
	return sovSidecar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Sidecar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sidecar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sidecar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSidecar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkloadSelector == nil {
				m.WorkloadSelector = &WorkloadSelector{}
			}
			if err := m.WorkloadSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSidecar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ingress = append(m.Ingress, &IstioListener{})
			if err := m.Ingress[len(m.Ingress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Egress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSidecar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Egress = append(m.Egress, &IstioListener{})
			if err := m.Egress[len(m.Egress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSidecar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSidecar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IstioListener) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidecar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IstioListener: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IstioListener: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSidecar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Port == nil {
				m.Port = &Port{}
			}
			if err := m.Port.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindToPort", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BindToPort = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hosts = append(m.Hosts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidecar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSidecar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSidecar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSidecar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSidecar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSidecar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSidecar
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSidecar
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSidecar(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSidecar = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSidecar   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("networking/v1alpha3/sidecar.proto", fileDescriptorSidecar) }

var fileDescriptorSidecar = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xf1, 0xb6, 0x9b, 0xec, 0x4e, 0x40, 0x04, 0x8b, 0x43, 0xd8, 0x43, 0xc9, 0xee, 0x01,
	0x05, 0x90, 0x12, 0xb1, 0x7d, 0x01, 0xda, 0xaa, 0x87, 0x4a, 0x3d, 0x54, 0x69, 0xf9, 0x23, 0x2e,
	0x91, 0x9b, 0xb8, 0xa9, 0x45, 0xf0, 0x44, 0xb6, 0xa1, 0xe2, 0x0d, 0x39, 0xf2, 0x08, 0xa8, 0x37,
	0x5e, 0x81, 0x13, 0x8a, 0x93, 0x82, 0x40, 0xa5, 0x12, 0xb7, 0xcc, 0x37, 0xdf, 0xf7, 0x9b, 0x19,
	0xc5, 0x70, 0x2d, 0xb9, 0xd9, 0xa1, 0x7a, 0x2f, 0x64, 0x99, 0x7c, 0x7a, 0xc1, 0xaa, 0x7a, 0xcb,
	0x86, 0x89, 0x16, 0x05, 0xcf, 0x99, 0x8a, 0x6b, 0x85, 0x06, 0xe9, 0x23, 0xa1, 0x8d, 0xc0, 0xf8,
	0xb7, 0x31, 0x3e, 0x18, 0xaf, 0x8e, 0xa6, 0x4b, 0x66, 0xf8, 0x8e, 0x7d, 0x6e, 0xd3, 0x37, 0xdf,
	0x09, 0xb8, 0xcb, 0x96, 0x47, 0xdf, 0xc2, 0x83, 0xc6, 0x5d, 0x21, 0x2b, 0x32, 0xcd, 0x2b, 0x9e,
	0x1b, 0x54, 0x01, 0x09, 0x49, 0xe4, 0xdd, 0x3e, 0x8f, 0xff, 0x39, 0x25, 0x7e, 0xd3, 0x65, 0x96,
	0x5d, 0x24, 0xf5, 0x77, 0x7f, 0x29, 0x74, 0x0c, 0xae, 0x90, 0xa5, 0xe2, 0x5a, 0x07, 0x67, 0x61,
	0x2f, 0xf2, 0x6e, 0xa3, 0x13, 0xbc, 0x59, 0xd3, 0x99, 0x0b, 0x6d, 0xb8, 0xe4, 0x2a, 0x3d, 0x04,
	0xe9, 0x4b, 0x70, 0x78, 0x8b, 0xe8, 0xfd, 0x27, 0xa2, 0xcb, 0xdd, 0xfc, 0x20, 0x70, 0xef, 0x8f,
	0x0e, 0xa5, 0xd0, 0x97, 0xec, 0x03, 0xb7, 0x47, 0x5e, 0xa6, 0xf6, 0x9b, 0x0e, 0xa1, 0x5f, 0xa3,
	0x32, 0xc1, 0x99, 0x3d, 0xfc, 0xf1, 0x89, 0x29, 0x0b, 0x54, 0x26, 0xb5, 0x66, 0x7a, 0x0d, 0x77,
	0xd7, 0x42, 0x16, 0x19, 0x2b, 0x8a, 0x6e, 0xc5, 0x06, 0xe8, 0x35, 0xda, 0xa8, 0x95, 0x68, 0xd8,
	0x59, 0x0c, 0x66, 0x96, 0xdf, 0x0f, 0x49, 0x74, 0x91, 0x42, 0xa3, 0xad, 0xb0, 0x41, 0xd1, 0x2b,
	0xb8, 0xb0, 0x3f, 0x25, 0xc7, 0x2a, 0x38, 0xb7, 0x80, 0x5f, 0x35, 0x7d, 0x08, 0xe7, 0x5b, 0xd4,
	0x46, 0x07, 0x4e, 0xd8, 0x8b, 0x2e, 0xd3, 0xb6, 0xa0, 0x4f, 0xc1, 0x2f, 0xf8, 0x86, 0x7d, 0xac,
	0x4c, 0xc6, 0x65, 0x51, 0xa3, 0x90, 0x26, 0x70, 0x6d, 0xf2, 0x7e, 0xa7, 0x4f, 0x3b, 0xf9, 0xd9,
	0x13, 0xf0, 0x26, 0x28, 0x37, 0xa2, 0x5c, 0xe6, 0x58, 0x73, 0x0a, 0xe0, 0x2c, 0x5e, 0x8d, 0xe7,
	0xb3, 0x89, 0x7f, 0x87, 0x7a, 0xe0, 0x2e, 0xd2, 0xd9, 0xeb, 0xd1, 0x6a, 0xea, 0x93, 0x71, 0xfc,
	0x65, 0x3f, 0x20, 0x5f, 0xf7, 0x03, 0xf2, 0x6d, 0x3f, 0x20, 0xef, 0xc2, 0xf6, 0x7a, 0x81, 0x09,
	0xab, 0x45, 0x72, 0xe4, 0x39, 0xad, 0x1d, 0xbb, 0xe2, 0xf0, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x49, 0xd2, 0x98, 0x14, 0xaa, 0x02, 0x00, 0x00,
}
