{
  "openapi": "3.0.1",
  "info": {
    "title": "Configuration affecting service registry.",
    "version": "v1alpha3"
  },
  "components": {
    "schemas": {
      "istio.networking.v1alpha3.ServiceEntry": {
        "properties": {
          "addresses": {
            "description": "The virtual IP addresses associated with the service. Could be CIDR prefix. For HTTP traffic, generated route configurations will include http route domains for both the `addresses` and `hosts` field values and the destination will be identified based on the HTTP Host/Authority header. If one or more IP addresses are specified, the incoming traffic will be identified as belonging to this service if the destination IP matches the IP/CIDRs specified in the addresses field. If the Addresses field is empty, traffic will be identified solely based on the destination port. In such scenarios, the port on which the service is being accessed must not be shared by any other service in the mesh. In other words, the sidecar will behave as a simple TCP proxy, forwarding incoming traffic on a specified port to the specified destination endpoint IP/host. Unix domain socket addresses are not supported in this field.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "endpoints": {
            "description": "One or more endpoints associated with the service.",
            "items": {
              "description": "Endpoint defines a network address (IP or hostname) associated with the mesh service.",
              "properties": {
                "address": {
                  "description": "REQUIRED: Address associated with the network endpoint without the port. Domain names can be used if and only if the resolution is set to DNS, and must be fully-qualified without wildcards. Use the form unix:///absolute/path/to/socket for Unix domain socket endpoints.",
                  "type": "string"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "One or more labels associated with the endpoint.",
                  "type": "object"
                },
                "locality": {
                  "description": "The locality associated with the endpoint. A locality corresponds to a failure domain (e.g., country/region/zone). Arbitrary failure domain hierarchies can be represented by separating each encapsulating failure domain by /. For example, the locality of an an endpoint in US, in US-East-1 region, within availability zone az-1, in data center rack r11 can be represented as us/us-east-1/az-1/r11. Istio will configure the sidecar to route to endpoints within the same locality as the sidecar. If none of the endpoints in the locality are available, endpoints parent locality (but within the same network ID) will be chosen. For example, if there are two endpoints in same network (networkID \"n1\"), say e1 with locality us/us-east-1/az-1/r11 and e2 with locality us/us-east-1/az-2/r12, a sidecar from us/us-east-1/az-1/r11 locality will prefer e1 from the same locality over e2 from a different locality. Endpoint e2 could be the IP associated with a gateway (that bridges networks n1 and n2), or the IP associated with a standard service endpoint.",
                  "type": "string"
                },
                "network": {
                  "description": "Network enables Istio to group endpoints resident in the same L3 domain/network. All endpoints in the same network are assumed to be directly reachable from one another. When endpoints in different networks cannot reach each other directly, an Istio Gateway can be used to establish connectivity (usually using the AUTO_PASSTHROUGH mode in a Gateway Server). This is an advanced configuration used typically for spanning an Istio mesh over multiple clusters.",
                  "type": "string"
                },
                "ports": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "description": "Set of ports associated with the endpoint. The ports must be associated with a port name that was declared as part of the service. Do not use for `unix://` addresses.",
                  "type": "object"
                },
                "weight": {
                  "description": "The load balancing weight associated with the endpoint. Endpoints with higher weights will receive proportionally higher traffic.",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "export_to": {
            "description": "A list of namespaces to which this service is exported. Exporting a service allows it to be used by sidecars, gateways and virtual services defined in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of services across namespace boundaries.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hosts": {
            "description": "REQUIRED. The hosts associated with the ServiceEntry. Could be a DNS name with wildcard prefix.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "location": {
            "description": "Specify whether the service should be considered external to the mesh or part of the mesh.",
            "enum": [
              [
                "MESH_EXTERNAL",
                "MESH_INTERNAL"
              ]
            ],
            "type": "string"
          },
          "ports": {
            "description": "REQUIRED. The ports associated with the external service. If the Endpoints are Unix domain socket addresses, there must be exactly one port.",
            "items": {
              "description": "Port describes the properties of a specific port of a service.",
              "properties": {
                "name": {
                  "description": "Label assigned to the port.",
                  "type": "string"
                },
                "number": {
                  "description": "REQUIRED: A valid non-negative integer port number.",
                  "format": "int32",
                  "type": "integer"
                },
                "protocol": {
                  "description": "REQUIRED: The protocol exposed on the port. MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS. TLS implies the connection will be routed based on the SNI header to the destination without terminating the TLS connection.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "resolution": {
            "description": "REQUIRED: Service discovery mode for the hosts. Care must be taken when setting the resolution mode to NONE for a TCP port without accompanying IP addresses. In such cases, traffic to any IP on said port will be allowed (i.e. 0.0.0.0:\u003cport\u003e).",
            "enum": [
              [
                "NONE",
                "STATIC",
                "DNS"
              ]
            ],
            "type": "string"
          },
          "subject_alt_names": {
            "description": "The list of subject alternate names allowed for workload instances that implement this service. This information is used to enforce [secure-naming](https://istio.io/docs/concepts/security/#secure-naming). If specified, the proxy will verify that the server certificate's subject alternate name matches one of the specified values.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  }
}