// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

package istio.networking.v1alpha3;

option go_package = "istio.io/api/networking/v1alpha3";

//
// # Overview
//
// A `PluginConfiguration` describes opaque configutation data used by
// Istio Networking plugins. Plugins are a way to customize the proxy
// configuration generated by Istio networking subsystem (Pilot). Using
// this configuration, users can specify host-specific configuration
// data. Istio networking subsystem ships with a default set of plugins
// (policy enforcement, authentication policies, dynamic lua scripting,
// etc.). The configuration can be customized to apply only at the client
// or the server or both.
//
// There can be only one plugin configuration object per host. When the
// host does not exist in the service registry, the plugin configuration
// must be accompanied with a virtualservice configuration that uses the
// same hosts.
//
// The following example on Kubernetes, specifies a custom lua script for
// all calls to the reviews service. The script calls out to an external
// authorization service to validate inbound calls to the service. The
// external authorization service is declared as an ExternalService so that
// it can be accessed via the Lua scripts.
//
//     apiVersion: networking.istio.io/v1alpha3
//     kind: PluginConfiguration
//     metadata:
//       name: reviews-route
//     spec:
//       hosts:
//       - reviews.prod.svc.cluster.local
//       http:
//       - name: lua
//         inboundConfig: |
//          function envoy_on_request(request_handle)
//            -- Make an HTTP call to an upstream host with the following headers, body, and timeout.
//            local headers, body = request_handle:httpCall(
//                                   "outbound||https|internal-auth-server.com",
//                                   {
//                                     [":method"] = "POST",
//                                     [":path"] = "/authorizeMeNow",
//                                     [":authority"] = "internal-auth-server.com"
//                                    },
//                                   "username=scoobydoo", 5000)
//             -- Add information from the HTTP call into the headers that are about to be sent to the next
//             -- filter in the filter chain.
//             request_handle:headers():add("upstream_foo", headers["foo"])
//             request_handle:headers():add("upstream_body_size", #body)
//          end
//
// and the associated ExternalService configuration to add
// internal-auth-server.com to the service registry:
//
//     apiVersion: networking.istio.io/v1alpha3
//     kind: ExternalService
//     metadata:
//       name: external-svc
//     spec:
//       hosts:
//       - internal-auth-server.com
//       ports:
//       - number: 443
//         name: http
//         protocol: HTTP # not HTTPS.
//       discovery: DNS
//
// and a DestinationRule to initiate TLS connections to the external service.
//
//     apiVersion: networking.istio.io/v1alpha3
//     kind: DestinationRule
//     metadata:
//       name: tls-example
//     spec:
//       name: internal-auth-server.com
//       trafficPolicy:
//         tls:
//           mode: SIMPLE # initiates HTTPS when talking to internal-auth-server.com
//
//
message PluginConfiguration {
  // REQUIRED. The destination hosts to which traffic is being sent. Could
  // be a DNS name with wildcard prefix or an IP address.  Depending on the
  // platform, short-names can also be used instead of a FQDN (i.e. has no
  // dots in the name). In such a scenario, the FQDN of the host would be
  // derived based on the underlying platform.
  //
  // **A host name can be defined by only one PluginConfiguration**.
  //
  // *Note for Kubernetes users*: When short names are used (e.g. "reviews"
  // instead of "reviews.default.svc.cluster.local"), Istio will interpret
  // the short name based on the namespace of the rule, not the service. A
  // rule in the "default" namespace containing a host "reviews will be
  // interpreted as "reviews.default.svc.cluster.local", irrespective of
  // the actual namespace associated with the reviews service. _To avoid
  // potential misconfigurations, it is recommended to always use fully
  // qualified domain names over short names._
  //
  // The hosts field applies to both HTTP and TCP services. Service inside
  // the mesh, i.e., those found in the service registry, must always be
  // referred to using their alphanumeric names. IP addresses are allowed
  // only for services defined via the Gateway.
  repeated string hosts = 1;

  // The names of gateways and sidecars that should apply these routes. A
  // single PluginConfiguration is used for sidecars inside the mesh as
  // well as for one or more gateways. The selection condition imposed by
  // this field can be overridden using the source field in the match
  // conditions of HTTP/TCP routes. The reserved word `mesh` is used to
  // imply all the sidecars in the mesh. When this field is omitted, the
  // default gateway (`mesh`) will be used, which would apply the rule to
  // all sidecars in the mesh. If a list of gateway names is provided, the
  // rules will apply only to the gateways. To apply the configuration to
  // both gateways and sidecars, specify `mesh` as one of the gateway
  // names.
  repeated string gateways = 2;

  repeated Plugins http = 3;

  repeated Plugins tcp = 4;
}

message Plugins {
  string name = 1;
  string inbound_config = 2;
  string outbound_config = 3;
}
