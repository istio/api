{
  "openapi": "3.0.0",
  "info": {
    "title": "Configuration affecting service registry.",
    "version": "v1alpha3"
  },
  "components": {
    "schemas": {
      "istio.networking.v1alpha3.Port": {
        "description": "Port describes the properties of a specific port of a service.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Label assigned to the port.",
            "type": "string",
            "format": "string"
          },
          "number": {
            "description": "REQUIRED: A valid non-negative integer port number.",
            "type": "integer"
          },
          "protocol": {
            "description": "REQUIRED: The protocol exposed on the port.\n MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS.\n TLS implies the connection will be routed based on the SNI header to\n the destination without terminating the TLS connection.",
            "type": "string",
            "format": "string"
          }
        }
      },
      "istio.networking.v1alpha3.ServiceEntry": {
        "type": "object",
        "properties": {
          "exportTo": {
            "description": "A list of namespaces to which this service is exported. Exporting a service\n allows it to be used by sidecars, gateways and virtual services defined in\n other namespaces. This feature provides a mechanism for service owners\n and mesh administrators to control the visibility of services across\n namespace boundaries.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "string"
            }
          },
          "subjectAltNames": {
            "description": "The list of subject alternate names allowed for workload instances that\n implement this service. This information is used to enforce\n [secure-naming](https://istio.io/docs/concepts/security/#secure-naming).\n If specified, the proxy will verify that the server\n certificate's subject alternate name matches one of the specified values.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "string"
            }
          },
          "hosts": {
            "description": "REQUIRED. The hosts associated with the ServiceEntry. Could be a DNS\n name with wildcard prefix.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "string"
            }
          },
          "addresses": {
            "description": "The virtual IP addresses associated with the service. Could be CIDR\n prefix. For HTTP traffic, generated route configurations will include http route\n domains for both the `addresses` and `hosts` field values and the destination will\n be identified based on the HTTP Host/Authority header.\n If one or more IP addresses are specified,\n the incoming traffic will be identified as belonging to this service\n if the destination IP matches the IP/CIDRs specified in the addresses\n field. If the Addresses field is empty, traffic will be identified\n solely based on the destination port. In such scenarios, the port on\n which the service is being accessed must not be shared by any other\n service in the mesh. In other words, the sidecar will behave as a\n simple TCP proxy, forwarding incoming traffic on a specified port to\n the specified destination endpoint IP/host. Unix domain socket\n addresses are not supported in this field.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "string"
            }
          },
          "ports": {
            "description": "REQUIRED. The ports associated with the external service. If the\n Endpoints are Unix domain socket addresses, there must be exactly one\n port.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/istio.networking.v1alpha3.Port"
            }
          },
          "location": {
            "$ref": "#/components/schemas/istio.networking.v1alpha3.ServiceEntry.Location"
          },
          "resolution": {
            "$ref": "#/components/schemas/istio.networking.v1alpha3.ServiceEntry.Resolution"
          },
          "endpoints": {
            "description": "One or more endpoints associated with the service.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/istio.networking.v1alpha3.ServiceEntry.Endpoint"
            }
          }
        }
      },
      "istio.networking.v1alpha3.ServiceEntry.Location": {
        "description": "Location specifies whether the service is part of Istio mesh or\n outside the mesh.  Location determines the behavior of several\n features, such as service-to-service mTLS authentication, policy\n enforcement, etc. When communicating with services outside the mesh,\n Istio's mTLS authentication is disabled, and policy enforcement is\n performed on the client-side as opposed to server-side.",
        "enum": [
          "MESH_EXTERNAL",
          "MESH_INTERNAL"
        ],
        "default": "MESH_EXTERNAL"
      },
      "istio.networking.v1alpha3.ServiceEntry.Resolution": {
        "description": "Resolution determines how the proxy will resolve the IP addresses of\n the network endpoints associated with the service, so that it can\n route to one of them. The resolution mode specified here has no impact\n on how the application resolves the IP address associated with the\n service. The application may still have to use DNS to resolve the\n service to an IP so that the outbound traffic can be captured by the\n Proxy. Alternatively, for HTTP services, the application could\n directly communicate with the proxy (e.g., by setting HTTP_PROXY) to\n talk to these services.",
        "enum": [
          "NONE",
          "STATIC",
          "DNS"
        ],
        "default": "NONE"
      },
      "istio.networking.v1alpha3.ServiceEntry.Endpoint": {
        "description": "Endpoint defines a network address (IP or hostname) associated with\n the mesh service.",
        "type": "object",
        "required": [
          "labels",
          "ports"
        ],
        "properties": {
          "labels": {
            "description": "One or more labels associated with the endpoint.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "string"
            }
          },
          "address": {
            "description": "REQUIRED: Address associated with the network endpoint without the\n port.  Domain names can be used if and only if the resolution is set\n to DNS, and must be fully-qualified without wildcards. Use the form\n unix:///absolute/path/to/socket for Unix domain socket endpoints.",
            "type": "string",
            "format": "string"
          },
          "ports": {
            "description": "Set of ports associated with the endpoint. The ports must be\n associated with a port name that was declared as part of the\n service. Do not use for `unix://` addresses.",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "network": {
            "description": "Network enables Istio to group endpoints resident in the same L3\n domain/network. All endpoints in the same network are assumed to be\n directly reachable from one another. When endpoints in different\n networks cannot reach each other directly, an Istio Gateway can be\n used to establish connectivity (usually using the\n AUTO_PASSTHROUGH mode in a Gateway Server). This is\n an advanced configuration used typically for spanning an Istio mesh\n over multiple clusters.",
            "type": "string",
            "format": "string"
          },
          "locality": {
            "description": "The locality associated with the endpoint. A locality corresponds\n to a failure domain (e.g., country/region/zone). Arbitrary failure\n domain hierarchies can be represented by separating each\n encapsulating failure domain by /. For example, the locality of an\n an endpoint in US, in US-East-1 region, within availability zone\n az-1, in data center rack r11 can be represented as\n us/us-east-1/az-1/r11. Istio will configure the sidecar to route to\n endpoints within the same locality as the sidecar. If none of the\n endpoints in the locality are available, endpoints parent locality\n (but within the same network ID) will be chosen. For example, if\n there are two endpoints in same network (networkID \"n1\"), say e1\n with locality us/us-east-1/az-1/r11 and e2 with locality\n us/us-east-1/az-2/r12, a sidecar from us/us-east-1/az-1/r11 locality\n will prefer e1 from the same locality over e2 from a different\n locality. Endpoint e2 could be the IP associated with a gateway\n (that bridges networks n1 and n2), or the IP associated with a\n standard service endpoint.",
            "type": "string",
            "format": "string"
          },
          "weight": {
            "description": "The load balancing weight associated with the endpoint. Endpoints\n with higher weights will receive proportionally higher traffic.",
            "type": "integer"
          }
        }
      }
    }
  }
}