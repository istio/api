// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: networking/v1beta1/proxy_config.proto

// `ProxyConfig` exposes proxy level configuration options. `ProxyConfig` can be configured on a per-workload basis,
// a per-namespace basis, or mesh-wide. `ProxyConfig` is not a required resource; there are default values in place, which are documented
// inline with each field.
//
// **NOTE**: fields in ProxyConfig are not dynamically configured - changes will require restart of workloads to take effect.
//
// For any namespace, including the root configuration namespace, it is only valid
// to have a single workload selector-less `ProxyConfig` resource.
//
// For resources with a workload selector, it is only valid to have one resource selecting
// any given workload.
//
// For mesh level configuration, put the resource in the root configuration namespace for
// your Istio installation *without* a workload selector:
//
// ```yaml
// apiVersion: networking.istio.io/v1beta1
// kind: ProxyConfig
// metadata:
//   name: my-proxyconfig
//   namespace: istio-system
// spec:
//   concurrency: 0
//   image:
//     type: distroless
// ```
//
// For namespace level configuration, put the resource in the desired namespace without a workload selector:
//
// ```yaml
// apiVersion: networking.istio.io/v1beta1
// kind: ProxyConfig
// metadata:
//   name: my-ns-proxyconfig
//   namespace: user-namespace
// spec:
//   concurrency: 0
// ```
//
// For workload level configuration, set the `selector` field on the `ProxyConfig` resource:
//
// ```yaml
// apiVersion: networking.istio.io/v1beta1
// kind: ProxyConfig
// metadata:
//   name: per-workload-proxyconfig
//   namespace: example
// spec:
//   selector:
//     labels:
//       app: ratings
//   concurrency: 0
//   image:
//     type: debug
// ```
//
// If a `ProxyConfig` CR is defined that matches a workload it will merge with its `proxy.istio.io/config` annotation if present,
// with the CR taking precedence over the annotation for overlapping fields. Similarly, if a mesh wide `ProxyConfig` CR is defined and
// `meshConfig.DefaultConfig` is set, the two resources will be merged with the CR taking precedence for overlapping fields.
//

package v1beta1

import (
	bytes "bytes"
	fmt "fmt"
	github_com_gogo_protobuf_jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "istio.io/api/type/v1beta1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// MarshalJSON is a custom marshaler for ProxyConfig
func (this *ProxyConfig) MarshalJSON() ([]byte, error) {
	str, err := ProxyConfigMarshaler.MarshalToString(this)
	return []byte(str), err
}

// UnmarshalJSON is a custom unmarshaler for ProxyConfig
func (this *ProxyConfig) UnmarshalJSON(b []byte) error {
	return ProxyConfigUnmarshaler.Unmarshal(bytes.NewReader(b), this)
}

// MarshalJSON is a custom marshaler for ProxyImage
func (this *ProxyImage) MarshalJSON() ([]byte, error) {
	str, err := ProxyConfigMarshaler.MarshalToString(this)
	return []byte(str), err
}

// UnmarshalJSON is a custom unmarshaler for ProxyImage
func (this *ProxyImage) UnmarshalJSON(b []byte) error {
	return ProxyConfigUnmarshaler.Unmarshal(bytes.NewReader(b), this)
}

var (
	ProxyConfigMarshaler   = &github_com_gogo_protobuf_jsonpb.Marshaler{}
	ProxyConfigUnmarshaler = &github_com_gogo_protobuf_jsonpb.Unmarshaler{AllowUnknownFields: true}
)
