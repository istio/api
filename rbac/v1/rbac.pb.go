// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rbac/v1/rbac.proto

/*
Package istio_rbac_v1 is a generated protocol buffer package.

It is generated from these files:
	rbac/v1/rbac.proto

It has these top-level messages:
	ServiceRole
	AccessRule
	ServiceRoleBinding
	Subject
	RoleRef
*/
package istio_rbac_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ServiceRole specification contains a list of access rules (permissions).
// This represent the "Spec" part of the ServiceRole object. The name and namespace
// of the ServiceRole is specified in "metadata" section of the ServiceRole object.
type ServiceRole struct {
	// Required. The set of access rules (permissions) that the role has.
	Rules []*AccessRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *ServiceRole) Reset()                    { *m = ServiceRole{} }
func (m *ServiceRole) String() string            { return proto.CompactTextString(m) }
func (*ServiceRole) ProtoMessage()               {}
func (*ServiceRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceRole) GetRules() []*AccessRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// AccessRule defines a permission to access a list of services.
type AccessRule struct {
	// Required. A list of service names.
	// Exact match, prefix match, and suffix match are supported for service names.
	// For example, the service name "bookstore.mtv.cluster.local" matches
	// "bookstore.mtv.cluster.local" (exact match), or "bookstore*" (prefix match),
	// or "*.mtv.cluster.local" (suffix match).
	// If set to ["*"], it refers to all services in the namespace.
	Services []string `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
	// Optional. A list of HTTP paths.
	// Exact match, prefix match, and suffix match are supported for paths.
	// For example, the path "/books/review" matches
	// "/books/review" (exact match), or "/books/*" (prefix match),
	// or "*/review" (suffix match).
	// If not specified, it applies to any path.
	Paths []string `protobuf:"bytes,2,rep,name=paths" json:"paths,omitempty"`
	// Required. A list of HTTP methods (e.g., "GET", "POST") or gRPC methods.
	// gRPC methods must be presented as fully-qualified name in the form of
	// packageName.serviceName/methodName.
	// If set to ["*"], it applies to any method.
	Methods []string `protobuf:"bytes,3,rep,name=methods" json:"methods,omitempty"`
	// Optional. Extra constraints in the ServiceRole specification.
	// The above ServiceRole examples shows an example of constraint "version".
	Constraints []*AccessRule_Constraint `protobuf:"bytes,4,rep,name=constraints" json:"constraints,omitempty"`
}

func (m *AccessRule) Reset()                    { *m = AccessRule{} }
func (m *AccessRule) String() string            { return proto.CompactTextString(m) }
func (*AccessRule) ProtoMessage()               {}
func (*AccessRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccessRule) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *AccessRule) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *AccessRule) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *AccessRule) GetConstraints() []*AccessRule_Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

// Definition of a custom constraint.
type AccessRule_Constraint struct {
	// The name of the constraint.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The list of valid values for the constraint.
	// Exact match, prefix match, and suffix match are supported for constraint values.
	// For example, the value "v1alpha2" matches
	// "v1alpha2" (exact match), or "v1*" (prefix match),
	// or "*alpha2" (suffix match).
	Values []string `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *AccessRule_Constraint) Reset()                    { *m = AccessRule_Constraint{} }
func (m *AccessRule_Constraint) String() string            { return proto.CompactTextString(m) }
func (*AccessRule_Constraint) ProtoMessage()               {}
func (*AccessRule_Constraint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *AccessRule_Constraint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccessRule_Constraint) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// ServiceRoleBinding assigns a ServiceRole to a list of subjects.
// This represent the "Spec" part of the ServiceRoleBinding object. The name and namespace
// of the ServiceRoleBinding is specified in "metadata" section of the ServiceRoleBinding
// object.
type ServiceRoleBinding struct {
	// Required. List of subjects that are assigned the ServiceRole object.
	Subjects []*Subject `protobuf:"bytes,1,rep,name=subjects" json:"subjects,omitempty"`
	// Required. Reference to the ServiceRole object.
	RoleRef *RoleRef `protobuf:"bytes,2,opt,name=roleRef" json:"roleRef,omitempty"`
}

func (m *ServiceRoleBinding) Reset()                    { *m = ServiceRoleBinding{} }
func (m *ServiceRoleBinding) String() string            { return proto.CompactTextString(m) }
func (*ServiceRoleBinding) ProtoMessage()               {}
func (*ServiceRoleBinding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServiceRoleBinding) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *ServiceRoleBinding) GetRoleRef() *RoleRef {
	if m != nil {
		return m.RoleRef
	}
	return nil
}

// Subject defines an identity or a group of identities.
type Subject struct {
	// Required. The set of properties that identify the subject.
	// In the above ServiceRoleBinding example, the first subject has one property:
	//     user: "alice@yahoo.com"
	//
	// The second subject has two properties:
	//     service: "reviews"
	//     namespace: "abc"
	Properties map[string]string `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Subject) Reset()                    { *m = Subject{} }
func (m *Subject) String() string            { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()               {}
func (*Subject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Subject) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

// RoleRef refers to a ServiceRole object.
type RoleRef struct {
	// Required. The type of the role being referenced.
	// Currently, "ServiceRole" is the only supported value for "kind".
	Kind string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// Required. The name of the ServiceRole object being referenced.
	// The ServiceRole object must be in the same namespace as the ServiceRoleBinding
	// object.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *RoleRef) Reset()                    { *m = RoleRef{} }
func (m *RoleRef) String() string            { return proto.CompactTextString(m) }
func (*RoleRef) ProtoMessage()               {}
func (*RoleRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RoleRef) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *RoleRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceRole)(nil), "istio.rbac.v1.ServiceRole")
	proto.RegisterType((*AccessRule)(nil), "istio.rbac.v1.AccessRule")
	proto.RegisterType((*AccessRule_Constraint)(nil), "istio.rbac.v1.AccessRule.Constraint")
	proto.RegisterType((*ServiceRoleBinding)(nil), "istio.rbac.v1.ServiceRoleBinding")
	proto.RegisterType((*Subject)(nil), "istio.rbac.v1.Subject")
	proto.RegisterType((*RoleRef)(nil), "istio.rbac.v1.RoleRef")
}

func init() { proto.RegisterFile("rbac/v1/rbac.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xdb, 0x4e, 0xc2, 0x40,
	0x10, 0x4d, 0xcb, 0xa5, 0x30, 0xc4, 0x68, 0x26, 0x86, 0x54, 0x9e, 0x48, 0x63, 0x0c, 0x4f, 0x45,
	0xf0, 0x85, 0x98, 0x68, 0xa2, 0x46, 0x9e, 0xcd, 0xf2, 0x05, 0xa5, 0x8c, 0xb2, 0x52, 0xba, 0xcd,
	0xee, 0xb6, 0x09, 0x7e, 0x85, 0xdf, 0xe7, 0xd7, 0x98, 0x6e, 0x2f, 0x20, 0xc1, 0xa7, 0xce, 0x99,
	0x73, 0x66, 0x7a, 0x7a, 0xa6, 0x80, 0x72, 0x19, 0x84, 0xe3, 0x6c, 0x32, 0xce, 0x9f, 0x7e, 0x22,
	0x85, 0x16, 0x78, 0xc6, 0x95, 0xe6, 0xc2, 0x37, 0x9d, 0x6c, 0xe2, 0x3d, 0x42, 0x6f, 0x41, 0x32,
	0xe3, 0x21, 0x31, 0x11, 0x11, 0x8e, 0xa1, 0x25, 0xd3, 0x88, 0x94, 0x6b, 0x0d, 0x1b, 0xa3, 0xde,
	0xf4, 0xca, 0xff, 0xa3, 0xf6, 0x9f, 0xc2, 0x90, 0x94, 0x62, 0x69, 0x44, 0xac, 0xd0, 0x79, 0x3f,
	0x16, 0xc0, 0xbe, 0x8b, 0x03, 0xe8, 0xa8, 0x62, 0x5d, 0xb1, 0xa2, 0xcb, 0x6a, 0x8c, 0x97, 0xd0,
	0x4a, 0x02, 0xbd, 0x56, 0xae, 0x6d, 0x88, 0x02, 0xa0, 0x0b, 0xce, 0x96, 0xf4, 0x5a, 0xac, 0x94,
	0xdb, 0x30, 0xfd, 0x0a, 0xe2, 0x1c, 0x7a, 0xa1, 0x88, 0x95, 0x96, 0x01, 0x8f, 0xb5, 0x72, 0x9b,
	0xc6, 0xd1, 0xf5, 0xbf, 0x8e, 0xfc, 0x97, 0x5a, 0xcc, 0x0e, 0x07, 0x07, 0x33, 0x80, 0x3d, 0x85,
	0x08, 0xcd, 0x38, 0xd8, 0x92, 0x6b, 0x0d, 0xad, 0x51, 0x97, 0x99, 0x1a, 0xfb, 0xd0, 0xce, 0x82,
	0x28, 0xa5, 0xca, 0x5a, 0x89, 0xbc, 0x2f, 0xc0, 0x83, 0x70, 0x9e, 0x79, 0xbc, 0xe2, 0xf1, 0x07,
	0x4e, 0xa1, 0xa3, 0xd2, 0xe5, 0x27, 0x85, 0xba, 0x8a, 0xa9, 0x7f, 0x64, 0x6a, 0x51, 0xd0, 0xac,
	0xd6, 0xe1, 0x2d, 0x38, 0x52, 0x44, 0xc4, 0xe8, 0xdd, 0xb5, 0x87, 0xd6, 0x89, 0x11, 0x56, 0xb0,
	0xac, 0x92, 0x79, 0xdf, 0x16, 0x38, 0xe5, 0x1e, 0x9c, 0x03, 0x24, 0x52, 0x24, 0x24, 0x35, 0xaf,
	0x4f, 0x73, 0x73, 0xfa, 0x9d, 0xfe, 0x5b, 0x2d, 0x7c, 0x8d, 0xb5, 0xdc, 0xb1, 0x83, 0xc9, 0xc1,
	0x03, 0x9c, 0x1f, 0xd1, 0x78, 0x01, 0x8d, 0x0d, 0xed, 0xca, 0x34, 0xf2, 0x32, 0x3f, 0x93, 0xf9,
	0x7c, 0x63, 0xb4, 0xcb, 0x0a, 0x70, 0x6f, 0xcf, 0x2c, 0x6f, 0x02, 0x4e, 0x69, 0x33, 0x4f, 0x71,
	0xc3, 0xe3, 0x55, 0x95, 0x62, 0x5e, 0xd7, 0xc9, 0xda, 0xfb, 0x64, 0x97, 0x6d, 0xf3, 0xd3, 0xdd,
	0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0x82, 0xa3, 0xa4, 0x3c, 0x8a, 0x02, 0x00, 0x00,
}
