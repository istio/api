// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rbac/v1alpha1/rbac.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ServiceRole with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceRole) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ServiceRoleValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ServiceRoleValidationError is the validation error returned by
// ServiceRole.Validate if the designated constraints aren't met.
type ServiceRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceRoleValidationError) ErrorName() string { return "ServiceRoleValidationError" }

// Error satisfies the builtin error interface
func (e ServiceRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceRoleValidationError{}

// Validate checks the field values on AccessRule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AccessRule) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetConstraints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return AccessRuleValidationError{
					field:  fmt.Sprintf("Constraints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AccessRuleValidationError is the validation error returned by
// AccessRule.Validate if the designated constraints aren't met.
type AccessRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRuleValidationError) ErrorName() string { return "AccessRuleValidationError" }

// Error satisfies the builtin error interface
func (e AccessRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRuleValidationError{}

// Validate checks the field values on ServiceRoleBinding with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceRoleBinding) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSubjects() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ServiceRoleBindingValidationError{
					field:  fmt.Sprintf("Subjects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetRoleRef()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ServiceRoleBindingValidationError{
				field:  "RoleRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Mode

	return nil
}

// ServiceRoleBindingValidationError is the validation error returned by
// ServiceRoleBinding.Validate if the designated constraints aren't met.
type ServiceRoleBindingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceRoleBindingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceRoleBindingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceRoleBindingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceRoleBindingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceRoleBindingValidationError) ErrorName() string {
	return "ServiceRoleBindingValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceRoleBindingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceRoleBinding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceRoleBindingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceRoleBindingValidationError{}

// Validate checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Subject) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for User

	// no validation rules for Group

	// no validation rules for Properties

	return nil
}

// SubjectValidationError is the validation error returned by Subject.Validate
// if the designated constraints aren't met.
type SubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectValidationError) ErrorName() string { return "SubjectValidationError" }

// Error satisfies the builtin error interface
func (e SubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectValidationError{}

// Validate checks the field values on RoleRef with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RoleRef) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kind

	// no validation rules for Name

	return nil
}

// RoleRefValidationError is the validation error returned by RoleRef.Validate
// if the designated constraints aren't met.
type RoleRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleRefValidationError) ErrorName() string { return "RoleRefValidationError" }

// Error satisfies the builtin error interface
func (e RoleRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleRefValidationError{}

// Validate checks the field values on RbacConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RbacConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Mode

	if v, ok := interface{}(m.GetInclusion()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return RbacConfigValidationError{
				field:  "Inclusion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExclusion()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return RbacConfigValidationError{
				field:  "Exclusion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnforcementMode

	return nil
}

// RbacConfigValidationError is the validation error returned by
// RbacConfig.Validate if the designated constraints aren't met.
type RbacConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RbacConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RbacConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RbacConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RbacConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RbacConfigValidationError) ErrorName() string { return "RbacConfigValidationError" }

// Error satisfies the builtin error interface
func (e RbacConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRbacConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RbacConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RbacConfigValidationError{}

// Validate checks the field values on AccessRule_Constraint with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AccessRule_Constraint) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	return nil
}

// AccessRule_ConstraintValidationError is the validation error returned by
// AccessRule_Constraint.Validate if the designated constraints aren't met.
type AccessRule_ConstraintValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRule_ConstraintValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRule_ConstraintValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRule_ConstraintValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRule_ConstraintValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRule_ConstraintValidationError) ErrorName() string {
	return "AccessRule_ConstraintValidationError"
}

// Error satisfies the builtin error interface
func (e AccessRule_ConstraintValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRule_Constraint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRule_ConstraintValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRule_ConstraintValidationError{}

// Validate checks the field values on RbacConfig_Target with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RbacConfig_Target) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RbacConfig_TargetValidationError is the validation error returned by
// RbacConfig_Target.Validate if the designated constraints aren't met.
type RbacConfig_TargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RbacConfig_TargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RbacConfig_TargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RbacConfig_TargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RbacConfig_TargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RbacConfig_TargetValidationError) ErrorName() string {
	return "RbacConfig_TargetValidationError"
}

// Error satisfies the builtin error interface
func (e RbacConfig_TargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRbacConfig_Target.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RbacConfig_TargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RbacConfig_TargetValidationError{}
