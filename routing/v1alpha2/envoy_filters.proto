// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "google/protobuf/struct.proto";

package istio.routing.v1alpha2;

// Envoy-specific filters that can be used to enable customized processing
// in addition to the features exposed by the routing rule. This feature
// must be used with care, as incorrect configurations could potentially
// destabilize the entire mesh. Common use cases for using the extensions
// include use of Envoy's Lua filters, in addition to enabling any
// proprietary filters developed inhouse (e.g, custom header manipulation
// filter for HTTP).
//
// NOTE: Do not use this feature to enable Fault, Router (HTTP),
// Mongo/Redis/Tcp proxy (TCP) filters.
//
// The following example enables Envoy's HTTP lua filter for calls to the
// "reviews" service present _inside_ the service mesh (a service that is
// not exposed to the outside world)
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: Gateway
//     metadata:
//       name: my-gateway
//     spec:
//       servers:
//       - port:
//           number: 80 #must match the reviews service port
//           name: http
//         domains:
//         - reviews.default.svc.cluster.local #must match the FQDN of the reviews service
//         extensions:
//         - "@type": type.googleapis.com/istio.routing.v1alpha2.EnvoyFilters
//           httpFilters:
//           - name: envoy.lua
//             config:
//               inlineCode: "... lua code ... "
//
// The following example enables Envoy's HTTP lua filter for calls to the
// externally facing "uk.bookinfo.com" service:
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: Gateway
//     metadata:
//       name: my-gateway
//     spec:
//       servers:
//       - port:
//           number: 80
//           name: http
//         domains:
//         - uk.bookinfo.com
//         extensions:
//         - "@type": type.googleapis.com/istio.routing.v1alpha2.EnvoyFilters
//           httpFilters:
//           - name: envoy.lua
//             config:
//               inlineCode: "... lua code ... "
//
message EnvoyFilters {
  // Envoy HTTP filters to be added to every HTTP connection manager
  // instance generated by Istio.
  message HTTPFilter {
    // The name of the filter to instantiate. The name must match a supported
    // filter _compiled into_ Envoy.  The following are the names of the
    // filters currently built into Envoy. Refer to Envoy's documentation for
    // the configuring these filtes.
    //
    // * envoy.buffer
    // * envoy.http_dynamo_filter
    // * envoy.grpc_http1_bridge
    // * envoy.grpc_json_transcoder
    // * envoy.grpc_web
    // * envoy.lua
    //
    string name = 1;

    // Filter specific configuration which depends on the filter being
    // instantiated. See the supported filters for further documentation.
    google.protobuf.Struct config = 2;
  };
  
  // Envoy network filters to be added to every non-HTTP listener instance
  // generated by Istio (i.e. TCP services).
  message NetworkFilter {
    // The name of the filter to instantiate. The name must match a supported
    // filter. Except for Redis proxy, Istio automatically enables Network
    // filters. Use this feature only to support custom built network
    // filters.
    string name = 1;

    // Filter specific configuration which depends on the filter being
    // instantiated. See the supported filters for further documentation.
    google.protobuf.Struct config = 2;
  };
  
  // Envoy HTTP filters to be added to every HTTP connection manager
  // instance generated by Istio.
  repeated HTTPFilter http_filters = 1;

  // Envoy network filters to be added to every non-HTTP listener instance
  // generated by Istio.
  repeated NetworkFilter network_filters = 2;
}
