// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routing/v1alpha2/envoy_filters.proto

package istio_routing_v1alpha2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Envoy-specific filters that can be used to enable customized processing
// in addition to the features exposed by the routing rule. This feature
// must be used with care, as incorrect configurations could potentially
// destabilize the entire mesh. Common use cases for using the extensions
// include use of Envoy's Lua filters, in addition to enabling any
// proprietary filters developed inhouse (e.g, custom header manipulation
// filter for HTTP).
//
// NOTE: Do not use this feature to enable Fault, Router (HTTP),
// Mongo/Redis/Tcp proxy (TCP) filters.
//
// The following example enables Envoy's HTTP lua filter for calls to the
// "reviews" service present _inside_ the service mesh (a service that is
// not exposed to the outside world)
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: Gateway
//     metadata:
//       name: my-gateway
//     spec:
//       servers:
//       - port:
//           number: 80 #must match the reviews service port
//           name: http
//         domains:
//         - reviews.default.svc.cluster.local #must match the FQDN of the reviews service
//         extensions:
//         - "@type": type.googleapis.com/istio.routing.v1alpha2.EnvoyFilters
//           httpFilters:
//           - name: envoy.lua
//             config:
//               inlineCode: "... lua code ... "
//
// The following example enables Envoy's HTTP lua filter for calls to the
// externally facing "uk.bookinfo.com" service:
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: Gateway
//     metadata:
//       name: my-gateway
//     spec:
//       servers:
//       - port:
//           number: 80
//           name: http
//         domains:
//         - uk.bookinfo.com
//         extensions:
//         - "@type": type.googleapis.com/istio.routing.v1alpha2.EnvoyFilters
//           httpFilters:
//           - name: envoy.lua
//             config:
//               inlineCode: "... lua code ... "
//
type EnvoyFilters struct {
	// Envoy HTTP filters to be added to every HTTP connection manager
	// instance generated by Istio.
	HttpFilters []*EnvoyFilters_HTTPFilter `protobuf:"bytes,1,rep,name=http_filters,json=httpFilters" json:"http_filters,omitempty"`
	// Envoy network filters to be added to every non-HTTP listener instance
	// generated by Istio.
	NetworkFilters []*EnvoyFilters_NetworkFilter `protobuf:"bytes,2,rep,name=network_filters,json=networkFilters" json:"network_filters,omitempty"`
}

func (m *EnvoyFilters) Reset()                    { *m = EnvoyFilters{} }
func (m *EnvoyFilters) String() string            { return proto.CompactTextString(m) }
func (*EnvoyFilters) ProtoMessage()               {}
func (*EnvoyFilters) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *EnvoyFilters) GetHttpFilters() []*EnvoyFilters_HTTPFilter {
	if m != nil {
		return m.HttpFilters
	}
	return nil
}

func (m *EnvoyFilters) GetNetworkFilters() []*EnvoyFilters_NetworkFilter {
	if m != nil {
		return m.NetworkFilters
	}
	return nil
}

// Envoy HTTP filters to be added to every HTTP connection manager
// instance generated by Istio.
type EnvoyFilters_HTTPFilter struct {
	// The name of the filter to instantiate. The name must match a supported
	// filter _compiled into_ Envoy.  The following are the names of the
	// filters currently built into Envoy. Refer to Envoy's documentation for
	// the configuring these filtes.
	//
	// * envoy.buffer
	// * envoy.http_dynamo_filter
	// * envoy.grpc_http1_bridge
	// * envoy.grpc_json_transcoder
	// * envoy.grpc_web
	// * envoy.lua
	//
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Filter specific configuration which depends on the filter being
	// instantiated. See the supported filters for further documentation.
	Config *google_protobuf1.Struct `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *EnvoyFilters_HTTPFilter) Reset()                    { *m = EnvoyFilters_HTTPFilter{} }
func (m *EnvoyFilters_HTTPFilter) String() string            { return proto.CompactTextString(m) }
func (*EnvoyFilters_HTTPFilter) ProtoMessage()               {}
func (*EnvoyFilters_HTTPFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *EnvoyFilters_HTTPFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvoyFilters_HTTPFilter) GetConfig() *google_protobuf1.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

// Envoy network filters to be added to every non-HTTP listener instance
// generated by Istio (i.e. TCP services).
type EnvoyFilters_NetworkFilter struct {
	// The name of the filter to instantiate. The name must match a supported
	// filter. Except for Redis proxy, Istio automatically enables Network
	// filters. Use this feature only to support custom built network
	// filters.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Filter specific configuration which depends on the filter being
	// instantiated. See the supported filters for further documentation.
	Config *google_protobuf1.Struct `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *EnvoyFilters_NetworkFilter) Reset()                    { *m = EnvoyFilters_NetworkFilter{} }
func (m *EnvoyFilters_NetworkFilter) String() string            { return proto.CompactTextString(m) }
func (*EnvoyFilters_NetworkFilter) ProtoMessage()               {}
func (*EnvoyFilters_NetworkFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

func (m *EnvoyFilters_NetworkFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvoyFilters_NetworkFilter) GetConfig() *google_protobuf1.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*EnvoyFilters)(nil), "istio.routing.v1alpha2.EnvoyFilters")
	proto.RegisterType((*EnvoyFilters_HTTPFilter)(nil), "istio.routing.v1alpha2.EnvoyFilters.HTTPFilter")
	proto.RegisterType((*EnvoyFilters_NetworkFilter)(nil), "istio.routing.v1alpha2.EnvoyFilters.NetworkFilter")
}

func init() { proto.RegisterFile("routing/v1alpha2/envoy_filters.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0xca, 0x2f, 0x2d,
	0xc9, 0xcc, 0x4b, 0xd7, 0x2f, 0x33, 0x4c, 0xcc, 0x29, 0xc8, 0x48, 0x34, 0xd2, 0x4f, 0xcd, 0x2b,
	0xcb, 0xaf, 0x8c, 0x4f, 0xcb, 0xcc, 0x29, 0x49, 0x2d, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0xcb, 0x2c, 0x2e, 0xc9, 0xcc, 0xd7, 0x83, 0xaa, 0xd5, 0x83, 0xa9, 0x95, 0x92, 0x49,
	0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xab, 0x4a, 0x2a, 0x4d, 0xd3, 0x2f, 0x2e, 0x29, 0x2a,
	0x4d, 0x2e, 0x81, 0xe8, 0x52, 0x7a, 0xc1, 0xc4, 0xc5, 0xe3, 0x0a, 0x32, 0xcd, 0x0d, 0x62, 0x98,
	0x50, 0x10, 0x17, 0x4f, 0x46, 0x49, 0x49, 0x01, 0xcc, 0x70, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e,
	0x23, 0x7d, 0x3d, 0xec, 0xa6, 0xeb, 0x21, 0xeb, 0xd5, 0xf3, 0x08, 0x09, 0x09, 0x80, 0xb0, 0x83,
	0xb8, 0x41, 0x86, 0xc0, 0xcc, 0x8c, 0xe6, 0xe2, 0xcf, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0x86,
	0x1b, 0xcb, 0x04, 0x36, 0xd6, 0x88, 0x28, 0x63, 0xfd, 0x20, 0x7a, 0xa1, 0x26, 0xf3, 0xe5, 0x21,
	0x73, 0x8b, 0xa5, 0x02, 0xb9, 0xb8, 0x10, 0xf6, 0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6,
	0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x42, 0xfa, 0x5c, 0x6c, 0xc9, 0xf9, 0x79,
	0x69, 0x99, 0xe9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0xe2, 0x7a, 0x90, 0x20, 0xd1, 0x83,
	0x05, 0x89, 0x5e, 0x30, 0x38, 0x48, 0x82, 0xa0, 0xca, 0xa4, 0x42, 0xb8, 0x78, 0x51, 0xec, 0xa4,
	0x8a, 0xa9, 0x49, 0x6c, 0x60, 0x09, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0xfa, 0x54,
	0x85, 0xcf, 0x01, 0x00, 0x00,
}
