// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/filter/http/alpn/v2alpha1/config.proto

package v2alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Upstream protocols
type FilterConfig_Protocol int32

const (
	FilterConfig_HTTP10 FilterConfig_Protocol = 0
	FilterConfig_HTTP11 FilterConfig_Protocol = 1
	FilterConfig_HTTP2  FilterConfig_Protocol = 2
)

var FilterConfig_Protocol_name = map[int32]string{
	0: "HTTP10",
	1: "HTTP11",
	2: "HTTP2",
}

var FilterConfig_Protocol_value = map[string]int32{
	"HTTP10": 0,
	"HTTP11": 1,
	"HTTP2":  2,
}

func (x FilterConfig_Protocol) String() string {
	return proto.EnumName(FilterConfig_Protocol_name, int32(x))
}

func (FilterConfig_Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9dd199870dce382a, []int{0, 0}
}

// FilterConfig is the config for Istio-specific filter.
type FilterConfig struct {
	// Map from upstream protocol to list of ALPN
	AlpnOverride         []*FilterConfig_AlpnOverride `protobuf:"bytes,1,rep,name=alpn_override,json=alpnOverride,proto3" json:"alpn_override,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *FilterConfig) Reset()         { *m = FilterConfig{} }
func (m *FilterConfig) String() string { return proto.CompactTextString(m) }
func (*FilterConfig) ProtoMessage()    {}
func (*FilterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd199870dce382a, []int{0}
}
func (m *FilterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterConfig.Merge(m, src)
}
func (m *FilterConfig) XXX_Size() int {
	return m.Size()
}
func (m *FilterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FilterConfig proto.InternalMessageInfo

func (m *FilterConfig) GetAlpnOverride() []*FilterConfig_AlpnOverride {
	if m != nil {
		return m.AlpnOverride
	}
	return nil
}

type FilterConfig_AlpnOverride struct {
	// Upstream protocol
	UpstreamProtocol FilterConfig_Protocol `protobuf:"varint,1,opt,name=upstream_protocol,json=upstreamProtocol,proto3,enum=istio.envoy.config.filter.http.alpn.v2alpha1.FilterConfig_Protocol" json:"upstream_protocol,omitempty"`
	// A list of ALPN that will override the ALPN for upstream TLS connections.
	AlpnOverride         []string `protobuf:"bytes,2,rep,name=alpn_override,json=alpnOverride,proto3" json:"alpn_override,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilterConfig_AlpnOverride) Reset()         { *m = FilterConfig_AlpnOverride{} }
func (m *FilterConfig_AlpnOverride) String() string { return proto.CompactTextString(m) }
func (*FilterConfig_AlpnOverride) ProtoMessage()    {}
func (*FilterConfig_AlpnOverride) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd199870dce382a, []int{0, 0}
}
func (m *FilterConfig_AlpnOverride) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterConfig_AlpnOverride) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterConfig_AlpnOverride.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterConfig_AlpnOverride) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterConfig_AlpnOverride.Merge(m, src)
}
func (m *FilterConfig_AlpnOverride) XXX_Size() int {
	return m.Size()
}
func (m *FilterConfig_AlpnOverride) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterConfig_AlpnOverride.DiscardUnknown(m)
}

var xxx_messageInfo_FilterConfig_AlpnOverride proto.InternalMessageInfo

func (m *FilterConfig_AlpnOverride) GetUpstreamProtocol() FilterConfig_Protocol {
	if m != nil {
		return m.UpstreamProtocol
	}
	return FilterConfig_HTTP10
}

func (m *FilterConfig_AlpnOverride) GetAlpnOverride() []string {
	if m != nil {
		return m.AlpnOverride
	}
	return nil
}

func init() {
	proto.RegisterEnum("istio.envoy.config.filter.http.alpn.v2alpha1.FilterConfig_Protocol", FilterConfig_Protocol_name, FilterConfig_Protocol_value)
	proto.RegisterType((*FilterConfig)(nil), "istio.envoy.config.filter.http.alpn.v2alpha1.FilterConfig")
	proto.RegisterType((*FilterConfig_AlpnOverride)(nil), "istio.envoy.config.filter.http.alpn.v2alpha1.FilterConfig.AlpnOverride")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/alpn/v2alpha1/config.proto", fileDescriptor_9dd199870dce382a)
}

var fileDescriptor_9dd199870dce382a = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4e, 0xcd, 0x2b, 0xcb,
	0xaf, 0xd4, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x4f, 0xcb, 0xcc, 0x29, 0x49, 0x2d, 0xd2,
	0xcf, 0x28, 0x29, 0x29, 0xd0, 0x4f, 0xcc, 0x29, 0xc8, 0xd3, 0x2f, 0x33, 0x4a, 0xcc, 0x29, 0xc8,
	0x48, 0x34, 0x84, 0x2a, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xd2, 0xc9, 0x2c, 0x2e, 0xc9,
	0xcc, 0xd7, 0x03, 0x6b, 0xd5, 0x83, 0xca, 0x40, 0xb4, 0xea, 0x81, 0xb4, 0xea, 0x81, 0xb4, 0xea,
	0xc1, 0xb4, 0x2a, 0x5d, 0x66, 0xe2, 0xe2, 0x71, 0x03, 0xcb, 0x3a, 0x83, 0x95, 0x0a, 0xe5, 0x70,
	0xf1, 0x82, 0x54, 0xc4, 0xe7, 0x97, 0xa5, 0x16, 0x15, 0x65, 0xa6, 0xa4, 0x4a, 0x30, 0x2a, 0x30,
	0x6b, 0x70, 0x1b, 0xb9, 0xeb, 0x91, 0x62, 0xac, 0x1e, 0xb2, 0x91, 0x7a, 0x8e, 0x39, 0x05, 0x79,
	0xfe, 0x50, 0xe3, 0x82, 0x78, 0x12, 0x91, 0x78, 0x52, 0x4b, 0x19, 0xb9, 0x78, 0x90, 0xa5, 0x85,
	0x0a, 0xb8, 0x04, 0x4b, 0x0b, 0x8a, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0xe3, 0xc1, 0xfe, 0x49, 0xce,
	0xcf, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x33, 0x72, 0xa6, 0xc0, 0x09, 0x01, 0x50, 0xa3, 0x82,
	0x04, 0x60, 0xa6, 0xc3, 0x44, 0x84, 0x94, 0xd1, 0x3d, 0xcc, 0xa4, 0xc0, 0xac, 0xc1, 0x89, 0xea,
	0x4e, 0x25, 0x5d, 0x2e, 0x0e, 0xb8, 0x06, 0x2e, 0x2e, 0x36, 0x8f, 0x90, 0x90, 0x00, 0x43, 0x03,
	0x01, 0x06, 0x38, 0xdb, 0x50, 0x80, 0x51, 0x88, 0x93, 0x8b, 0x15, 0xc4, 0x36, 0x12, 0x60, 0x72,
	0x72, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0xa3, 0x8c,
	0x21, 0xee, 0xce, 0xcc, 0xd7, 0x4f, 0x2c, 0xc8, 0xd4, 0x27, 0x2e, 0x4e, 0x93, 0xd8, 0xc0, 0xbe,
	0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x04, 0xaa, 0x10, 0x6d, 0x04, 0x02, 0x00, 0x00,
}

func (m *FilterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AlpnOverride) > 0 {
		for iNdEx := len(m.AlpnOverride) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlpnOverride[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FilterConfig_AlpnOverride) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterConfig_AlpnOverride) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterConfig_AlpnOverride) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AlpnOverride) > 0 {
		for iNdEx := len(m.AlpnOverride) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AlpnOverride[iNdEx])
			copy(dAtA[i:], m.AlpnOverride[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.AlpnOverride[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.UpstreamProtocol != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.UpstreamProtocol))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FilterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AlpnOverride) > 0 {
		for _, e := range m.AlpnOverride {
			l = e.Size()
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FilterConfig_AlpnOverride) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamProtocol != 0 {
		n += 1 + sovConfig(uint64(m.UpstreamProtocol))
	}
	if len(m.AlpnOverride) > 0 {
		for _, s := range m.AlpnOverride {
			l = len(s)
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FilterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlpnOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlpnOverride = append(m.AlpnOverride, &FilterConfig_AlpnOverride{})
			if err := m.AlpnOverride[len(m.AlpnOverride)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterConfig_AlpnOverride) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlpnOverride: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlpnOverride: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamProtocol", wireType)
			}
			m.UpstreamProtocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpstreamProtocol |= FilterConfig_Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlpnOverride", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlpnOverride = append(m.AlpnOverride, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthConfig
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)
