// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: envoy/config/filter/http/authn/v2alpha1/config.proto

// $title: Internal API for authentication implementation on Envoy.

package v2alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1alpha1 "istio.io/api/authentication/v1alpha1"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FilterConfig is the config for Istio-specific filter that is used to enforce
// authentication policy on Envoy.
type FilterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policy is the original copy of the policy.
	Policy *v1alpha1.Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// Map from issuer to location of the payload that is emitted by Jwt filter.
	// This information is added by pilot when construct and add Jwt and
	// authN filters.
	JwtOutputPayloadLocations map[string]string `protobuf:"bytes,2,rep,name=jwt_output_payload_locations,json=jwtOutputPayloadLocations,proto3" json:"jwt_output_payload_locations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Skips validating the peer's trust domain.
	// By default, the istio authn filter will reject the request if the peer and
	// the local service is not in the same trust domain.
	// Set this field to true to skip the validation and allows peers from any
	// trust domains.
	// Note, the istio authn filter only validates the trust domain when mTLS is
	// used, In other words, this field has no effect for plaintext traffic.
	// TODO(incfly): deprecate this after allowed_trust_domains is shipped.
	SkipValidateTrustDomain bool `protobuf:"varint,3,opt,name=skip_validate_trust_domain,json=skipValidateTrustDomain,proto3" json:"skip_validate_trust_domain,omitempty"`
	// allowed_trust_domains contains a list of trust domains the authn
	// filter should validate against. When configured, only requests with a
	// peer from one of the allowed trust domain will be admitted.
	// An empty list means all trust domains are allowed.
	// When this field is set, the skip_validate_trust_domain field is ignored.
	// This field has no effect for plaintext traffic.
	AllowedTrustDomains []string `protobuf:"bytes,4,rep,name=allowed_trust_domains,json=allowedTrustDomains,proto3" json:"allowed_trust_domains,omitempty"`
	// By default the authn filter will clear the route cache so that the validated
	// JWT token claims can be used in routing.
	// Advanced users can set this to true to disable the behavior if they do not
	// want the authn filter to clear the route cache for any reasons.
	// Warning: setting this to true will break the JWT claim based routing.
	DisableClearRouteCache bool `protobuf:"varint,5,opt,name=disable_clear_route_cache,json=disableClearRouteCache,proto3" json:"disable_clear_route_cache,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FilterConfig) Reset() {
	*x = FilterConfig{}
	mi := &file_envoy_config_filter_http_authn_v2alpha1_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterConfig) ProtoMessage() {}

func (x *FilterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_http_authn_v2alpha1_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterConfig.ProtoReflect.Descriptor instead.
func (*FilterConfig) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDescGZIP(), []int{0}
}

func (x *FilterConfig) GetPolicy() *v1alpha1.Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *FilterConfig) GetJwtOutputPayloadLocations() map[string]string {
	if x != nil {
		return x.JwtOutputPayloadLocations
	}
	return nil
}

func (x *FilterConfig) GetSkipValidateTrustDomain() bool {
	if x != nil {
		return x.SkipValidateTrustDomain
	}
	return false
}

func (x *FilterConfig) GetAllowedTrustDomains() []string {
	if x != nil {
		return x.AllowedTrustDomains
	}
	return nil
}

func (x *FilterConfig) GetDisableClearRouteCache() bool {
	if x != nil {
		return x.DisableClearRouteCache
	}
	return false
}

var File_envoy_config_filter_http_authn_v2alpha1_config_proto protoreflect.FileDescriptor

const file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDesc = "" +
	"\n" +
	"4envoy/config/filter/http/authn/v2alpha1/config.proto\x12-istio.envoy.config.filter.http.authn.v2alpha1\x1a$authentication/v1alpha1/policy.proto\"\xe5\x03\n" +
	"\fFilterConfig\x12=\n" +
	"\x06policy\x18\x01 \x01(\v2%.istio.authentication.v1alpha1.PolicyR\x06policy\x12\x9b\x01\n" +
	"\x1cjwt_output_payload_locations\x18\x02 \x03(\v2Z.istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntryR\x19jwtOutputPayloadLocations\x12;\n" +
	"\x1askip_validate_trust_domain\x18\x03 \x01(\bR\x17skipValidateTrustDomain\x122\n" +
	"\x15allowed_trust_domains\x18\x04 \x03(\tR\x13allowedTrustDomains\x129\n" +
	"\x19disable_clear_route_cache\x18\x05 \x01(\bR\x16disableClearRouteCache\x1aL\n" +
	"\x1eJwtOutputPayloadLocationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B6Z4istio.io/api/envoy/config/filter/http/authn/v2alpha1b\x06proto3"

var (
	file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDescOnce sync.Once
	file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDescData []byte
)

func file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDescGZIP() []byte {
	file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDescOnce.Do(func() {
		file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDesc), len(file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDesc)))
	})
	return file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDescData
}

var file_envoy_config_filter_http_authn_v2alpha1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_config_filter_http_authn_v2alpha1_config_proto_goTypes = []any{
	(*FilterConfig)(nil),    // 0: istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig
	nil,                     // 1: istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry
	(*v1alpha1.Policy)(nil), // 2: istio.authentication.v1alpha1.Policy
}
var file_envoy_config_filter_http_authn_v2alpha1_config_proto_depIdxs = []int32{
	2, // 0: istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.policy:type_name -> istio.authentication.v1alpha1.Policy
	1, // 1: istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.jwt_output_payload_locations:type_name -> istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_envoy_config_filter_http_authn_v2alpha1_config_proto_init() }
func file_envoy_config_filter_http_authn_v2alpha1_config_proto_init() {
	if File_envoy_config_filter_http_authn_v2alpha1_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDesc), len(file_envoy_config_filter_http_authn_v2alpha1_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_filter_http_authn_v2alpha1_config_proto_goTypes,
		DependencyIndexes: file_envoy_config_filter_http_authn_v2alpha1_config_proto_depIdxs,
		MessageInfos:      file_envoy_config_filter_http_authn_v2alpha1_config_proto_msgTypes,
	}.Build()
	File_envoy_config_filter_http_authn_v2alpha1_config_proto = out.File
	file_envoy_config_filter_http_authn_v2alpha1_config_proto_goTypes = nil
	file_envoy_config_filter_http_authn_v2alpha1_config_proto_depIdxs = nil
}
