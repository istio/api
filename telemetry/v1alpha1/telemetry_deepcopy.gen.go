// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry/v1alpha1/telemetry.proto

// Telemetry defines how the telemetry is generated for workloads within a mesh.
//
// For mesh level configuration, put the resource in root configuration namespace for
// your Istio installation *without* a workload selector.
//
// For any namespace, including the root configuration namespace, it is only valid
// to have a single workload selector-less Telemetry resource.
//
// For resources with a workload selector, it is only valid to have one resource selecting
// any given workload.
//
// The hierarchy of Telemetry configuration is as follows:
//
// 1. Workload-specific configuration
// 2. Namespace-specific configuration
// 3. Root namespace configuration
//
// Examples:
//
// Policy to enable random sampling for 10% of traffic:
// ```yaml
// apiVersion: telemetry.istio.io/v1alpha1
// kind: Telemetry
// metadata:
//   name: mesh-default
//   namespace: istio-system
// spec:
//   # no selector specified, applies to all workloads
//   tracing:
//   - randomSamplingPercentage: 10.00
// ```
//
// Policy to disable trace reporting for the "foo" workload (note: tracing
// context will still be propagated):
// ```yaml
// apiVersion: telemetry.istio.io/v1alpha1
// kind: Telemetry
// metadata:
//   name: foo-tracing
//   namespace: bar
// spec:
//   selector:
//     matchLabels:
//       service.istio.io/canonical-name: foo
//   tracing:
//   - disableSpanReporting: true
// ```
//
// Policy to select the alternate zipkin provider for trace reporting:
// ```yaml
// apiVersion: telemetry.istio.io/v1alpha1
// kind: Telemetry
// metadata:
//   name: foo-tracing-alternate
//   namespace: baz
// spec:
//   selector:
//     matchLabels:
//       service.istio.io/canonical-name: foo
//   tracing:
//   - providers:
//     - name: "zipkin-alternate"
//     randomSamplingPercentage: 10.00
// ```
//
// Policy to add a custom tag from a literal value:
// ```yaml
// apiVersion: telemetry.istio.io/v1alpha1
// kind: Telemetry
// metadata:
//   name: mesh-default
//   namespace: istio-system
// spec:
//   # no selector specified, applies to all workloads
//   tracing:
//   - randomSamplingPercentage: 10.00
//     customTags:
//       my_new_foo_tag:
//         literal:
//           value: "foo"
// ```
//
// Policy to disable server-side metrics for Stackdriver for an entire mesh:
// ```yaml
// apiVersion: telemetry.istio.io/v1alpha1
// kind: Telemetry
// metadata:
//   name: mesh-default
//   namespace: istio-system
// spec:
//   # no selector specified, applies to all workloads
//   metrics:
//   - providers:
//     - name: stackdriver
//     overrides:
//     - match:
//         metric: ALL_METRICS
//         mode: SERVER
//       disabled: true
// ```
//
// Policy to add dimensions to all Prometheus metrics for the `foo` namespace:
// ```yaml
// apiVersion: telemetry.istio.io/v1alpha1
// kind: Telemetry
// metadata:
//   name: namespace-metrics
//   namespace: foo
// spec:
//   # no selector specified, applies to all workloads in the namespace
//   metrics:
//   - providers:
//     - name: prometheus
//     overrides:
//     # match clause left off matches all istio metrics, client and server
//     - tagOverrides:
//         request_method:
//           value: "request.method"
//         request_host:
//           value: "request.host"
// ```
//
// Policy to remove the response_code dimension on some Prometheus metrics for
// the `bar.foo` workload:
// ```yaml
// apiVersion: telemetry.istio.io/v1alpha1
// kind: Telemetry
// metadata:
//   name: remove-response-code
//   namespace: foo
// spec:
//   selector:
//     matchLabels:
//       service.istio.io/canonical-name: bar
//   metrics:
//   - providers:
//     - name: prometheus
//     overrides:
//     - match:
//         metric: REQUEST_COUNT
//       tagOverrides:
//         response_code:
//           operation: REMOVE
//     - match:
//         metric: REQUEST_DURATION
//       tagOverrides:
//         response_code:
//           operation: REMOVE
//     - match:
//         metric: REQUEST_BYTES
//       tagOverrides:
//         response_code:
//           operation: REMOVE
//     - match:
//         metric: RESPONSE_BYTES
//       tagOverrides:
//         response_code:
//           operation: REMOVE
// ```
//
// Policy to enable access logging for the entire mesh:
// ```yaml
// apiVersion: telemetry.istio.io/v1alpha1
// kind: Telemetry
// metadata:
//   name: mesh-default
//   namespace: istio-system
// spec:
//   # no selector specified, applies to all workloads
//   accessLogging:
//   - providers:
//     - name: envoy
//     # By default, this turns on access logging (no need to set `disabled: false`).
//     # Unspecified `disabled` will be treated as `disabled: false`, except in
//     # cases where a parent configuration has marked as `disabled: true`. In
//     # those cases, `disabled: false` must be set explicitly to override.
// ```
//
// Policy to disable access logging for the `foo` namespace:
// ```yaml
// apiVersion: telemetry.istio.io/v1alpha1
// kind: Telemetry
// metadata:
//   name: namespace-no-log
//   namespace: foo
// spec:
//   # no selector specified, applies to all workloads in the namespace
//   accessLogging:
//   - disabled: true
// ```
//

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "istio.io/api/type/v1beta1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// DeepCopyInto supports using Telemetry within kubernetes types, where deepcopy-gen is used.
func (in *Telemetry) DeepCopyInto(out *Telemetry) {
	p := proto.Clone(in).(*Telemetry)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Telemetry. Required by controller-gen.
func (in *Telemetry) DeepCopy() *Telemetry {
	if in == nil {
		return nil
	}
	out := new(Telemetry)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new Telemetry. Required by controller-gen.
func (in *Telemetry) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using Tracing within kubernetes types, where deepcopy-gen is used.
func (in *Tracing) DeepCopyInto(out *Tracing) {
	p := proto.Clone(in).(*Tracing)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Tracing. Required by controller-gen.
func (in *Tracing) DeepCopy() *Tracing {
	if in == nil {
		return nil
	}
	out := new(Tracing)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new Tracing. Required by controller-gen.
func (in *Tracing) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using Tracing_CustomTag within kubernetes types, where deepcopy-gen is used.
func (in *Tracing_CustomTag) DeepCopyInto(out *Tracing_CustomTag) {
	p := proto.Clone(in).(*Tracing_CustomTag)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Tracing_CustomTag. Required by controller-gen.
func (in *Tracing_CustomTag) DeepCopy() *Tracing_CustomTag {
	if in == nil {
		return nil
	}
	out := new(Tracing_CustomTag)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new Tracing_CustomTag. Required by controller-gen.
func (in *Tracing_CustomTag) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using Tracing_Literal within kubernetes types, where deepcopy-gen is used.
func (in *Tracing_Literal) DeepCopyInto(out *Tracing_Literal) {
	p := proto.Clone(in).(*Tracing_Literal)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Tracing_Literal. Required by controller-gen.
func (in *Tracing_Literal) DeepCopy() *Tracing_Literal {
	if in == nil {
		return nil
	}
	out := new(Tracing_Literal)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new Tracing_Literal. Required by controller-gen.
func (in *Tracing_Literal) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using Tracing_Environment within kubernetes types, where deepcopy-gen is used.
func (in *Tracing_Environment) DeepCopyInto(out *Tracing_Environment) {
	p := proto.Clone(in).(*Tracing_Environment)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Tracing_Environment. Required by controller-gen.
func (in *Tracing_Environment) DeepCopy() *Tracing_Environment {
	if in == nil {
		return nil
	}
	out := new(Tracing_Environment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new Tracing_Environment. Required by controller-gen.
func (in *Tracing_Environment) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using Tracing_RequestHeader within kubernetes types, where deepcopy-gen is used.
func (in *Tracing_RequestHeader) DeepCopyInto(out *Tracing_RequestHeader) {
	p := proto.Clone(in).(*Tracing_RequestHeader)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Tracing_RequestHeader. Required by controller-gen.
func (in *Tracing_RequestHeader) DeepCopy() *Tracing_RequestHeader {
	if in == nil {
		return nil
	}
	out := new(Tracing_RequestHeader)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new Tracing_RequestHeader. Required by controller-gen.
func (in *Tracing_RequestHeader) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using ProviderRef within kubernetes types, where deepcopy-gen is used.
func (in *ProviderRef) DeepCopyInto(out *ProviderRef) {
	p := proto.Clone(in).(*ProviderRef)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProviderRef. Required by controller-gen.
func (in *ProviderRef) DeepCopy() *ProviderRef {
	if in == nil {
		return nil
	}
	out := new(ProviderRef)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new ProviderRef. Required by controller-gen.
func (in *ProviderRef) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using Metrics within kubernetes types, where deepcopy-gen is used.
func (in *Metrics) DeepCopyInto(out *Metrics) {
	p := proto.Clone(in).(*Metrics)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Metrics. Required by controller-gen.
func (in *Metrics) DeepCopy() *Metrics {
	if in == nil {
		return nil
	}
	out := new(Metrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new Metrics. Required by controller-gen.
func (in *Metrics) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using MetricSelector within kubernetes types, where deepcopy-gen is used.
func (in *MetricSelector) DeepCopyInto(out *MetricSelector) {
	p := proto.Clone(in).(*MetricSelector)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricSelector. Required by controller-gen.
func (in *MetricSelector) DeepCopy() *MetricSelector {
	if in == nil {
		return nil
	}
	out := new(MetricSelector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new MetricSelector. Required by controller-gen.
func (in *MetricSelector) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using MetricsOverrides within kubernetes types, where deepcopy-gen is used.
func (in *MetricsOverrides) DeepCopyInto(out *MetricsOverrides) {
	p := proto.Clone(in).(*MetricsOverrides)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricsOverrides. Required by controller-gen.
func (in *MetricsOverrides) DeepCopy() *MetricsOverrides {
	if in == nil {
		return nil
	}
	out := new(MetricsOverrides)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new MetricsOverrides. Required by controller-gen.
func (in *MetricsOverrides) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using MetricsOverrides_TagOverride within kubernetes types, where deepcopy-gen is used.
func (in *MetricsOverrides_TagOverride) DeepCopyInto(out *MetricsOverrides_TagOverride) {
	p := proto.Clone(in).(*MetricsOverrides_TagOverride)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricsOverrides_TagOverride. Required by controller-gen.
func (in *MetricsOverrides_TagOverride) DeepCopy() *MetricsOverrides_TagOverride {
	if in == nil {
		return nil
	}
	out := new(MetricsOverrides_TagOverride)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new MetricsOverrides_TagOverride. Required by controller-gen.
func (in *MetricsOverrides_TagOverride) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using AccessLogging within kubernetes types, where deepcopy-gen is used.
func (in *AccessLogging) DeepCopyInto(out *AccessLogging) {
	p := proto.Clone(in).(*AccessLogging)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessLogging. Required by controller-gen.
func (in *AccessLogging) DeepCopy() *AccessLogging {
	if in == nil {
		return nil
	}
	out := new(AccessLogging)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new AccessLogging. Required by controller-gen.
func (in *AccessLogging) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}

// DeepCopyInto supports using AccessLogging_Filter within kubernetes types, where deepcopy-gen is used.
func (in *AccessLogging_Filter) DeepCopyInto(out *AccessLogging_Filter) {
	p := proto.Clone(in).(*AccessLogging_Filter)
	*out = *p
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessLogging_Filter. Required by controller-gen.
func (in *AccessLogging_Filter) DeepCopy() *AccessLogging_Filter {
	if in == nil {
		return nil
	}
	out := new(AccessLogging_Filter)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new AccessLogging_Filter. Required by controller-gen.
func (in *AccessLogging_Filter) DeepCopyInterface() interface{} {
	return in.DeepCopy()
}
